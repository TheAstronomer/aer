comment: ([_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
firstLineMatch: ^#!\s*/.*\b(node|js)$\n?
foldingEndMarker: (\*/|\}|\))
foldingStartMarker: (/\*|{|\()
information_for_contributors: |
  This file has been edited from the official Babel grammar file at this
  repository, featuring syntax customizations for the Saga programming language.

  This grammar is edited from https://github.com/michaelgmcd/vscode-language-babel. 

  Saga is a programming language syntactically influenced by ReasonML, Swift, Scala,
  Go, Kotlin and JavaScript, and is designed to work well with the **JavaScript** and 
  **Python** ecosystems in one. It has all the features you crave from many paradigms
  and languages.

  Should you want to provide a fix or improvement, please create a pull request
  against this repository: https://github.com/NoxUltima/vscode-language-saga/
  Once accepted, I am happy to receive your request and feedback. 

  TODOs/Unresolved:
    - Fix generics in function/method calls 
    - Revamp regex syntax (more syntax scopes for constructs)
    - Fix keywords matches, we do not need long ones like `function`.
    - As of the moment, custom binary operators do not capture combinations of [</>],
      except those leading in either characters, such as <!, >* and /%.
      This is done to avoid confusion with JSX <></> and multiline regex syntax.
      /></></ Might need some help here (scroll to section `operators`.)

name: Saga + JavaScript + Python
scopeName: source.nearley # for testing only, this would be removed
fileTypes:
  - saga
  - ne # for testing only, this would be replaced
patterns:
  - include: '#core'
repository:
  arrow-expression:
    begin: (?<==>)\s*$
    comment: or inside a class def on a ; or braced block } end of line or ;
    end: (?=\s*([,;}]|$))|(?<=})
    patterns:
      - include: '#core'
  arrow-function:
    patterns:
      - begin: >-
          \s*+(\basync\b)?(?=\s*(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))\s*+(((?::(?:(\s*+(&|\|)?(\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?|\s*+({(?:(?>[^{}]+)|\g<-1>)*\})|\s*+(\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\s*+(\s*(["']).*?\k<-1>(?<!\\.))|\s*[+-x]?\h+))|(?:\s*+/\*.*?\*/))*+)*)|(?:/\*.*?\*/))\s*=>)
        comment: e.g. (args) => { }
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.arrow.js
        beginCaptures:
          1: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
      - comment: e.g. arg => { }
        match: \s*+(\basync\b)?\s*+(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))\s*(=>)
        name: meta.function.arrow.js
        captures:
          1: { name: storage.type.js }
          2: { name: meta.function.parameters.js }
          3: { name: variable.other.readwrite.js }
          4: { name: storage.type.function.arrow.js }
      - include: '#arrow-function-simple-assignments'
      - begin: >-
          \s*+(\#?)(\b[_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)?(?:(\?\.)|(\.))(proto|prototype)(?:(\?\.)|(\.))(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(=)\s*+(\basync\b)?(?=\s*(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))\s*+(((?::(?:(\s*+(&|\|)?(\s*%checks\b|\s*(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))+|\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)|(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)+|\s*+({(?:(?>[^{}]+)|\g<-1>)*\})|\s*+(\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\s*+(\s*(["']).*?\k<-1>(?<!\\.))|\s*[+-x]?\h+))|(?:\s*+/\*.*?\*/))*+)*)|(?:/\*.*?\*/))\s*=>)
        comment: Sound.prototype.play = (args) => { }
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.prototype.function.arrow.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { name: entity.name.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: variable.language.prototype.js }
          6: { name: keyword.operator.existential.js }
          7: { name: keyword.operator.accessor.js }
          8: { name: keyword.operator.private.js }
          9: { patterns: [{ include: '#function-name' }] }
          10: { name: keyword.operator.assignment.js }
          11: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
      - comment: e.g. Sound.prototype.play = arg => { }
        match: >-
          \s*+(\#?)(\b[_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)?\s*(?:(\?\.)|(\.))(proto|prototype)(?:(\?\.)|(\.))(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(=)\s*+(\basync\b)?\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*(=>)
        name: meta.prototype.function.arrow.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: entity.name.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: variable.language.prototype.js }
          6: { name: keyword.operator.existential.js }
          7: { name: keyword.operator.accessor.js }
          8: { name: keyword.operator.private.js }
          9: { patterns: [{ include: '#function-name' }] }
          10: { name: keyword.operator.assignment.js }
          11: { name: storage.type.js }
          12: { name: variable.other.readwrite.js }
          13: { name: storage.type.function.arrow.js }
      - begin: >-
          \s*+(\#?)(\b[_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)?(?:(\?\.)|(\.))(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(=)\s*+(\basync\b)?(?=\s*+(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))\s*+(((?::(?:(\s*+(&|\|)?(\s*%checks\b|\s*(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))+|\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)|(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)+|\s*+({(?:(?>[^{}]+)|\g<-1>)*\})|\s*+(\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\s*+(\s*(["']).*?\k<-1>(?<!\\.))|\s*[+-x]?\h+))|(?:\s*+/\*.*?\*/))*+)*)|(?:/\*.*?\*/))\s*=>)
        comment: e.g. Sound.play = (args) => { }
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.static.arrow.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { name: entity.name.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.private.js }
          6: { patterns: [{ include: '#function-name' }] }
          7: { name: keyword.operator.assignment.js }
          8: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
      - comment: e.g. Sound.play = arg => { }
        match: >-
          \s*+(\#?)(\b[_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)?(?:(\?\.)|(\.))(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(=)\s*+(\basync\b)?\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*(=>)
        name: meta.function.static.arrow.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: entity.name.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.private.js }
          6: { patterns: [{ include: '#function-name' }] }
          7: { name: keyword.operator.assignment.js }
          8: { name: storage.type.js }
          9: { name: variable.other.readwrite.js }
          10: { name: storage.type.function.arrow.js }
  arrow-function-labels:
    patterns:
      - include: '#async-arrow-function-labels'
      - begin: >-
          (?<=^|{|,)\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(:)\s*+(\basync\b)?\s*+(?=(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))\s*+(((?::(?:(\s*+(&|\|)?(\s*%checks\b|\s*(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))+|\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)|(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)+|\s*+({(?:(?>[^{}]+)|\g<-1>)*\})|\s*+(\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\s*+(\s*(["']).*?\k<-1>(?<!\\.))|\s*[+-x]?\h+))|(?:\s*+/\*.*?\*/))*+)*)|(?:/\*.*?\*/))\s*=>)
        comment: 'e.g. play: async <T>(args) => { }'
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.json.arrow.js
        beginCaptures:
          1: { patterns: [{ include: '#function-name' }] }
          2: { name: punctuation.separator.key-value.js }
          3: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
      - comment: 'e.g. play: arg => { }'
        match: >-
          (?<=^|{|,)\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(:)\s*+(\basync\b)?\s*+(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))\s*(=>)
        name: meta.function.json.arrow.js
        captures:
          1: { patterns: [{ include: '#function-name' }] }
          2: { name: keyword.operator.assignment.js }
          3: { name: storage.type.js }
          4: { name: meta.function.parameters.js }
          5: { name: variable.other.readwrite.js }
          6: { name: storage.type.function.arrow.js }
      - begin: >-
          (?<=^|{|,)\s*+(('|")([^"']*)(\k<-3>))\s*(:)\s*+(\basync\b)?\s*+(?=(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))\s*+(((?::(?:(\s*+(&|\|)?(\s*%checks\b|\s*(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))+|\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)|(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)+|\s*+({(?:(?>[^{}]+)|\g<-1>)*\})|\s*+(\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\s*+(\s*(["']).*?\k<-1>(?<!\\.))|\s*[+-x]?\h+))|(?:\s*+/\*.*?\*/))*+)*)|(?:/\*.*?\*/))\s*=>)
        comment: "e.g. 'play': (args) => { }"
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.json.arrow.js
        beginCaptures:
          1: { name: string.quoted.js }
          2: { name: punctuation.definition.string.begin.js }
          3: { patterns: [{ include: '#function-name' }] }
          4: { name: punctuation.definition.string.end.js }
          5: { name: punctuation.separator.key-value.js }
          6: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
      - comment: "e.g. 'play': arg => { }"
        match: >-
          (?<=^|{|,)\s*+(('|")([^"']*)(\k<-3>))\s*+(:)\s*+(\basync\b)?\s*+(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))\s*(=>)
        name: meta.function.json.arrow.js
        captures:
          1: { name: string.quoted.js }
          2: { name: punctuation.definition.string.begin.js }
          3: { patterns: [{ include: '#function-name' }] }
          4: { name: punctuation.definition.string.end.js }
          5: { name: keyword.operator.assignment.js }
          6: { name: storage.type.js }
          7: { name: meta.function.parameters.js }
          8: { name: variable.other.readwrite.js }
          9: { name: storage.type.function.arrow.js }
  arrow-function-simple-assignments:
    patterns:
      - include: '#async-arrow-function-simple-assignments'
      - begin: >-
          \s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(=)\s*+(\basync\b)?(?=(\s*+<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))\s*+(((?::(?:(\s*+(&|\|)?(\s*%checks\b|\s*(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))+|\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)|(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)+|\s*+({(?:(?>[^{}]+)|\g<-1>)*\})|\s*+(\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\s*+(\s*(["']).*?\k<-1>(?<!\\.))|\s*[+-x]?\h+))|(?:\s*+/\*.*?\*/))*+)*)|(?:/\*.*?\*/))\s*=>)
        comment: e.g. play = (args) => { }
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.arrow.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.assignment.js }
          4: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
      - comment: e.g. play = arg => { }
        match: >-
          \s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(=)\s*+\s*+(\basync\b)?\s*+(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))\s*(=>)
        name: meta.function.arrow.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.assignment.js }
          4: { name: storage.type.js }
          5: { name: meta.function.parameters.js }
          6: { name: variable.other.readwrite.js }
          7: { name: storage.type.function.arrow.js }
  async-arrow-function-labels:
    patterns:
      - begin: >-
          (?<=^|{|,)\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(:)\s*+(?:(\basync)\s+)(?=(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+\()
        comment: 'e.g. play: async <T>('
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.json.arrow.js
        beginCaptures:
          1: { patterns: [{ include: '#function-name' }] }
          2: { name: punctuation.separator.key-value.js }
          3: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
      - begin: (?<=^|{|,)\s*+(('|")([^"']*)(\k<-3>))\s*(:)\s*+(?:(\basync)\s+)(?=(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+\()
        comment: "e.g. 'play': async <T>("
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.json.arrow.js
        beginCaptures:
          1: { name: string.quoted.js }
          2: { name: punctuation.definition.string.begin.js }
          3: { patterns: [{ include: '#function-name' }] }
          4: { name: punctuation.definition.string.end.js }
          5: { name: punctuation.separator.key-value.js }
          6: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
  async-arrow-function-simple-assignments:
    patterns:
      - begin: >-
          \s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(=)\s*+(?:(\basync)\s+)(?=\s*(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+\()
        comment: e.g. play = (args) => { }
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.arrow.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.assignment.js }
          4: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
  brackets:
    patterns:
      - include: '#round-brackets'
      - include: '#square-brackets'
      - include: '#curly-brackets'
  catch:
    patterns:
      - begin: (?<!\.)\s*+\b(try|catch|rescue|finally)\b\s*(await)?\b
        end: \s*((?<=[});])|(?=\b(try|catch|rescue|finally)\b))
        name: meta.catch.js
        beginCaptures:
          1: { name: keyword.control.trycatch.js }
          2: { name: keyword.control.flow.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#curly-brackets'
          - include: '#round-brackets'
          - include: $self
  class:
    patterns:
      - begin: (?<!\.)\s*+\b((class))\s+
        comment: Classes
        end: \s*(=(?!=|>))|\s*(?<=})
        beginCaptures:
          1: { name: meta.class.js }
          2: { name: storage.type.class.js }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#round-brackets'
          - match: \s*+\b((ext)|(impl)|(only))\b\s*+
            captures:
              1: { name: meta.class.extends.js }
              2: { name: storage.type.extends.js }
              3: { name: storage.type.implements.js }
              4: { name: keyword.operator.expression.only.js }
          - comment:
              look for interface names but don't assume uppercase start char
            match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
            name: entity.name.class.js
          - include: '#flowtype'
          - begin: \s*+({)
            contentName: meta.class.body.js
            end: \s*(})
            beginCaptures:
              1: { name: punctuation.section.class.begin.js }
            endCaptures:
              1: { name: punctuation.section.class.end.js }
            patterns:
              - include: '#flowtype-method'
              - include: '#class-content'
          - match: \s*(\.)
            captures:
              1: { name: keyword.operator.accessor.js }
          - include: '#core'
  class-body:
    patterns:
      - include: '#core'
      - include: '#attributes'
      - include: '#modifiers'
      - include: '#flowtype-keywords'
      - include: '#arrow-expression'
      - include: '#arrow-function-simple-assignments'
      - include: '#arrow-function'
      - include: '#brackets'
      - include: '#es7-decorators'
      - include: '#comments'
      - comment: 'handle class fields with no flow types like var = '
        match: (?<!:)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*(?==)(?!=>|==)
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.readwrite.js }
      - begin: \s*+(?==[^=>])
        comment:
          a line starts with a static, [, name(, name:, name=, } or a semi-colon
          anywhere
        end: >-
          ((?=^\s*(\#?)(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+\??\s*+(:|=(?!^==|=>))|\[|((?:(\#?)[_\\p{L}\p{Nl}])(?:[(\#?)_\\p{L}\p{M}\p{N}])*+)\s*+\(|\b(static|async)\b)|}))|\s*(;)
        endCaptures:
          9: { name: punctuation.terminator.statement.js }
        patterns:
          - include: '#method'
          - include: '#core'
      - match: (?<!\.)\s*+\b(static)\b(?!\.)
        captures:
          1: { name: storage.modifier.js }
      - include: '#flowtype-variable'
      - include: '#semi-colon'
  class-content:
    patterns:
      - include: '#core'
  comma:
    patterns:
      - match: \s*+(,)
        captures:
          1: { name: meta.delimiter.comma.js }
  comments:
    patterns:
      - include: '#swift-comments'
      - include: '#flowtype-comments'
      - include: '#special-comments-conditional-compilation'
      - begin: \s*+((/\*\*))(?!/|\*)
        contentName: comment.block.documentation.js
        end: (\s*(\*/))
        captures:
          1: { name: comment.block.documentation.js }
          2: { name: punctuation.definition.comment.js }
        patterns:
          - include: '#jsdoc'
      - begin: \s*+((/\*))
        contentName: comment.block.js
        end: (\s*(\*/))
        captures:
          1: { name: comment.block.js }
          2: { name: punctuation.definition.comment.js }
      - begin: \s*+(<!--)
        contentName: comment.block.html.js
        end: \s*+(-->)
        beginCaptures:
          1: { name: punctuation.definition.comment.js }
        endCaptures:
          1: { name: punctuation.definition.comment.js }
      - begin: ((^\s*)|\s*)((///))
        comment:
          leading whitespace on a new line comment is scoped so Atom reflow
          works
        contentName: comment.line.triple-slash.js
        end: \s*$
        beginCaptures:
          2: { name: punctuation.whitespace.comment.leading.js }
          3: { name: comment.line.triple-slash.js }
          4: { name: punctuation.definition.comment.js }
        endCaptures:
          0: { name: comment.line.triple-slash.js }
      - begin: ((^\s*)|\s*)((//))
        comment:
          leading whitespace on a new line comment is scoped so Atom reflow
          works
        contentName: comment.line.double-slash.js
        end: \s*$
        beginCaptures:
          2: { name: punctuation.whitespace.comment.leading.js }
          3: { name: comment.line.double-slash.js }
          4: { name: punctuation.definition.comment.js }
        endCaptures:
          0: { name: comment.line.double-slash.js }
      - match: ^(\#!).*$\n?
        name: comment.line.shebang.js
        captures:
          1: { name: punctuation.definition.comment.js }
  core:
    patterns:
      - include: '#expression'
  curly-brackets:
    patterns:
      - begin: \s*+(#{)
        end: \s*(\})
        beginCaptures:
          1: { name: meta.brace.curly.litobj.js }
        endCaptures:
          1: { name: meta.brace.curly.litobj.js }
        patterns:
          - include: '#object-body'
      - begin: \s*+({)
        end: \s*(\})
        beginCaptures:
          1: { name: meta.brace.curly.js }
        endCaptures:
          1: { name: meta.brace.curly.js }
        patterns:
          - include: '#js-label'
          - include: '#core'
  do:
    patterns:
      - begin: (?<!\.)\s*+\b(do)\b\s*(await)?\b
        end: \s*(?<=[})])
        name: meta.do.js
        beginCaptures:
          1: { name: keyword.control.do.js }
          2: { name: keyword.control.flow.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#round-brackets'
          - include: '#curly-brackets'
          - include: $self
  enum-declaration:
    begin: (?<!\.)\s*+\b(enum)\s+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)?
    end: \s*(=(?!=|>))|\s*(?<=})
    name: meta.enum.declaration.flowtype
    beginCaptures:
      1: { name: storage.type.enum.flowtype }
      2: { name: entity.name.type.enum.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#comments'
          - begin: ([_$[:alpha:]][_$[:alnum:]]*)(?:\s*(=(?!=|>)))?\s*
            end: (?=([,;}])|$)
            beginCaptures:
              1: { name: variable.other.enummember.flowtype }
              2: { name: keyword.operator.assignment.js }
            endCaptures:
              1: { patterns: [{ include: '#expression' }] }
            patterns:
              - include: '#expression'
      - include: '#of-clause'
      - include: '#comments'
      - include: '#flowtype-polymorphs'
      - include: '#round-brackets'
      - include: '#core'
  es7-decorators:
    patterns:
      - applyEndPatternLast: 1
        begin: >-
          (?<!@)\s*+(?:(@)(\#?)(?:((?:[\p{Lu}\p{Nl}])(?:[_\\\p{L}\p{N}\p{M}])*+)|((?:[_\\\p{L}\p{Nl}])(?:[_\\\p{L}\p{N}\p{M}])*+)))
        comment:
          Look for a @identifier start If unicode start uppercase e.g. @A class
          it as a class
        end: (?=.)
        beginCaptures:
          1: { name: keyword.operator.decorator.saga }
          2: { name: keyword.operator.private.saga }
          3: { name: entity.name.class.decorator.saga }
          4: { name: variable.other.readwrite.decorator.saga }
        patterns:
          - begin: \s*(?:(\?\.)|(\.))
            commnent:
              decorator .property or .method which may be on a different line
            end: >-
              \s*(\#?)(?:((?:[\p{Lu}\p{Nl}])(?:[_\\\p{L}\p{N}\p{M}])*+)|((?:[_\\\p{L}\p{Nl}])(?:[_\\\p{L}\p{N}\p{M}])*+))
            beginCaptures:
              1: { name: keyword.operator.existential.saga }
              2: { name: keyword.operator.accessor.saga }
            endCaptures:
              1: { name: keyword.operator.private.saga }
              2: { name: entity.name.class.decorator.saga }
              3: { name: variable.other.property.decorator.saga }
            patterns:
              - include: '#comments'
          - comment: arguments for decorators
            include: '#round-brackets'
          - begin: >-
              (?:(?<=^|;)|(?=\s))\s*+(\bstatic\b)?\s*+(\basync\b)?\s*+(\*?)\s*+(?<!\.)(\#?)((?:[_\\\p{L}\p{Nl}])(?:[_\\\p{L}\p{N}\p{M}])*+)\s*+(?=(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?(\())
            comment:
              'method that always follow decorators such as play<T,T>(arg1,
              arg2): Type<T> { }'
            end: (?<=:|})|(?=;|}|,)
            name: meta.function.method.saga
            beginCaptures:
              1: { name: storage.modifier.saga }
              2: { name: storage.type.saga }
              3: { name: keyword.generator.asterisk.saga }
              4: { name: keyword.operator.private.saga }
              5: { name: entity.name.function.method.saga }
            patterns:
              - include: '#flowtype'
              - include: '#curly-brackets'
              - include: '#class-content'
              - include: $self
          - include: '#comments'
          - match: |
              \s*
  es7-function-bind:
    patterns:
      - comment: https://github.com/zenparsing/es-function-bind#examples
        match: \s*(::)
        captures:
          1: { name: keyword.operator.accessor.js }
  esnext-pipeline:
    patterns:
      - applyEndPatternLast: 1
        begin: \s*(\+>)(?=\s*(\#?)(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\??\.?\#?)++\s*([^(]|$|;))
        end: (?=.)
        beginCaptures:
          1: { name: keyword.operator.pipeline.js }
        patterns:
          - match: >-
              (?<=\+>)\s*(?!\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b)(\#?)(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))(?!\?|\.)
            captures:
              2: { name: keyword.operator.private.js }
              3: { name: meta.function-call.without-arguments.js }
              4: { patterns: [{ include: '#function-name' }] }
          - match: >-
              \s*(?!\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b)(\#?)(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))(?!\?|\.)
            captures:
              2: { name: keyword.operator.private.js }
              3: { name: meta.method-call.without-arguments.js }
              4: { patterns: [{ include: '#method-name' }] }
          - match: >-
              \s*(?!\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b)(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)(\??)(\.?)
            captures:
              2: { name: keyword.operator.private.js }
              3: { name: variable.other.object.js }
              4: { name: keyword.operator.existential.js }
              5: { name: keyword.operator.accessor.js }
          - include: '#comments'
      - applyEndPatternLast: 1
        begin: \s*(\|>)(?=\s*(\#?)(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\??\.?\#?)++\s*([^(]|$|;))
        end: (?=.)
        beginCaptures:
          1: { name: keyword.operator.pipeline.js }
        patterns:
          - match: >-
              (?<=\|>)\s*(?!\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b)(\#?)(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))(?!\?|\.)
            captures:
              2: { name: keyword.operator.private.js }
              3: { name: meta.function-call.without-arguments.js }
              4: { patterns: [{ include: '#function-name' }] }
          - match: >-
              \s*(?!\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b)(\#?)(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))(?!\?|\.)
            captures:
              2: { name: keyword.operator.private.js }
              3: { name: meta.method-call.without-arguments.js }
              4: { patterns: [{ include: '#method-name' }] }
          - match: >-
              \s*(?!\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b)(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)(\??)(\.?)
            captures:
              2: { name: keyword.operator.private.js }
              3: { name: variable.other.object.js }
              4: { name: keyword.operator.existential.js }
              5: { name: keyword.operator.accessor.js }
          - include: '#comments'
      - match: \s*(\|>|\+>)
        captures:
          1: { name: keyword.operator.pipeline.js }
  expression:
    patterns:
      - include: '#for'
      - include: '#if'
      - include: '#switch'
      - include: '#match'
      - include: '#catch'
      - include: '#with'
      - include: '#do'
      - include: '#keyword-storage'
      - include: '#new-expression'
      - include: '#query-expression'
      - include: '#enum-declaration'
      - include: '#operator'
      - include: '#function'
      - include: '#method-call'
      - include: '#function-call'
      - include: '#class'
      - include: '#flowtype-keywords'
      - include: '#flowtype-trap'
      - include: '#keywords'
      - include: '#modifiers'
      - include: '#multiline-arrow-function-generics'
      - include: '#jsx'
      - include: '#es7-decorators'
      - include: '#js-label'
      - include: '#function'
      - include: '#arrow-function'
      - comment: after function, which includes some prototype strings
        include: '#prototype'
      - include: '#multiline-regexp'
      - comment: before operators to avoid ambiguities
        include: '#regexp'
      - include: '#number'
      - include: '#quasi'
      - include: '#string'
      - include: '#language-constant'
      - include: '#language-variable'
      - include: '#support'
      - comment: before module as it traps default {
        include: '#object'
      - include: '#module'
      - include: '#implicit-call'
      - include: '#variable-flowtype'
      - include: '#support-properties'
      - include: '#variable'
      - include: '#brackets'
      - include: '#operators'
      - include: '#punctuation'
      - include: '#comments'
      - include: '#fat-arrow'
  fat-arrow:
    comment: trap fat-arrow
    patterns:
      - applyEndPatternLast: 1
        begin: \s*(=>)
        comment: match arrow func symbol
        end: (?=.)
        beginCaptures:
          1: { name: storage.type.function.arrow.js }
        patterns:
          - include: $self
  fat-arrow-braced-body:
    begin: \s*(=>)\s*({)
    comment: ' => {'
    end: \s*(})
    beginCaptures:
      1: { name: storage.type.function.arrow.js }
      2: { name: meta.brace.curly.js }
    endCaptures:
      1: { name: meta.brace.curly.js }
    patterns:
      - include: $self
  flowtype:
    patterns:
      - include: '#comments'
      - include: '#flowtype-return'
      - include: '#flowtype-polymorphs'
      - include: '#flowtype-bracketed-args'
  flowtype-bracketed-args:
    patterns:
      - begin: (?<!}|return|await|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|while|for|throw)\s*((\())
        comment: Get parameters within a function/method call
        contentName: meta.function.parameters.js
        end: \s*((\)))
        beginCaptures:
          1: { name: punctuation.definition.parameters.begin.js }
          2: { name: meta.brace.round.js }
        endCaptures:
          1: { name: punctuation.definition.parameters.end.js }
          2: { name: meta.brace.round.js }
        patterns:
          - include: '#modifiers'
          - include: '#flowtype-polymorphs'
          - include: '#flowtype-variable'
  flowtype-bracketed-parameters:
    patterns:
      - applyEndPatternLast: 1
        begin: \s*+(?=(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))\s*+(?!\.|:|=>|{|/\*\s*:))
        comment:
          'trap balanced parens which are NOT followed by . : => { or /*: '
        end: (?=.)
        patterns:
          - begin: \s*(\()
            end: \s*(\))
            beginCaptures:
              1: { name: meta.brace.round.js }
            endCaptures:
              1: { name: meta.brace.round.js }
            patterns:
              - include: '#flowtype-parse-types'
      - begin: (?<!}|return|await|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|while|for|throw)\s*((\())
        comment: Get parameters within a function/method call
        contentName: meta.function.parameters.js
        end: \s*((\)))
        beginCaptures:
          1: { name: punctuation.definition.parameters.begin.js }
          2: { name: meta.brace.round.js }
        endCaptures:
          1: { name: punctuation.definition.parameters.end.js }
          2: { name: meta.brace.round.js }
        patterns:
          - include: '#flowtype-polymorphs'
          - include: '#flowtype-variable'
  flowtype-comments:
    patterns:
      - begin: \s*+(/\*)\s*(::)
        end: \s*(\*/)
        name: meta.comments.flowtype
        beginCaptures:
          1: { name: punctuation.definition.comment.js }
          2: { name: punctuation.type.flowtype }
        endCaptures:
          1: { name: punctuation.definition.comment.js }
        patterns:
          - include: '#flowtype-comments-optional-parameter'
          - include: '#module'
          - include: '#flowtype-keywords'
          - include: '#flowtype-predicate'
          - include: '#flowtype-parse-types'
          - include: '#function'
          - include: '#keyword-storage'
      - begin: \s*+(/\*)\s*(flow-include)\b
        end: \s*(\*/)
        name: meta.comments.flowtype
        beginCaptures:
          1: { name: punctuation.definition.comment.js }
          2: { name: keyword.other.flow-include.flowtype }
        endCaptures:
          1: { name: punctuation.definition.comment.js }
        patterns:
          - include: '#flowtype-comments-optional-parameter'
          - include: '#module'
          - include: '#flowtype-keywords'
          - include: '#flowtype-predicate'
          - include: '#flowtype-parse-types'
          - include: '#function'
          - include: '#keyword-storage'
      - begin: \s*+(/\*)\s*(:)((?=::)|(?!:))
        end: \s*(\*/)
        name: meta.comments.flowtype
        beginCaptures:
          1: { name: punctuation.definition.comment.js }
          2: { name: punctuation.type.flowtype }
        endCaptures:
          1: { name: punctuation.definition.comment.js }
        patterns:
          - include: '#flowtype-predicate'
          - include: '#flowtype-parse-types'
  flowtype-comments-optional-parameter:
    patterns:
      - match: (?<=::|flow-include)\s*(\?)
        captures:
          1: { name: keyword.operator.optional.parameter.flowtype }
  flowtype-declare:
    patterns:
      - match: (?<!\.)\s*+\b(decl)\b\s*+
        captures:
          1: { name: keyword.other.declare.flowtype }
      - applyEndPatternLast: 1
        begin: (?<!\.)\s*+\b(decl)\b\s*+\b(module)(.)(exports)(:)((?=::)|(?!:))
        comment: 'declare module.exports:'
        end: (?=.)
        beginCaptures:
          1: { name: keyword.other.declare.flowtype }
          2: { name: storage.type.module.flowtype }
          3: { name: keyword.operator.accessor.flowtype }
          4: { name: storage.type.module.flowtype }
          5: { name: punctuation.type.flowtype }
        patterns:
          - include: '#flowtype-parse-objects'
          - include: '#flowtype-parse-types'
      - begin: (?<!\.)\s*+\b(decl)\b\s*+\b(module)(\s|$)
        comment: declare modules
        end: \s*(?<=})
        beginCaptures:
          1: { name: keyword.other.declare.flowtype }
          2: { name: storage.type.module.flowtype }
        patterns:
          - include: '#flowtype-polymorphs'
          - comment: look for module names but don't assume uppercase start char
            match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
            captures:
              1: { name: entity.name.class.js }
          - comment: look for module names in quoted string forms
            include: '#string'
          - begin: \s*+({)
            contentName: meta.class.body.js
            end: \s*(})
            beginCaptures:
              1: { name: punctuation.section.class.begin.js }
            endCaptures:
              1: { name: punctuation.section.class.end.js }
            patterns:
              - include: '#flowtype-keywords'
              - include: '#flowtype-method'
              - include: '#class-content'
      - begin: (?<!\.)\s*+\b(decl|declare)\b\s*+(\bexport\b)?\s*+\b(class)\b
        comment: declare classes
        end: \s*(?<=})
        beginCaptures:
          1: { name: keyword.other.declare.flowtype }
          2: { name: keyword.constrol.module.flowtype }
          3: { name: storage.type.class.flowtype }
        patterns:
          - comment: look for extends keyword
            match: \s*+\b((ext))\b\s*+
            captures:
              1: { name: meta.class.extends.js }
              2: { name: storage.type.extends.js }
          - comment: look for implements keyword
            match: \s*+\b((impl))\b\s*+
            captures:
              1: { name: meta.class.implements.js }
              2: { name: storage.type.implements.js }
          - comment: look for mixins keyword
            match: \s*+\b((mix))\b\s*+
            captures:
              1: { name: meta.class.extends.js }
              2: { name: storage.type.extends.js }
          - comment: look for class names but don't assume uppercase start char
            match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
            captures:
              1: { name: entity.name.class.js }
          - begin: \s*+({)
            contentName: meta.class.body.js
            end: \s*(})
            beginCaptures:
              1: { name: punctuation.section.class.begin.js }
            endCaptures:
              1: { name: punctuation.section.class.end.js }
            patterns:
              - include: '#flowtype-method'
              - include: '#class-content'
          - include: '#flowtype-polymorphs'
          - include: '#comma'
          - match: \s*(\.)
            captures:
              1: { name: keyword.operator.accessor.js }
  flowtype-extension:
    begin: (?<!\.)\s*+\b(extn)(\s+|$)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: keyword.other.extension.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#round-brackets'
      - match: \s*+\b((ext)|(impl)|(only))\b\s*+
        captures:
          1: { name: meta.class.extends.js }
          2: { name: storage.type.extends.js }
          3: { name: storage.type.implements.js }
          4: { name: keyword.operator.expression.only.js }
      - comment: look for interface names but don't assume uppercase start char
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: entity.name.type.extension.js
      - include: '#flowtype'
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#core'
      - match: \s*(\.)
        captures:
          1: { name: keyword.operator.accessor.js }
      - include: '#core'
  flowtype-given:
    begin: (?<!\.)\s*+\b(given)(\s+|$)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: keyword.other.given.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#round-brackets'
      - match: \s*+\b((ext)|(impl)|(only))\b\s*+
        captures:
          1: { name: meta.class.extends.js }
          2: { name: storage.type.extends.js }
          3: { name: storage.type.implements.js }
          4: { name: keyword.operator.expression.only.js }
      - comment: look for interface names but don't assume uppercase start char
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: entity.name.type.given.js
      - include: '#flowtype'
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#flowtype-method'
          - include: '#class-content'
      - match: \s*(\.)
        captures:
          1: { name: keyword.operator.accessor.js }
      - include: '#core'
  flowtype-interface:
    begin: (?<!\.)\s*+\b(inter)(\s+|$)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: keyword.other.interface.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#round-brackets'
      - match: \s*+\b((ext)|(impl)|(only))\b\s*+
        captures:
          1: { name: meta.class.extends.js }
          2: { name: storage.type.extends.js }
          3: { name: storage.type.implements.js }
          4: { name: keyword.operator.expression.only.js }
      - comment: look for interface names but don't assume uppercase start char
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: entity.name.type.interface.js
      - include: '#flowtype'
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#flowtype-method'
          - include: '#class-content'
      - match: \s*(\.)
        captures:
          1: { name: keyword.operator.accessor.js }
      - include: '#core'
  flowtype-keywords:
    patterns:
      - include: '#flowtype-declare'
      - include: '#flowtype-type-aliases'
      - include: '#flowtype-interface'
      - include: '#flowtype-trait'
      - include: '#flowtype-struct'
      - include: '#flowtype-module'
      - include: '#flowtype-namespace'
      - include: '#flowtype-object'
      - include: '#flowtype-given'
      - include: '#flowtype-extension'
      - include: '#enum-declaration'
  flowtype-method:
    applyEndPatternLast: 1
    begin: (?<!:)\s*+(?=(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?(\())
    comment:
      'trap methods without a name  e.g.   <Key, Value>(): Map<Key, Value>'
    end: \s*(?=.)
    beginCaptures:
      1: { name: storage.modifier.js }
      2: { name: storage.type.js }
      3: { name: keyword.generator.asterisk.js }
    patterns:
      - include: '#flowtype'
  flowtype-module:
    begin: (?<!\.)\s*+\b(module)(\s+|$)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: keyword.other.module.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#round-brackets'
      - match: \s*+\b((ext)|(impl)|(only))\b\s*+
        captures:
          1: { name: meta.class.extends.js }
          2: { name: storage.type.extends.js }
          3: { name: storage.type.implements.js }
          4: { name: keyword.operator.expression.only.js }
      - comment: look for interface names but don't assume uppercase start char
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: entity.name.type.module.js
      - include: '#flowtype'
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#core'
      - match: \s*(\.)
        captures:
          1: { name: keyword.operator.accessor.js }
      - include: '#core'
  flowtype-namespace:
    begin: (?<!\.)\s*+\b(nspace)(\s+|$)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: keyword.other.namespace.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#round-brackets'
      - match: \s*+\b((ext)|(impl)|(only))\b\s*+
        captures:
          1: { name: meta.class.extends.js }
          2: { name: storage.type.extends.js }
          3: { name: storage.type.implements.js }
          4: { name: keyword.operator.expression.only.js }
      - comment: look for interface names but don't assume uppercase start char
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: entity.name.type.namespace.js
      - include: '#flowtype'
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#core'
      - match: \s*(\.)
        captures:
          1: { name: keyword.operator.accessor.js }
      - include: '#core'
  flowtype-object:
    begin: (?<!\.)\s*+\b(object|record)(\s+|$)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: keyword.other.object.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#round-brackets'
      - match: \s*+\b((ext)|(impl)|(only))\b\s*+
        captures:
          1: { name: meta.class.extends.js }
          2: { name: storage.type.extends.js }
          3: { name: storage.type.implements.js }
          4: { name: keyword.operator.expression.only.js }
      - comment: look for interface names but don't assume uppercase start char
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: entity.name.type.object.js
      - include: '#flowtype'
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#flowtype-method'
          - include: '#class-content'
      - match: \s*(\.)
        captures:
          1: { name: keyword.operator.accessor.js }
  flowtype-object-property:
    patterns:
      - comment: Only these props syntax {| |}
        match: ((\|)(?={|))|(\s*(\|)(?=}))
        captures:
          1: { name: keyword.operator.only.flowtype }
          4: { name: keyword.operator.only.flowtype }
      - include: '#method'
      - include: '#comments'
      - include: '#flowtype-variable'
  flowtype-parse-array:
    begin: (?<!=|[$_A-Za-z\d])\s*+(#?\[)
    comment: 'arrays such as [name: string, dob: Date]'
    end: \s*(\])
    beginCaptures:
      1: { name: meta.brace.square.open.flowtype }
    endCaptures:
      1: { name: meta.brace.square.end.flowtype }
    patterns:
      - applyEndPatternLast: 1
        begin: \s*(?=[_$[:alpha:]][_$[:alnum:]]*\s*[=:])
        comment: destructring in arrays requires vars parse before types
        end: (?=.)
        patterns:
          - include: '#flowtype-variable'
          - include: '#flowtype-parse-types'
      - include: '#flowtype-parse-types'
      - include: '#flowtype-variable'
  flowtype-parse-objects:
    applyEndPatternLast: 1
    begin: (?<=:|\||&|\?|=>|<|\()\s*+(#?{)
    comment: 'object literal flowtype  preceded by either => : | & ? symbols'
    end: \s*(\})
    name: meta.object.flowtype
    beginCaptures:
      1: { name: meta.brace.curly.open.flowtype }
    endCaptures:
      1: { name: meta.brace.curly.close.flowtype }
    patterns:
      - include: '#flowtype-object-property'
  flowtype-parse-types:
    patterns:
      - include: '#operator'
      - match: (?<!\.)\s*+\b(typeof|nameof|infer|keyof|extends)\b\s*+
        captures:
          1: { name: keyword.operator.$1.flowtype }
      - begin: (?<!\.)\s*+\b(for\s*all)\b\s*
        end: ^\s*|\s*(?=;|/[/*]|$)
        beginCaptures:
          1: { name: keyword.operator.forall.js }
        patterns:
          - begin: (?<!\.)\s*+\b(where)\b
            end: ^\s*|\s*(?=;|/[/*]|$)
            beginCaptures:
              1: { name: keyword.operator.forall.js }
            patterns:
              - include: '#comments'
              - include: '#core'
          - match: (?<!\.)\s*+\b(va[rl]|const|con|let)\b\s*+
            name: storage.type.js
          - begin: (?<!\.)\s*+\b(as)\b
            end: (?=$|;|/[/*]|\s*where)
            beginCaptures:
              1: { name: keyword.operator.forall.js }
            patterns:
              - include: '#flowtype-parse-types'
      - comment: Immutable modifier
        match: \s*#(?![(\[{])\s*
        name: keyword.operator.private.js
      - begin: (?![!=]==?|=<|=[:!]=)(?==>|=|{)\s*
        comment: There is no = in flowtype
        end: $
        patterns:
          - include: '#core'
      - include: '#number'
      - include: '#string'
      - include: '#language-constant'
      - include: '#regexp'
      - include: '#multiline-regexp'
      - match: (?<==>)\*
        name: keyword.generator.asterisk.js
      - include: '#keywords'
      - include: '#modifiers'
      - begin: (?<=[>_\\\p{L}\p{M}\p{N}])\s+(?=\b(?:of|in)\b)
        comment: 'sometypename of|in '
        end: >-
          \s*(?=,|;|\)|}|\]|\*/|\b(?:if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|enum)\b|\b(async|await)\b\s*+(?!=|:)|type\s+[$\w]+|declare\s+[$\w]+|interface\s+[$\w]+)
        patterns:
          - include: '#core'
      - comment: Maybe types
        match: \s*+(\?)
        captures:
          1: { name: keyword.operator.maybe.flowtype }
      - comment: primitive flowtypes
        match: >-
          (?i)(?!^)\s*+\b((?>boolean|bool|mixed|string|number|str|num|bigint|s?byte|u?short|u?inte?|u?long|u?cent|[ci]?half|[ci]?float|[ci]?double|[ci]?decimal|ratio|real|imag|complex|symbol|sym|regexp?|nu?int|sint|rune|nat|frac|char|re|rat))\b
        captures:
          1: { name: support.type.builtin.primitive.flowtype }
      - comment: primitive flowtypes
        match: >-
          (?i)(?!^)\s*+\b((?>this|any|void|unknown|never|empty|object|list|dict|set|map|array|arr|object|obj|stack|seq|tuple|record|gene?|unit|buffer|buff?))\b
        captures:
          1: { name: support.type.builtin.flowtype }
      - comment: Built-in Class Types
        match: >-
          (?!^)\s*+\b((?>WeakSet|WeakMap|URIError|Uint8ClampedArray|Uint8Array|Uint32Array|Uint16Array|TypeError|TypedArray|SyntaxError|Symbol|String|SIMD.Uint8x16|SIMD.Uint32x4|SIMD.Uint16x8|SIMD.Int8x16|SIMD.Int32x4|SIMD.Int16x8|SIMD.Float64x2|SIMD.Float32x4|SIMD.Bool8x16|SIMD.Bool64x2|SIMD.Bool32x4|SIMD.Bool16x8|SIMD|SharedArrayBuffer|Set|RegExp|Reflect|ReferenceError|RangeError|Proxy|Promise|Object|Number|NaN|Math|Map|JSON|Intl.NumberFormat|Intl.DateTimeFormat|Intl.Collator|Intl|InternalError|Int8Array|Int32Array|Int16Array|Infinity|GeneratorFunction|Generator|Function|Float64Array|Float32Array|EvalError|Error|Date|DataView|Boolean|Atomics|ArrayBuffer|Array))\b
        captures:
          1: { name: support.type.builtin.class.flowtype }
      - match: >-
          \s*+\b((SIMD)((\.)(Uint8x16|Uint32x4|Uint16x8|Int8x16|Int32x4|Int16x8|Float64x2|Float32x4|Bool8x16|Bool64x2|Bool32x4|Bool16x8))?)\b
        captures:
          2: { name: support.type.builtin.class.flowtype }
          4: { name: keyword.operator.accessor.js }
          5: { name: support.type.builtin.class.flowtype }
      - match: \s*+\b((Intl)((\.)(NumberFormat|DateTimeFormat|Collator))?)\b
        captures:
          2: { name: support.type.builtin.class.flowtype }
          4: { name: keyword.operator.accessor.js }
          5: { name: support.type.builtin.class.flowtype }
      - comment: custom Class Types e.g. Abc avoid Abc(
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        captures:
          1: { name: support.type.class.flowtype }
      - comment: custom primitive/var Types e.g. abc avoid abc(
        match: >-
          (?!\s*\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|module|namespace|struct|type|declare|interface|enum|extend|trait|object|record)\b)(?!^)\s*(?<=\s|:|&|\||<)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        captures:
          2: { name: support.type.primitive.flowtype }
      - comment: symmetric difference of types &
        match: \s*+(\^)
        captures:
          1: { name: keyword.operator.bitwise.flowtype }
      - comment: complement of types ~
        match: \s*+(\~)
        captures:
          1: { name: keyword.operator.logical.flowtype }
      - comment: Type Unions |
        match: \s*+(\|)(?<!{\|)(?!}|>)
        captures:
          1: { name: keyword.operator.union.flowtype }
      - comment: intersection of types &
        match: \s*+(\&)
        captures:
          1: { name: keyword.operator.intersection.flowtype }
      - comment: as per React declares in flowtype github
        match: \s*+(\*)(?!/([^\*]|$))
        captures:
          1: { name: keyword.operator.existential.flowtype }
      - comment: 'types of type marker e.g. <T: number | string>'
        match: \s*+(:)((?=::)|(?!:))
        name: punctuation.type.flowtype
        captures:
          1: { name: support.type.builtin.primitive.flowtype }
      - comment: call back with a form  ) => type
        match: (?<=\))\s*+(=>)
        captures:
          1: { name: storage.type.function.arrow.js }
      - include: '#flowtype-polymorphs'
      - include: '#flowtype-bracketed-parameters'
      - include: '#flowtype-parse-objects'
      - include: '#flowtype-parse-array'
      - include: '#comments'
  flowtype-polymorphs:
    comment:
      Support Bounded Polymorphism
      http://flowtype.org/blog/2015/03/12/Bounded-Polymorphism.html
    patterns:
      - begin: \s*+\b((?>Array|Class|Map|Promise|Set|WeakMap|WeakSet))\s*+(<)
        comment: Built-in Class Types with elements of type <T>
        end: \s*(>)
        beginCaptures:
          1: { name: support.type.builtin.class.flowtype }
          2: { name: punctuation.flowtype }
        endCaptures:
          1: { name: punctuation.flowtype }
        patterns:
          - include: '#comma'
          - match: \s*+(\+|-)
            captures:
              1: { name: support.type.variant.flowtype }
          - include: '#flowtype-parse-types'
      - begin: \s*+(<)
        comment: just the polymorph bit like this <K,V>(arg,arg)
        end: \s*(>)
        beginCaptures:
          1: { name: punctuation.flowtype }
        endCaptures:
          1: { name: punctuation.flowtype }
        patterns:
          - include: '#comma'
          - match: \s*+(\+|-)
            captures:
              1: { name: support.type.variant.flowtype }
          - include: '#flowtype-parse-types'
  flowtype-predicate:
    applyEndPatternLast: 1
    begin: \s*+(?<=\s)(%checks)\b
    comment: flow predicate checks
    end: (?=.)
    beginCaptures:
      1: { name: entity.name.function.predicate.flowtype }
    patterns:
      - include: '#round-brackets'
  flowtype-return:
    patterns:
      - applyEndPatternLast: 1
        begin: (?<=\))\s*+(:)((?=::)|(?!:))
        comment:
          maybe an issue if a object literal is returned and the start of func
          block isn't on same line!
        end: (?=.)
        beginCaptures:
          1: { name: punctuation.type.flowtype }
        patterns:
          - include: '#flowtype-predicate'
          - include: '#flowtype-parse-types'
      - include: '#flowtype-predicate'
  flowtype-struct:
    begin: (?<!\.)\s*+\b(struct)(\s+|$)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: keyword.other.struct.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#round-brackets'
      - match: \s*+\b((ext)|(impl)|(only))\b\s*+
        captures:
          1: { name: meta.class.extends.js }
          2: { name: storage.type.extends.js }
          3: { name: storage.type.implements.js }
          4: { name: keyword.operator.expression.only.js }
      - comment: look for interface names but don't assume uppercase start char
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: entity.name.type.struct.js
      - include: '#flowtype'
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#flowtype-method'
          - include: '#class-content'
      - match: \s*(\.)
        captures:
          1: { name: keyword.operator.accessor.js }
      - include: '#core'
  flowtype-trait:
    begin: (?<!\.)\s*+\b(trait)(\s+|$)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: keyword.other.trait.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#round-brackets'
      - match: \s*+\b((ext)|(impl)|(only))\b\s*+
        captures:
          1: { name: meta.class.extends.js }
          2: { name: storage.type.extends.js }
          3: { name: storage.type.implements.js }
          4: { name: keyword.operator.expression.only.js }
      - comment: look for interface names but don't assume uppercase start char
        match: \s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: entity.name.type.trait.js
      - include: '#flowtype'
      - begin: \s*+({)
        contentName: meta.class.body.js
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.section.class.begin.js }
        endCaptures:
          1: { name: punctuation.section.class.end.js }
        patterns:
          - include: '#class-content'
          - include: '#flowtype-method'
      - match: \s*(\.)
        captures:
          1: { name: keyword.operator.accessor.js }
      - include: '#core'
  flowtype-trap:
    comment:
      traps flowtype vars that aren't caught normally - e.g. multi-line arrow
      funcs
    patterns:
      - applyEndPatternLast: 1
        begin: (?<=\))\s*(?=:)
        end: (?=.)
        patterns:
          - include: '#flowtype-return'
      - applyEndPatternLast: 1
        begin: \s*:(?!:)
        end: (?=.)
        patterns:
          - include: '#flowtype-parse-types'
  flowtype-type-aliases:
    patterns:
      - applyEndPatternLast: 1
        begin: (?<=^|;|\S)\s*+\b(opaque)?\s*+\b(type)\b\s+(?!(instanceof|in)\b)(?=[$_A-Za-z{\[])
        comment:
          type aliases for export but avoid type instaceof or type in operators
        end: (?=.)
        beginCaptures:
          1: { name: keyword.other.typedef.flowtype }
          2: { name: keyword.other.typedef.flowtype }
        patterns:
          - begin: \s*+({)
            end: \s*(})
            name: meta.object.flowtype
            captures:
              1: { name: meta.brace.curly.js }
            patterns:
              - include: '#flowtype-object-property'
          - include: '#flowtype'
          - include: '#flowtype-parse-types'
          - include: '#comments'
          - include: '#flowtype-function-name'
          - match: \s*+(=)(?!=|>)
            captures:
              1: { name: keyword.operator.assignment.js }
  flowtype-variable:
    patterns:
      - comment: 'e.g. let a: ()=>null  =  function() {return null}'
        match: >-
          (?<!\.)\s*+(\#?)((?:[_\\\p{L}\p{Nl}])(?:[_\\\p{L}\p{M}\p{N}])*+)\s*+(\??)\s*+(?=:\s*([_\\\p{L}\p{Nl}](?:[.\\_\p{L}\p{M}\p{N}])*+)?\s*(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*(\b(?:[fF]unc?|[fF]n)\b|(\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))\s*=>|\(\s*$))
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: storage.type.function.js }
          3: { name: keyword.operator.optional.parameter.flowtype }
      - comment:
          'name of variable spread var with optional ? and optional flowtype :'
        match: ((?<!\.)\.\.\.)?\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(\??)\s*+(?!::)(?=:|=>)
        captures:
          1: { name: keyword.operator.spread.js }
          2: { name: keyword.operator.private.js }
          3: { name: variable.other.readwrite.js }
          4: { name: keyword.operator.optional.parameter.flowtype }
      - include: '#flowtype-vars-and-props'
  flowtype-vars-and-props:
    patterns:
      - comment: 'flowtype optional arg/parameter e.g. protocol? : string'
        match: \s*+(\?)
        captures:
          1: { name: punctuation.type.flowtype }
      - comment: Type Unions |
        match: \s*+(\|)(?<!{\|)(?!}|>)
        captures:
          1: { name: keyword.operator.union.flowtype }
      - comment: intersection of types &
        match: \s*+(\&)
        captures:
          1: { name: keyword.operator.intersection.flowtype }
      - applyEndPatternLast: 1
        begin: \s*+(:)((?=::)|(?!:))
        comment: 'typed entity :'
        end: (?=.)
        beginCaptures:
          1: { name: punctuation.type.flowtype }
        patterns:
          - include: '#flowtype-parse-types'
      - include: '#comma'
      - comment: An Iterator prefix?
        match: \s*+(@@)
      - applyEndPatternLast: 1
        begin: \s*+(=>)
        end: (?=.)
        beginCaptures:
          1: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype-parse-types'
      - begin: (?<!let|const|con|va[lr])(?<=[_\\p{L}\p{M}\p{N}])\s+(?=\b(?:of|in)\b)
        comment: 'varname of|in '
        end: >-
          \s*(?=,|;|\)|}|\]|\*/|\b(?:if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|enum)\b|\b(async|await)\b\s*+(?!=|:)|type\s+[$\w]+|declare\s+[$\w]+|interface\s+[$\w]+)
        patterns:
          - include: '#core'
      - begin: (?<!:)\s*+(?=((?:(\#?)[_\\p{L}\p{Nl}])(?:[_\\p{L}\p{M}\p{N}])*+)?\s*=)(?!=>|==)
        comment: 'assignment var = or = '
        end: >-
          \s*(?=,|;|\)|}|\]|\*/|\b(?:if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|enum)\b|\b(async|await)\b\s*+(?!=|:)|type\s+[$\w]+|declare\s+[$\w]+|interface\s+[$\w]+)
        patterns:
          - include: '#core'
      - include: '#flowtype-bracketed-parameters'
      - include: '#flowtype-parse-array'
      - include: '#core'
  for:
    patterns:
      - begin: (?<!\.)\s*+\b(for|while|until)\b\s*(await)?\b
        end: \s*(?<=[})])
        name: meta.for.js
        beginCaptures:
          1: { name: keyword.control.loop.js }
          2: { name: keyword.control.flow.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#curly-brackets'
          - include: '#round-brackets'
          - include: $self
  function:
    patterns:
      - applyEndPatternLast: 1
        begin: >-
          \s*+(?:\b(async)\b\s+)?\s*+(?:(?<=\.\.\.)|(?<!\.))(\b(?:def|func?|fn|proc|macro|sub|function)\b)\s*+(\*?)\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*|'.*?'|".*?"|\[.*?\])?(?=\s*+(\(|<))
        comment: e.g. function play<T>(arg1, arg2) { }
        end: >-
          \s*(=(?!=|>)|{)|\s*(?<=;|})|\s*(?=,|;|:|{|\*/|\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b|\)|})
        beginCaptures:
          1: { name: storage.type.js }
          2: { name: storage.type.function.js }
          3: { name: keyword.generator.asterisk.js }
          4: { patterns: [{ include: '#function-name' }] }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#core'
          - include: '#curly-brackets'
      - applyEndPatternLast: 1
        begin: >-
          \s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*|'.*?'|".*?"|\[.*?\])\s*+(=)\s*+(?:(async)\s+)?\s*+((?<!\.)\b(?:def|func?|fn|proc|macro|sub|function)\b)\s*+(\*?)\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*|'.*?'|".*?"|\[.*?\])?(?=\s*+(\(|<))
        comment: e.g. play = function(arg1, arg2) { }
        end: >-
          \s*(=(?!=|>)|{)|\s*(?<=;|})|\s*(?=,|;|:|{|\*/|\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b|\)|})
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.assignment.js }
          4: { name: storage.type.js }
          5: { name: storage.type.function.js }
          6: { name: keyword.generator.asterisk.js }
          7: { patterns: [{ include: '#function-name' }] }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#core'
          - include: '#curly-brackets'
      - applyEndPatternLast: 1
        begin: >-
          \s*+(\#?)((?:[_\p{Lu}\p{Nl}])(?:[_\\p{L}\p{M}\p{N}])*+)(?:(\?\.)|(\.))(proto|prototype)(?:(\?\.)|(\.))(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*|'.*?'|".*?"|\[.*?\])\s*+(=)\s*+(?:(async)\s+)?\s*+((?<!\.)\b(?:def|func?|fn|proc|macro|sub|function)\b)\s*+(\*?)\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*|'.*?'|".*?"|\[.*?\])?(?=\s*+(\(|<))
        comment: e.g. Sound.prototype.play = function(arg1, arg2) { }
        end: >-
          \s*(=(?!=|>)|{)|\s*(?<=;|})|\s*(?=,|;|:|{|\*/|\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b|\)|})
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { name: entity.name.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: variable.language.prototype.js }
          6: { name: keyword.operator.existential.js }
          7: { name: keyword.operator.accessor.js }
          8: { name: keyword.operator.private.js }
          9: { patterns: [{ include: '#function-name' }] }
          10: { name: keyword.operator.assignment.js }
          11: { name: storage.type.js }
          12: { name: storage.type.function.js }
          13: { name: keyword.generator.asterisk.js }
          14: { patterns: [{ include: '#function-name' }] }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#core'
          - include: '#curly-brackets'
      - applyEndPatternLast: 1
        begin: >-
          \s*+(\#?)((?:[_\p{Lu}\p{Nl}])(?:[_\\p{L}\p{M}\p{N}])*+)(?:(\?\.)|(\.))(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*|'.*?'|".*?"|\[.*?\])\s*+(=)\s*+(?:(async)\s+)?\s*+((?<!\.)\b(?:def|func?|fn|proc|macro|sub|function)\b)\s*+(\*?)\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*|'.*?'|".*?"|\[.*?\])?(?=\s*+(\(|<))
        comment: e.g. Sound.play = function(arg1, arg2) { }
        end: >-
          \s*(=(?!=|>)|{)|\s*(?<=;|})|\s*(?=,|;|:|{|\*/|\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b|\)|})
        name: meta.function.static.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { name: entity.name.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.private.js }
          6: { patterns: [{ include: '#function-name' }] }
          7: { name: keyword.operator.assignment.js }
          8: { name: storage.type.js }
          9: { name: storage.type.function.js }
          10: { name: keyword.generator.asterisk.js }
          11: { patterns: [{ include: '#function-name' }] }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#core'
          - include: '#curly-brackets'
  function-call:
    patterns:
      - include: '#comments'
      - comment:
          A new expression with no type params or arguments, like new Foo()
        match: >-
          (?<!\.)\s*+(\bnew\b)\s*+((\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?:(\?\.)|(~\.|::)|(!\.)|(::|\.))?(\()\s*+(\)))
        name: meta.new-class.without-arguments.js
        captures:
          1: { name: keyword.operator.new.js }
          2: { name: meta.function-call.without-arguments.js }
          3: { name: keyword.operator.private.js }
          4: { name: entity.name.type.instance.js }
          5: { name: keyword.operator.existential.js }
          6: { name: keyword.operator.cascade.js }
          7: { name: keyword.operator.assertion.js }
          8: { name: keyword.operator.accessor.js }
          9: { name: meta.brace.round.js }
          10: { name: meta.brace.round.js }
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+(\bnew\b)\s*+((\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?:(\?\.)|(~\.|::)|(!\.)|(::|\.))?\s*+(?=(<(?:(?>[^<>]+)|\g<-1>)*>)\s*+(\()\s*+(\))))
        comment:
          A new expression with type params and no arguments, like new
          Foo<string>()
        end: (?=.)
        name: meta.new-class.without-arguments.js
        beginCaptures:
          1: { name: keyword.operator.new.js }
          2: { name: meta.function-call.without-arguments.js }
          3: { name: keyword.operator.private.js }
          4: { name: entity.name.type.instance.js }
          5: { name: keyword.operator.existential.js }
          6: { name: keyword.operator.cascade.js }
          7: { name: keyword.operator.assertion.js }
          8: { name: keyword.operator.accessor.js }
        patterns:
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+(\bnew\b)\s*+((\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?:(\?\.)|(~\.|::)|(!\.)|(::|\.))?\s*+(?=(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+\())
        comment:
          A new expression with arguments and maybe type params, like new
          Foo<string>(123)
        end: (?=.)
        name: meta.new-class.with-arguments.js
        beginCaptures:
          1: { name: keyword.operator.new.js }
          2: { name: meta.function-call.with-arguments.js }
          3: { name: keyword.operator.private.js }
          4: { name: entity.name.type.instance.js }
          5: { name: keyword.operator.existential.js }
          6: { name: keyword.operator.cascade.js }
          7: { name: keyword.operator.assertion.js }
          8: { name: keyword.operator.accessor.js }
        patterns:
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - include: '#operators'
      - comment: A call expression with no type params or arguments, like foo()
        match: (?<!\.)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?:(\?\.)|(~\.|::)|(!\.)|(::|\.))?(\()\s*+(\))
        name: meta.function-call.without-arguments.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.cascade.js }
          5: { name: keyword.operator.assertion.js }
          6: { name: keyword.operator.accessor.js }
          7: { name: meta.brace.round.js }
          8: { name: meta.brace.round.js }
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?:(\?\.)|(~\.|::)|(!\.)|(::|\.))?\s*+(?=(<(?:(?>[^<>]+)|\g<-1>)*>)\s*+(\()\s*+(\)))
        comment:
          A call expression with type params and no arguments, like
          foo<string>()
        end: (?=.)
        name: meta.function-call.without-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.cascade.js }
          5: { name: keyword.operator.assertion.js }
          6: { name: keyword.operator.accessor.js }
        patterns:
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+((\bnew\b)*)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)(?=\s*(\[(?:(?>[^\[\]]+)|\g<-1>)*\])\s*+(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+\(\s*+\))
        comment: maybe in array form e.g. foo[bar]() or foo[bar]<string>()
        end: (?=.)
        name: meta.function-call.without-arguments.js
        beginCaptures:
          2: { name: keyword.operator.new.js }
          3: { name: keyword.operator.private.js }
          4: { name: variable.other.object.js }
        patterns:
          - include: '#square-brackets'
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?:(\?\.)|(~\.|::)|(!\.)|(::|\.))?\s*+(?=(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+\()
        comment:
          A call expression with arguments and maybe type params, like foo(123)
          or foo<string>(123)
        end: (?=.)
        name: meta.function-call.with-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.cascade.js }
          5: { name: keyword.operator.assertion.js }
          6: { name: keyword.operator.accessor.js }
        patterns:
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+((\bnew\b)*)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?=(\[(?:(?>[^\[\]]+)|\g<-1>)*\])\s*+(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+\()
        comment: maybe in array form e.g. foo[bar](123)
        end: (?=.)
        name: meta.function-call.with-arguments.js
        beginCaptures:
          2: { name: keyword.operator.new.js }
          3: { name: keyword.operator.private.js }
          4: { name: variable.other.object.js }
        patterns:
          - include: '#square-brackets'
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - include: '#keywords'
  function-labels:
    patterns:
      - begin: >-
          (?<=^|{|,)\s*+([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(:)\s*+(?:(async)\s+)?\s*+((?<!\.)\b(?:def|func?|fn|proc|macro|sub|function)\b)\s*+(?:(\*)\s*)?(?=\s*(\(|<))
        comment: 'e.g. play: function(arg1, arg2) { }'
        end: \s*(=)|\s*(?<=})
        name: meta.function.json.js
        beginCaptures:
          1: { patterns: [{ include: '#function-name' }] }
          2: { name: punctuation.separator.key-value.js }
          3: { name: storage.type.js }
          4:
            {
              name: storage.type.function.js,
              patterns: [{ include: '#string-content' }],
            }
          5: { name: keyword.generator.asterisk.js }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#core'
          - include: '#curly-brackets'
      - begin: >-
          (?<=^|{|,)\s*+(('|")([^"']*)(\k<-3>))\s*+(:)\s*+(async)?\s*+((?<!\.)\b(?:def|func?|fn|proc|macro|sub|function)\b)\s*(\*\s*)?(?=\s*(\(|<))
        comment: "e.g. 'play': function(arg1, arg2) { }"
        end: \s*(=)|\s*(?<=})
        name: meta.function.json.js
        beginCaptures:
          1: { name: string.quoted.js }
          2: { name: punctuation.definition.string.begin.js }
          3: { patterns: [{ include: '#function-name' }] }
          4: { name: punctuation.definition.string.end.js }
          5: { name: punctuation.separator.key-value.js }
          6: { name: storage.type.js }
          7: { name: storage.type.function.js }
          8: { name: keyword.generator.asterisk.js }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#core'
          - include: '#curly-brackets'
  function-method:
    patterns:
      - include: '#function'
      - match: (?<!\.)\s*(#)?([_\\p{L}\p{Nl}][_\\p{L}\p{M}\p{N}]*+)\s*(?:(\?\.)|(!\.)|(~\.)|(\.))\s*(<.*?>)?\s*(\(.*\))(.*)
        name: meta.function-call.without-arguments.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.assertion.js }
          6: { name: keyword.operator.accessor.js }
          7: { patterns: [{ include: '#flowtype-polymorphs' }] }
          8: { name: meta.brace.round.js }
          9: { patterns: [{ include: '#core' }] }
      - begin: (?<!\.)\s*(#)?([_\\p{L}\p{Nl}][_\\p{L}\p{M}\p{N}]*+)\s*(?:(\?\.)|(!\.)|(~\.)|(\.))\s*(<.*?>)?\s*(\()
        end: (\))(.*)
        name: meta.function-call.with-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#function-name' }] }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.assertion.js }
          6: { name: keyword.operator.accessor.js }
          7: { patterns: [{ include: '#flowtype-polymorphs' }] }
          8: { name: meta.brace.round.js }
        endCaptures:
          1: { name: meta.brace.round.js }
          2: { patterns: [{ include: '#core' }] }
        patterns:
          - include: '#core'
      - match: (?<=\.)\s*(#)?([_\\p{L}\p{Nl}][_\\p{L}\p{M}\p{N}]*+)\s*(?:(\?\.)|(!\.)|(~\.)|(\.))\s*(<.*?>)?\s*(\(.*\))(.*)
        name: meta.method-call.without-arguments.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#method-name' }] }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.assertion.js }
          6: { name: keyword.operator.accessor.js }
          7: { patterns: [{ include: '#flowtype-polymorphs' }] }
          8: { name: meta.brace.round.js }
          9: { patterns: [{ include: '#core' }] }
      - begin: (?<=\.)\s*(#)?([_\\p{L}\p{Nl}][_\\p{L}\p{M}\p{N}]*+)\s*(?:(\?\.)|(!\.)|(~\.)|(\.))\s*(<.*?>)?\s*(\()
        end: (\))(.*)
        name: meta.method-call.with-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#method-name' }] }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.assertion.js }
          6: { name: keyword.operator.accessor.js }
          7: { patterns: [{ include: '#flowtype-polymorphs' }] }
          8: { name: meta.brace.round.js }
        endCaptures:
          1: { name: meta.brace.round.js }
          2: { patterns: [{ include: '#core' }] }
        patterns:
          - include: '#core'
  function-name:
    patterns:
      - include: '#support-functions'
      - comment: primitive flowtypes
        match: >-
          (?i)\b((?>boolean|bool|mixed|string|number|str|num|bigint|s?byte|u?short|u?inte?|u?long|u?cent|[ci]?half|[ci]?float|[ci]?double|[ci]?decimal|ratio|real|imag|complex|symbol|sym|regexp?|nu?int|sint|rune|nat|frac|char|re|rat))\b
        name: support.type.builtin.primitive.flowtype
      - comment: primitive flowtypes
        match: >-
          (?i)\b((?>this|any|void|unknown|never|empty|object|list|dict|set|map|array|arr|object|obj|stack|seq|tuple|record|gene?|unit|buffer|buff?))\b
        name: support.type.builtin.flowtype
      - match: >-
          \b(WeakSet|WeakMap|URIError|Uint8ClampedArray|Uint8Array|Uint32Array|Uint16Array|TypeError|TypedArray|SyntaxError|Symbol|String|SIMD.Uint8x16|SIMD.Uint32x4|SIMD.Uint16x8|SIMD.Int8x16|SIMD.Int32x4|SIMD.Int16x8|SIMD.Float64x2|SIMD.Float32x4|SIMD.Bool8x16|SIMD.Bool64x2|SIMD.Bool32x4|SIMD.Bool16x8|SIMD|SharedArrayBuffer|Set|RegExp|Reflect|ReferenceError|RangeError|Proxy|Promise|Object|Number|NaN|Math|Map|JSON|Intl.NumberFormat|Intl.DateTimeFormat|Intl.Collator|Intl|InternalError|Int8Array|Int32Array|Int16Array|Infinity|GeneratorFunction|Generator|Function|Float64Array|Float32Array|EvalError|Error|Date|DataView|Boolean|Atomics|ArrayBuffer|Array)\b
        name: support.type.builtin.class.flowtype
      - match: '[_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\\\p{L}\p{N}\p{M}]*'
        name: support.type.class.flowtype
      - match: '[_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*'
        name: entity.name.function.js
  graphql:
    patterns:
      - include: '#graphql-fragment-definition'
      - include: '#graphql-type-interface'
      - include: '#graphql-enum'
      - include: '#graphql-scalar'
      - include: '#graphql-union'
      - include: '#graphql-schema'
      - include: '#graphql-operation-def'
      - include: '#graphql-comment'
      - include: '#quasi-embedded'
  graphql-arguments:
    begin: \s*(\()
    end: \s*(\))
    name: meta.arguments.graphql
    beginCaptures:
      1: { name: meta.brace.round.directive.graphql }
    endCaptures:
      1: { name: meta.brace.round.directive.graphql }
    patterns:
      - include: '#graphql-comment'
      - begin: \s*([_A-Za-z][_\dA-Za-z]*)(?:\s*(:))?
        end: (?=\s*(?:(?:([_A-Za-z][_\dA-Za-z]*)\s*(:))|\)))|\s*(,)
        beginCaptures:
          1: { name: variable.arguments.graphql }
          2: { name: punctuation.colon.graphql }
        endCaptures:
          3: { name: punctuation.comma.graphql }
        patterns:
          - include: '#graphql-value'
          - include: '#graphql-comment'
          - include: '#graphql-skip-newlines'
      - include: '#quasi-embedded'
  graphql-boolean-value:
    match: \s*\b(true|false)\b
    captures:
      1: { name: constant.boolean.graphql }
  graphql-colon:
    match: \s*(:)
    captures:
      1: { name: punctuation.colon.graphql }
  graphql-comma:
    match: \s*(,)
    captures:
      1: { name: punctuation.comma.graphql }
  graphql-comment:
    patterns:
      - begin: \s*+"""
        end: \s*"""
        name: comment.block.graphql.js
      - match: (\s*)((\#.*)|(".*"))
        name: comment.line.graphql.js
        captures:
          1: { name: punctuation.whitespace.comment.leading.graphql }
  graphql-directive:
    applyEndPatternLast: 1
    begin: \s*((@)\s*([_A-Za-z][_\dA-Za-z]*))
    end: (?=.)
    beginCaptures:
      1: { name: entity.name.function.directive.graphql }
    patterns:
      - include: '#graphql-arguments'
      - include: '#graphql-comment'
      - include: '#quasi-embedded'
      - include: '#graphql-skip-newlines'
  graphql-enum:
    begin: \s*+\b(enum)\b\s*([_A-Za-z][_\dA-Za-z]*)
    end: (?<=})
    name: meta.enum.graphql
    beginCaptures:
      1: { name: keyword.enum.graphql }
      2: { name: support.type.enum.graphql }
    patterns:
      - begin: \s*({)
        end: \s*(})
        name: meta.type.object.graphql
        beginCaptures:
          1: { name: punctuation.operation.graphql }
        endCaptures:
          1: { name: punctuation.operation.graphql }
        patterns:
          - include: '#graphql-object-type'
          - include: '#graphql-comment'
          - include: '#graphql-enum-value'
          - include: '#quasi-embedded'
  graphql-enum-value:
    match: \s*(?!=\b(true|false|null)\b)([_A-Za-z][_\dA-Za-z]*)
    name: constant.character.enum.graphql
  graphql-field:
    patterns:
      - match: \s*([_A-Za-z][_\dA-Za-z]*)\s*(:)
        captures:
          1: { name: string.unquoted.alias.graphql }
          2: { name: punctuation.colon.graphql }
      - match: \s*([_A-Za-z][_\dA-Za-z]*)
        captures:
          1: { name: variable.graphql }
      - include: '#graphql-arguments'
      - include: '#graphql-directive'
      - include: '#graphql-selection-set'
      - include: '#quasi-embedded'
      - include: '#graphql-skip-newlines'
  graphql-float-value:
    match: \s*((-)?(0|([1-9]\d*)(\.\d*)?((e|E)(\+|-)?\d*)?))
    captures:
      1: { name: constant.float.graphql }
  graphql-fragment-definition:
    begin: \s*(?:(\bfragment\b)\s*(?!\bon\b)([_A-Za-z][_\dA-Za-z]*)\s*(?:(\bon\b)\s*([_A-Za-z][_\dA-Za-z]*)))
    end: (?<=})
    name: meta.fragment.graphql
    captures:
      1: { name: keyword.fragment.graphql }
      2: { name: entity.name.fragment.graphql }
      3: { name: keyword.on.graphql }
      4: { name: support.type.graphql }
    patterns:
      - include: '#graphql-comment'
      - include: '#graphql-selection-set'
      - include: '#graphql-directive'
      - include: '#graphql-skip-newlines'
      - include: '#quasi-embedded'
  graphql-fragment-spread:
    applyEndPatternLast: 1
    begin: \s*(\.\.\.)\s*(?!\bon\b)([_A-Za-z][_\dA-Za-z]*)
    end: (?=.)
    captures:
      1: { name: keyword.operator.spread.graphql }
      2: { name: variable.fragment.graphql }
    patterns:
      - include: '#graphql-comment'
      - include: '#graphql-selection-set'
      - include: '#graphql-directive'
      - include: '#quasi-embedded'
      - include: '#graphql-skip-newlines'
  graphql-ignore-spaces:
    match: \s*
  graphql-inline-fragment:
    applyEndPatternLast: 1
    begin: \s*(\.\.\.)\s*(?:(\bon\b)\s*([_A-Za-z][_\dA-Za-z]*))?
    end: (?=.)
    captures:
      1: { name: keyword.operator.spread.graphql }
      2: { name: keyword.on.graphql }
      3: { name: support.type.graphql }
    patterns:
      - include: '#graphql-comment'
      - include: '#graphql-selection-set'
      - include: '#graphql-directive'
      - include: '#graphql-skip-newlines'
      - include: '#quasi-embedded'
  graphql-input-types:
    patterns:
      - include: '#graphql-scalar-type'
      - match: \s*([_A-Za-z][_\dA-Za-z]*)(?:\s*(!))?
        captures:
          1: { name: support.type.graphql }
          2: { name: keyword.operator.nulltype.graphql }
      - begin: \s*(\[)
        end: \s*(\])(?:\s*(!))?
        name: meta.type.list.graphql
        captures:
          1: { name: meta.brace.squart.graphql }
          2: { name: keyword.operator.nulltype.graphql }
        patterns:
          - include: '#graphql-input-types'
          - include: '#graphql-comment'
          - include: '#graphql-comma'
          - include: '#quasi-embedded'
  graphql-int-value:
    match: \s*((-)?(0|[1-9][\d]*))
    captures:
      1: { name: constant.int.graphql }
  graphql-list-value:
    patterns:
      - begin: \s*+(\[)
        end: \s*(\])
        name: meta.listvalues.graphql
        beginCaptures:
          1: { name: meta.brace.square.graphql }
        endCaptures:
          1: { name: meta.brace.square.graphql }
        patterns:
          - include: '#graphql-value'
  graphql-name:
    match: \s*([_A-Za-z][_\dA-Za-z]*)
    captures:
      1: { name: entity.name.function.graphql }
  graphql-object-field:
    match: \s*(([_A-Za-z][_\dA-Za-z]*))\s*(:)
    captures:
      1: { name: constant.object.key.graphql }
      2: { name: string.unquoted.graphql }
      3: { name: punctuation.graphql }
  graphql-object-value:
    patterns:
      - begin: \s*+({)
        end: \s*(})
        name: meta.objectvalues.graphql
        beginCaptures:
          1: { name: meta.brace.curly.graphql }
        endCaptures:
          1: { name: meta.brace.curly.graphql }
        patterns:
          - include: '#graphql-object-field'
          - include: '#graphql-value'
  graphql-operation-def:
    patterns:
      - include: '#graphql-query-mutation'
      - include: '#graphql-name'
      - include: '#graphql-variable-definitions'
      - include: '#graphql-directive'
      - include: '#graphql-selection-set'
  graphql-query-mutation:
    match: \s*\b(query|mutation)\b
    captures:
      1: { name: keyword.operation.graphql }
  graphql-scalar:
    match: \s*\b(scalar)\b\s*([_A-Za-z][_\dA-Za-z]*)
    captures:
      1: { name: keyword.scalar.graphql }
      2: { name: entity.scalar.graphql }
  graphql-scalar-type:
    match: \s*\b(Int|Float|String|Boolean|ID)\b(?:\s*(!))?
    captures:
      1: { name: support.type.builtin.graphql }
      2: { name: keyword.operator.nulltype.graphql }
  graphql-schema:
    begin: \s*\b(schema)\b
    end: (?<=})
    beginCaptures:
      1: { name: keyword.schema.graphql }
    patterns:
      - begin: \s*({)
        end: \s*(})
        beginCaptures:
          1: { name: punctuation.operation.graphql }
        endCaptures:
          1: { name: punctuation.operation.graphql }
        patterns:
          - begin: \s*([_A-Za-z][_\dA-Za-z]*)(?=\s*\(|:)
            end: (?=\s*(([_A-Za-z][_\dA-Za-z]*)\s*(\(|:)|(})))|\s*(,)
            beginCaptures:
              1: { name: variable.arguments.graphql }
            endCaptures:
              5: { name: punctuation.comma.graphql }
            patterns:
              - match: \s*([_A-Za-z][_\dA-Za-z]*)
                captures:
                  1: { name: support.type.graphql }
              - include: '#graphql-colon'
              - include: '#graphql-comment'
              - include: '#graphql-skip-newlines'
          - include: '#graphql-comment'
          - include: '#graphql-skip-newlines'
      - include: '#graphql-comment'
      - include: '#graphql-skip-newlines'
  graphql-selection-set:
    begin: \s*({)
    end: \s*(})
    name: meta.selectionset.graphql
    beginCaptures:
      1: { name: punctuation.operation.graphql }
    endCaptures:
      1: { name: punctuation.operation.graphql }
    patterns:
      - include: '#graphql-field'
      - include: '#graphql-fragment-spread'
      - include: '#graphql-inline-fragment'
      - include: '#graphql-comma'
      - include: '#graphql-comment'
      - include: '#quasi-embedded'
  graphql-skip-newlines:
    match: |
      \s*
  graphql-string-content:
    patterns:
      - match: \\[/'"\\nrtbf]
        name: constant.character.escape.graphql
      - match: \\u(\h{4})
        name: constant.character.escape.graphql
  graphql-string-value:
    begin: \s*+(("))
    contentName: string.quoted.double.graphql
    end: |-
      \s*+(?:(("))|(
      ))
    beginCaptures:
      1: { name: string.quoted.double.graphql }
      2: { name: punctuation.definition.string.begin.graphql }
    endCaptures:
      1: { name: string.quoted.double.graphql }
      2: { name: punctuation.definition.string.end.graphql }
      3: { name: invalid.illegal.newline.graphql }
    patterns:
      - include: '#graphql-string-content'
      - include: '#quasi-embedded'
  graphql-type-definition:
    begin: \s*([_A-Za-z][_\dA-Za-z]*)(?=\s*\(|:)
    comment: 'key (optionalArgs): Type'
    end: (?=\s*(([_A-Za-z][_\dA-Za-z]*)\s*(\(|:)|(})))|\s*(,)
    beginCaptures:
      1: { name: variable.graphql }
    endCaptures:
      5: { name: punctuation.comma.graphql }
    patterns:
      - include: '#graphql-comment'
      - include: '#graphql-variable-definitions'
      - include: '#graphql-type-object'
      - include: '#graphql-colon'
      - include: '#graphql-input-types'
      - include: '#quasi-embedded'
  graphql-type-interface:
    applyEndPatternLast: 1
    begin: \s*\b(?:(extends?)?\b\s*\b(type)|(interface)|(input))\b\s*([_A-Za-z][_\dA-Za-z]*)?
    end: (?=.)
    name: meta.type.interface.graphql
    beginCaptures:
      1: { name: keyword.type.graphql }
      2: { name: keyword.type.graphql }
      3: { name: keyword.interface.graphql }
      4: { name: keyword.input.graphql }
      5: { name: support.type.graphql }
    patterns:
      - match: \s*\b(implements)\b\s*([_A-Za-z][_\dA-Za-z]*)
        captures:
          1: { name: keyword.implements.graphql }
          2: { name: support.type.graphql }
      - include: '#graphql-comment'
      - include: '#graphql-type-object'
      - include: '#quasi-embedded'
      - include: '#graphql-ignore-spaces'
  graphql-type-object:
    begin: \s*({)
    end: \s*(})
    name: meta.type.object.graphql
    beginCaptures:
      1: { name: punctuation.operation.graphql }
    endCaptures:
      1: { name: punctuation.operation.graphql }
    patterns:
      - include: '#graphql-object-type'
      - include: '#graphql-comment'
      - include: '#graphql-type-definition'
      - include: '#quasi-embedded'
  graphql-union:
    applyEndPatternLast: 1
    begin: \s*\b(union)\b\s*([_A-Za-z][_\dA-Za-z]*)
    end: (?=.)
    captures:
      1: { name: keyword.union.graphql }
      2: { name: support.type.graphql }
    patterns:
      - applyEndPatternLast: 1
        begin: \s*(=(?!=|>))\s*([_A-Za-z][_\dA-Za-z]*)
        end: (?=.)
        captures:
          1: { name: punctuation.assignment.graphql }
          2: { name: support.type.graphql }
        patterns:
          - include: '#graphql-skip-newlines'
          - include: '#graphql-comment'
          - include: '#quasi-embedded'
          - match: \s*(\|)\s*([_A-Za-z][_\dA-Za-z]*)
            captures:
              1: { name: punctuation.or.graphql }
              2: { name: support.type.graphql }
      - include: '#graphql-skip-newlines'
      - include: '#graphql-comment'
      - include: '#quasi-embedded'
  graphql-union-mark:
    match: \s*(\|)
    captures:
      1: { name: punctuation.union.graphql }
  graphql-value:
    patterns:
      - include: '#graphql-variable-name'
      - include: '#graphql-float-value'
      - include: '#graphql-int-value'
      - include: '#graphql-string-value'
      - include: '#graphql-boolean-value'
      - include: '#graphql-enum-value'
      - include: '#graphql-list-value'
      - include: '#graphql-object-value'
      - include: '#graphql-comment'
      - include: '#quasi-embedded'
  graphql-variable-assignment:
    applyEndPatternLast: 1
    begin: \s(=)
    end: (?=.)
    beginCaptures:
      1: { name: punctuation.assignment.graphql }
    patterns:
      - include: '#graphql-value'
  graphql-variable-definition:
    begin: \s*(\$?[_A-Za-z][_\dA-Za-z]*)(?=\s*\(|:)
    comment: 'variable: type = value,.... which may be a list'
    end: (?=\s*((\$?[_A-Za-z][_\dA-Za-z]*)\s*(\(|:)|(}|\))))|\s*(,)
    name: meta.variables.graphql
    beginCaptures:
      1: { name: variable.graphql }
    endCaptures:
      5: { name: punctuation.comma.graphql }
    patterns:
      - include: '#graphql-comment'
      - include: '#graphql-colon'
      - include: '#graphql-input-types'
      - include: '#graphql-variable-assignment'
      - include: '#quasi-embedded'
      - include: '#graphql-skip-newlines'
  graphql-variable-definitions:
    begin: \s*(\()
    end: \s*(\))
    captures:
      1: { name: meta.brace.round.graphql }
    patterns:
      - include: '#graphql-comment'
      - include: '#graphql-variable-definition'
      - include: '#quasi-embedded'
  graphql-variable-name:
    match: \s*(\$[_A-Za-z][_\dA-Za-z]*)
    captures:
      1: { name: variable.graphql }
  heregexp:
    patterns:
      - include: '#regexp-patterns'
      - include: '#comments'
  html-template:
    begin: (?:(?:^|(?<=,|{))\s*\b((template))\b\s*(:)\s*(`))
    comment: 'Assume object properties of template: `some html` contain html'
    end: \s*(`)
    beginCaptures:
      1: { name: constant.other.object.key.js }
      2: { name: string.unquoted.js }
      3: { name: punctuation.separator.key-value.js }
      4: { name: punctuation.definition.quasi.begin.js }
    endCaptures:
      1: { name: punctuation.definition.quasi.end.js }
    patterns:
      - begin: (?<!\\)\${
        end: \s*}
        name: entity.quasi.element.js
        beginCaptures:
          0: { name: punctuation.quasi.element.begin.js }
        endCaptures:
          0: { name: punctuation.quasi.element.end.js }
        patterns:
          - include: '#core'
      - include: text.html.mustache
  if:
    patterns:
      - begin: (?<!\.)\s*+\b(if|els?if|ell?ess|unless|guard)\b\s*(await)?\b
        end: \s*(?<=[})])
        name: meta.if.js
        beginCaptures:
          1: { name: keyword.control.conditional.js }
          2: { name: keyword.control.flow.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#curly-brackets'
          - include: '#round-brackets'
          - include: $self
  ignore-long-lines:
    comment: so set at arbitary 1000 chars to avoid parsing minified files
    patterns:
      - match: ^.{1000,}
  implicit-call:
    patterns:
      - comment: Avoid all language keywords as much as possible
        match:
          (?x)(?<=\.)\s* ([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
          \s*(?=['"`(]|::|<[+|])
        captures:
          1: { patterns: [{ include: '#method-name' }] }
      - comment: Avoid all language keywords as much as possible
        match:
          (?x)\s* ([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*) \s*(?=['"`(]|::|<[+|])
        captures:
          1: { patterns: [{ include: '#function-name' }] }
  js-label:
    comment: 'jslabel: $|for|while|do'
    match: >-
      (?:^|(?<=;))\s*([_\\p{L}\p{Nl}][_\\p{L}\p{M}\p{N}]*+)(:)\s*(?=(/\*.*?\*/\s*$|//|$|;|\b(for|while|do|if|switch|match|repeat)\b))
    captures:
      1: { name: constant.other.label.js }
      2: { name: punctuation.separator.label.js }
  jsdoc:
    patterns:
      - include: '#jsdoc-inline-tags'
      - include: '#jsdoc-access'
      - include: '#jsdoc-as-namepath'
      - include: '#jsdoc-simple'
      - include: '#jsdoc-simple-namepath'
      - include: '#jsdoc-module'
      - include: '#jsdoc-type-name'
      - include: '#jsdoc-type-noname'
      - comment: additional jsdoc V2 keywords
        match: >-
          (?<!\w)@(add|api|body|codeend|codestart|demo|download|group|hide|iframe|image|inherits|option|outline|page|parent|signature|tag)\b
        name: storage.type.class.jsdoc
      - comment: additional jsdoc keywords
        match: >-
          (?<!\w)@(accessor|alternateClassName|aside|cfg|chainable|docauthor|evented|experimental|ftype|hide|inheritable|localdoc|markdown|mixins|new|override|preventable|ptype|removed|scss
          mixin|singleton|template|uses|xtype)\b
        name: storage.type.class.jsdoc
  jsdoc-access:
    comment: '@tag protected....'
    match: (?:^[\s*]*|(?<=/\*\*)\s*)(@(access))\s*(private|protected|public)?(?=\s|$)
    captures:
      1: { name: storage.type.class.jsdoc }
      3: { name: storage.modifier.jsdoc }
  jsdoc-as-namepath:
    begin: (?:^[\s*]*|(?<=/\*\*)\s*)(@(borrows|lends)\b)\s*(?=(?!\*/)\S+(?:(?:\s*\bas\b\s*(?!\*/)\S+)?)?([\S\s]*))
    comment: to terminate the block
    end: ^|(?=\*/)|(?=\3$)
    beginCaptures:
      1: { name: storage.type.class.jsdoc }
    patterns:
      - include: '#jsdoc-namepath-scopes'
  jsdoc-inline-tags:
    begin: (\[(?:(?>[^\[\]]+)|\g<-1>)*\])?({)(?=@)
    end: (})
    name: meta.tag.inline.jsdoc
    beginCaptures:
      1: { name: string.linktext.jsdoc }
      2: { name: meta.brace.curly.jsdoc }
    endCaptures:
      1: { name: meta.brace.curly.jsdoc }
    patterns:
      - match: (@(link|tutorial))\b([^}]*)
        captures:
          1: { name: storage.type.class.jsdoc }
          3: { name: string.jsdoc }
  jsdoc-module:
    begin: >-
      (?:^[\s*]*|(?<=/\*\*)\s*)(@(exports|module|listens|requires)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(\S*)([\S\s]*))
    comment: '@tag {optional type} module:file'
    end: ^|(?=\*/)|(?=\5$)
    beginCaptures:
      1: { name: storage.type.class.jsdoc }
    patterns:
      - include: '#jsdoc-typedef-scopes'
      - match: (?:(module)(:))?(((?!\*/)\S)+)
        captures:
          1: { name: keyword.module.jsdoc }
          2: { name: punctuation.jsdoc }
          3: { name: string.modulename.jsdoc }
  jsdoc-name-scopes:
    patterns:
      - match: ((?!\*/)[\S&&[^\[\]"']])+
        captures:
          0: { name: variable.other.jsdoc }
      - begin: \[
        end: \]|^
        name: variable.other.jsdoc
        patterns:
          - include: '#jsdoc-string'
          - include: '#jsdoc-name-scopes'
  jsdoc-namepath-scopes:
    patterns:
      - match: \s*\b(as)\b\s*(?=[$_A-Za-z])
        captures:
          1: { name: keyword.as.jsdoc }
      - match: \s*(?:([A-Z][$_A-Za-z\d]*)|([$_A-Za-z][$_A-Za-z\d]*))(?=[\s\-~.#]|$)
        captures:
          1: { name: entity.name.class.jsdoc }
          2: { name: entity.name.function.jsdoc }
      - match: (\.)([$_A-Za-z][$_A-Za-z\d]*)(?=\s|$|\")
        captures:
          1: { name: keyword.operator.accessor.jsdoc }
          2: { name: entity.name.function.method.static.jsdoc }
      - match: (\#)([$_A-Za-z][$_A-Za-z\d]*)(?=\s|$|\")
        captures:
          1: { name: keyword.operator.accessor.jsdoc }
          2: { name: entity.name.function.method.instance.jsdoc }
      - match: (~|-)([$_A-Za-z][$_A-Za-z\d]*)(?=\s|$|\")
        captures:
          1: { name: keyword.operator.accessor.jsdoc }
          2: { name: entity.name.function.method.inner.jsdoc }
      - match: (\#)(event)(:)
        captures:
          1: { name: keyword.operator.accessor.jsdoc }
          2: { name: keyword.event.jsdoc }
          3: { name: keyword.operator.jsdoc }
      - applyEndPatternLast: 1
        begin: \.(?="|')
        end: (?=.)
        name: string.method.jsdoc
        patterns:
          - include: '#jsdoc-string'
  jsdoc-simple:
    comment: '@tag'
    match: >-
      (?:^[\s*]*|(?<=/\*\*)\s*)(@(abstract|author|classdesc|copyright|default|defaultvalue|deprecated|description|desc|example|external|fileoverview|file|global|host|ignore|inheritdoc|inner|instance|license|override|overview|readonly|see|since|static|summary|todo|tutorial|virtual|variation|version)\b)(?=$|\s)
    captures:
      1: { name: storage.type.class.jsdoc }
  jsdoc-simple-namepath:
    begin: >-
      (?:^[\s*]*|(?<=/\*\*)\s*)(@(alias|augments|callback|extends|emits|event|fires|interface|memberof|mixes|name|property|prop|this|typedef)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*\S*([\S*\s]*))
    comment: '@tag {opt type} Class#xxx or Class#Event:aaaa etc'
    end: ^|(?=\*/)|(?=\4$)
    beginCaptures:
      1: { name: storage.type.class.jsdoc }
    patterns:
      - include: '#jsdoc-typedef-scopes'
      - include: '#jsdoc-namepath-scopes'
  jsdoc-string:
    match: '"(\\"|[^"])*"|''(\\''|[^''])*'''
    name: string.jsdoc
  jsdoc-type-name:
    begin: >-
      (?:^[\s*]*|(?<=/\*\*)\s*)(@(arg|argument|class|constant|constructor|constructs|const|con|function|func|kind|member|method|mixin|namespace|param|var)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*(((\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\S)+)?([\S\s]*))
    comment: '@tag {optional type} name'
    end: ^|(?=\*/)|(?=\7$)
    beginCaptures:
      1: { name: storage.type.class.jsdoc }
    patterns:
      - include: '#jsdoc-typedef-scopes'
      - include: '#jsdoc-name-scopes'
  jsdoc-type-noname:
    begin: >-
      (?:^[\s*]*|(?<=/\*\*)\s*)(@(enum|exception|implements|private|protected|public|returns|return|throws|type)\b)\s*(?=({(?:(?>[^{}]+)|\g<-1>)*\})?\s*([\S\s]*))
    comment: '@tag {types}'
    end: ^|(?=\*/)|(?=\4$)
    beginCaptures:
      1: { name: storage.type.class.jsdoc }
    patterns:
      - include: '#jsdoc-typedef-scopes'
  jsdoc-typedef-obj:
    begin: '{'
    comment: typedef object
    end: '}|^'
    captures:
      0: { name: meta.brace.curly.jsdoc }
    patterns:
      - include: '#jsdoc-typedef-primitives'
      - match: \b([$_A-Za-z][$_A-Za-z\d]*)\s*(:)
        captures:
          1: { name: variable.other.readwrite.jsdoc }
      - include: '#jsdoc-namepath-scopes'
      - include: '#jsdoc-typedef-obj'
  jsdoc-typedef-primitives:
    match: \b(null|undefined|boolean|string|number)\b
    captures:
      1: { name: support.type.builtin.primitive.jsdoc }
  jsdoc-typedef-scopes:
    begin: '{'
    end: '}|^'
    name: entity.name.type.instance.jsdoc
    captures:
      0: { name: meta.brace.curly.jsdoc }
    patterns:
      - include: '#jsdoc-typedef-primitives'
      - include: '#jsdoc-namepath-scopes'
      - include: '#jsdoc-typedef-obj'
  jsx:
    comment: Avoid < operator expressions as best we can using Zertosh's regex
    patterns:
      - applyEndPatternLast: 1
        begin: >-
          (?<=^|\(|{|\[|,|&&|\|\||\?|:|=|=>|\Wreturn|^return|\Wyield|^yield|\Wdefault|\Wvoid|^void)\s*+(?=<[_\\\p{L}]|<\s*>)
        end: (?=.)
        patterns:
          - include: '#jsx-tag-element-name'
  jsx-assignment:
    patterns:
      - comment: look for attribute assignment
        match: '=(?=\s*(?:''|"|{|/\*|<|//|\n))'
        name: keyword.operator.assignment.sagax
  jsx-attribute-name:
    patterns:
      - comment: look for attribute name
        match: (?<!\S)([_\\\p{L}](?:[$.\p{L}\p{Mn}\p{Mc}\d\p{Nl}\p{Pc}-](?<!\.\.))*+)(?<!\.)(?=//|/\*|=|\s|>|/>)
        captures:
          0: { name: entity.other.attribute-name.sagax }
  jsx-entities:
    patterns:
      - comment: Embeded HTML entities &blah
        match: (&)([a-zA-Z\d]+|#[\d]+|#x\h+)(;)
        captures:
          0: { name: constant.character.entity.sagax }
          1: { name: punctuation.definition.entity.sagax }
          2: { name: entity.name.tag.html.sagax }
          3: { name: punctuation.definition.entity.sagax }
      - comment: Entity with & and invalid name
        match: '&\s*+;'
        name: invalid.illegal.bad-ampersand.sagax
  jsx-evaluated-code:
    patterns:
      - begin: '{'
        contentName: source.saga
        end: '}'
        name: meta.embedded.expression.saga
        beginCaptures:
          0: { name: punctuation.section.embedded.begin.sagax }
        endCaptures:
          0: { name: punctuation.section.embedded.end.sagax }
        patterns:
          - include: '#jsx-string-double-quoted'
          - include: '#jsx-string-single-quoted'
          - include: '#jsx-spread-attribute'
          - include: '#core'
  jsx-spread-attribute:
    patterns:
      - comment: Spread attribute { ... AssignmentExpression }
        match: (?<!\.)\.\.\.
        name: keyword.operator.spread.sagax
  jsx-string-double-quoted:
    begin: '"'
    end: '"(?<!\\")'
    name: string.quoted.double.saga
    beginCaptures:
      0: { name: punctuation.definition.string.begin.sagax }
    endCaptures:
      0: { name: punctuation.definition.string.end.sagax }
    patterns:
      - include: '#jsx-entities'
  jsx-string-single-quoted:
    begin: "'"
    end: '''(?<!\\'')'
    name: string.quoted.single.saga
    beginCaptures:
      0: { name: punctuation.definition.string.begin.sagax }
    endCaptures:
      0: { name: punctuation.definition.string.end.sagax }
    patterns:
      - include: '#jsx-entities'
  jsx-tag-attributes:
    patterns:
      - include: '#jsx-attribute-name'
      - include: '#jsx-assignment'
      - include: '#jsx-string-double-quoted'
      - include: '#jsx-string-single-quoted'
      - include: '#jsx-evaluated-code'
      - include: '#jsx-tag-element-name'
      - include: '#comments'
  jsx-tag-element-name:
    patterns:
      - begin: \s*+(<)\s*(?=>)
        comment: JSX Fragment
        contentName: JSXAttrs
        end: (?<=</)(>)
        name: meta.tag.sagax
        beginCaptures:
          1: { name: punctuation.definition.tag.sagax }
        endCaptures:
          1: { name: punctuation.definition.tag.sagax }
        patterns:
          - include: '#jsx-tag-termination'
      - begin: >-
          \s*+(<)((\p{Ll}[\p{Ll}\d]*)|((?:[_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}-]*?:)?+(?:[_\\\p{L}\p{Nl}](?:[_\\\p{L}\p{N}\p{M}\.-](?<!\.\.))*+)+))(?=[/>\s])(?![:])(?<!\.|:)
        comment: 'Tags that end > are trapped in #jsx-tag-termination'
        contentName: JSXAttrs
        end: \s*(?<=</)((\4)|\2)(>)|(/>)|((?<=</)[\S ]*?)>
        name: meta.tag.sagax
        beginCaptures:
          1: { name: punctuation.definition.tag.sagax }
          2: { name: entity.name.tag.open.sagax }
          4: { name: support.class.component.open.sagax }
        endCaptures:
          1: { name: entity.name.tag.close.sagax }
          2: { name: support.class.component.close.sagax }
          3: { name: punctuation.definition.tag.sagax }
          4: { name: punctuation.definition.tag.sagax }
          5: { name: invalid.illegal.termination.sagax }
        patterns:
          - include: '#jsx-tag-termination'
          - include: '#jsx-tag-attributes'
  jsx-tag-termination:
    patterns:
      - begin: (>)
        comment: uses non consuming search for </ in </tag>
        contentName: JSXNested
        end: (</)
        beginCaptures:
          0: { name: punctuation.definition.tag.sagax }
          1: { name: JSXStartTagEnd }
        endCaptures:
          0: { name: punctuation.definition.tag.sagax }
          1: { name: JSXEndTagStart }
        patterns:
          - include: '#jsx-evaluated-code'
          - include: '#jsx-entities'
          - include: '#jsx-tag-element-name'
  keyword-storage:
    patterns:
      - begin: (?<!\.)\s*+\b(const|con|let|var|val)\b
        end: >-
          (?=\s*[_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*:\s*($|\b(do|for|while)\b))|\s*(?=;|\*/|\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|async|await|enum|new|in|of|then)\b|\)|})
        beginCaptures:
          1: { name: storage.type.js }
        patterns:
          - include: '#flowtype-variable'
  keywords:
    patterns:
      - include: '#new-expression'
      - include: '#query-expression'
      - begin: (?<!\.)\s*+\b(break|continue|goto|label)\b
        end: >-
          ^\s*|\s*(?=,|;|:|//|$|\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|module|namespace|struct|type|declare|interface|enum|extend|trait|object|record)\b)
        beginCaptures:
          1: { name: keyword.control.loop.js }
        patterns:
          - include: '#comments'
          - include: '#keywords'
          - include: '#modifiers'
          - match: \s*([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*
            captures:
              1: { name: constant.other.label.js }
      - comment: Keyword operators
        match: |
          (?x)(?<!(?<!\.\.)\.|\#)\s*+\b(?:
            (in|of|as|void|new|(?:type|name|key|size)of|infer)| #1
            (size)|(len)|(del)|(is)|(to|til|by)|(then)| #2-7
            (n?and|x?n?or|[gl][te]|(?:as|sh)[lr]|div|rem|mod|pow|
            not(of|in)?|(is)no?t)#8-11
          )\b
        captures:
          1: { name: keyword.operator.$1.saga }
          2: { name: keyword.operator.sizeof.saga }
          3: { name: keyword.operator.length.saga }
          4: { name: keyword.operator.delete.saga }
          5: { name: keyword.operator.instanceof.saga }
          6: { name: keyword.control.range.saga }
          7: { name: keyword.control.then.saga }
          8: { name: keyword.other.logical.saga }
          9: { name: keyword.operator.$9.saga }
          10: { name: keyword.operator.instanceof.saga }
      - comment: Control flow keywords
        match: |
          (?x)(?<!(?<!\.\.)\.|\#)\s*+\b(?:
            (if|else|els?if|ell?ess?|unless?)|(for|while|until|repeat)| #1,2
            (switch|case|def)|(match|when|pass)| #3,4
            (try|throw|raise|catch|rescue|finally)|(with|as)| #5,6
            (defn|fn|func?|fun|macro|sub|proc)|(let|va[rl]|con)| #7,8
            (use|using|ref|open|close|out|union|move|crate|box|begin|end)| #9
            (do|goto|label|await|return|fallthru|yield|halt|skip)| #10
            (from|in|of|by|where|join|equals|[io]nto|order|(?:a|de)sc|group)| #11
            ((?:im|ex)pt|from|as|def)#12
          )\b
        captures:
          1: { name: keyword.control.conditional.saga }
          2: { name: keyword.control.loop.saga }
          3: { name: keyword.control.switch.saga }
          4: { name: keyword.control.match.saga }
          5: { name: keyword.control.trycatch.saga }
          6: { name: keyword.control.with.saga }
          7: { name: storage.type.function.saga }
          8: { name: storage.type.saga }
          9: { name: keyword.control.saga }
          10: { name: keyword.control.flow.saga }
          11: { name: keyword.query.saga }
          12: { name: keyword.control.module.saga }
  labels:
    patterns:
      - comment: string as a property name
        match: (?<!\.|\?)\s*+(((")(\\.|[^\\"])*("))|((')(\\.|[^\\'])*(')))\s*+(:)((?=::)|(?!:))
        name: meta.object.member.js meta.object-literal.key.js
        captures:
          1: { name: constant.other.object.key.js }
          2:
            {
              name: string.quoted.double.js,
              patterns: [{ include: '#string-content' }],
            }
          3: { name: punctuation.definition.string.begin.js }
          5: { name: punctuation.definition.string.end.js }
          6:
            {
              name: string.quoted.single.js,
              patterns: [{ include: '#string-content' }],
            }
          7: { name: punctuation.definition.string.begin.js }
          9: { name: punctuation.definition.string.end.js }
          10: { name: punctuation.separator.key-value.js }
      - begin: (?<!\.|\?)\s*+(?=(\[(?:(?>[^\[\]]+)|\g<-1>)*\])\s*+:\s*+[\S&&[^:]])
        comment: '[some expression] : as  property name'
        end: \s*(:)((?=::)|(?!:))
        name: meta.object.member.js meta.object-literal.key.js
        endCaptures:
          1: { name: punctuation.separator.key-value.js }
        patterns:
          - include: '#core'
      - include: '#js-label'
      - match: (?<!\.|\?)\s*+(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))\s*+(:)((?=::)|(?!:))
        name: meta.object.member.js meta.object-literal.key.js
        captures:
          1: { name: constant.other.object.key.js }
          2: { name: string.unquoted.js }
          3: { name: punctuation.separator.key-value.js }
  language-constant:
    patterns:
      - match: (?i)(?<!\.)\s*+\b((true|yes|on)|(false|no|off)|(null|nil|none)|(undefined|undef)|(nan)|(inf|infin|infinity))\b
        captures:
          2: { name: constant.language.boolean.true.js }
          3: { name: constant.language.boolean.false.js }
          4: { name: constant.language.null.js }
          5: { name: constant.language.undefined.js }
          6: { name: constant.language.nan.js }
          7: { name: constant.language.infinity.js }
  language-variable:
    patterns:
      - match: (?<!(?<!\.\.)\.)\s*+\b(params|arguments)\b
        captures:
          1: { name: variable.language.arguments.js }
      - match: (?<!(?<!\.\.)\.)\s*+\b(super)\b\s*+(?!\()
        captures:
          1: { name: variable.language.super.js }
      - match: (?<!(?<!\.\.)\.)\s*+\b(this)\b
        captures:
          1: { name: variable.language.this.js }
      - match: (?<!(?<!\.\.)\.)\s*+\b(self)\b\s*+(?!\()
        captures:
          1: { name: variable.language.self.js }
      - match: (?<=\.)\s*+\b(__proto__)\b
        captures:
          1: { name: variable.language.proto.js }
      - match: (?<=\.)\s*+\b(constructor)\b\s*+(?!\()
        captures:
          1: { name: variable.language.constructor.js }
      - match: (?<=\.)\s*+\b(proto|prototype)\b
        captures:
          1: { name: variable.language.prototype.js }
      - match: |
          (?x)(?<!\.)\s*+\b(?:
            (params|args)|(super|this|self|proto)|(ctor)|(main)
          )\b
        captures:
          1: { name: variable.language.arguments.saga }
          2: { name: variable.language.$2.saga }
          3: { name: variable.language.constructor.saga }
          4: { name: variable.language.prototype.saga }
  match:
    patterns:
      - begin: (?<!\.)\s*+\b(match)\b
        end: \s*(\})
        name: meta.match.js
        beginCaptures:
          1: { name: keyword.control.match.js }
        endCaptures:
          1: { name: meta.brace.curly.matchEnd.js }
        patterns:
          - include: '#round-brackets'
          - begin: \s*+({)
            end: \s*(?=})
            beginCaptures:
              1: { name: meta.brace.curly.matchStart.js }
            patterns:
              - begin: (?<!\.)\s*+\b(if|unless|els?if|ell?ess|else\s*if|else\s*unless)\b
                end: \s*(=>)|\s*(:)((?=::)|(?!:))
                beginCaptures:
                  1: { name: keyword.control.match.js }
                endCaptures:
                  1: { name: storage.type.function.arrow.js }
                  2: { name: keyword.operator.js }
                patterns:
                  - include: '#core'
              - begin: (?<!\.)\s*+\b(else|otherwise|default)\b
                contentName: meta.match.js
                end: \s*(=>)|\s*(:)((?=::)|(?!:))
                beginCaptures:
                  1: { name: keyword.control.match.js }
                endCaptures:
                  1: { name: storage.type.function.arrow.js }
                  2: { name: keyword.operator.js }
              - begin: (?<!\.)\s*+\b(when|case)\b
                end: \s*(=>)|\s*(:)((?=::)|(?!:))
                beginCaptures:
                  1: { name: keyword.control.match.js }
                endCaptures:
                  1: { name: storage.type.function.arrow.js }
                  2: { name: keyword.operator.js }
                patterns:
                  - include: '#with-clause'
                  - include: '#if-clause'
                  - include: '#flowtype-parse-types'
              - include: $self
          - include: $self
    repository:
      if-clause:
        begin: \s*+\b(if|unless|where)
        comment: with clause precedes with
        end: \s*((?=:(?!:))|=>)
        beginCaptures:
          1: { name: keyword.control.match.js }
        endCaptures:
          1: { name: keyword.operator.js }
        patterns:
          - include: '#core'
      with-clause:
        begin: \s*+\b(as|with)
        comment: when clause precedes with
        end: \s*(:)((?=::)|(?!:))|\s*(?=(:|;|=>)|\b(where|if|unless)\b)
        beginCaptures:
          1: { name: keyword.control.match.js }
        endCaptures:
          1: { name: keyword.operator.js }
          2: { patterns: [{ include: '#expression' }] }
          3: { patterns: [{ include: '#expression' }] }
          4: { name: keyword.control.match.js }
        patterns:
          - include: '#if-clause'
          - include: '#core'
  method:
    patterns:
      - begin: >-
          (?<!:)(?<=^|;|,|@@|}|{)\s*+(\bstatic\b)?\s*+(\basync\b)?\s*+(\*?)\s*+(?<!\.)(\#?)(?!\bstatic\b)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)(?=\s*+(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*(\())
        comment: 'e.g. play<T,T>(arg1, arg2): Type<T> { }'
        end: \s*(=(?!=|>))|(?={)|(?=;|}|,)
        beginCaptures:
          1: { name: storage.modifier.js }
          2: { name: storage.type.js }
          3: { name: keyword.generator.asterisk.js }
          4: { name: keyword.operator.private.js }
          5:
            {
              name: entity.name.function.method.js,
              patterns: [{ include: '#string-content' }],
            }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#curly-brackets'
          - include: '#class-content'
          - include: $self
      - begin: >-
          (?<!:)(?<=^|;|,|@@|}|{)\s*+(\bstatic\b)?\s*+(\basync\b)?\s*+(\*?)\s*+(?<!\.)(('|")([^"']*)(\k<-3>))(?=\s*+(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?(\())
        comment: "e.g. 'play'<T,T>(arg1, arg2): Type<T> { }"
        end: \s*(=(?!=|>))|(?={)|(?=;|}|,)
        beginCaptures:
          1: { name: storage.modifier.js }
          2: { name: storage.type.js }
          3: { name: keyword.generator.asterisk.js }
          4:
            {
              name: entity.name.function.method.js,
              patterns: [{ include: '#string-content' }],
            }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#curly-brackets'
          - include: '#class-content'
          - include: $self
      - begin: >-
          (?<!:)(?<=^|;|,|@@|}|{)\s*+(\bstatic\b)?\s*+(\basync\b)?\s*+(\*?)\s*+(?=((\[(?:(?>[^\[\]]+)|\g<-1>)*\]))\s*+(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?\s*+(\())
        comment:
          "e.g. [expression]<T,T>(arg1, arg2): Type<T> { } or 'text'<T,T>(arg1,
          arg2)"
        end: \s*(=(?!=|>))|(?={)|(?=;|}|,)
        beginCaptures:
          1: { name: storage.modifier.js }
          2: { name: storage.type.js }
          3: { name: keyword.generator.asterisk.js }
          4:
            {
              name: entity.name.function.method.js,
              patterns: [{ include: '#string-content' }],
            }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#square-brackets'
          - include: '#curly-brackets'
          - include: '#class-content'
          - include: $self
      - begin: >-
          (?<=^|;|,|@@|}|{)\s*+\b(?:(static)\s+)?(get|set)\s++(\#?)(?!\bstatic\b)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)(?=\s*+\()
        comment: getter/setter
        end: \s*(=(?!=|>))|(?={)|(?=;|}|,)
        beginCaptures:
          1: { name: storage.modifier.js }
          2: { name: storage.type.accessor.js }
          3: { name: keyword.operator.private.js }
          4: { name: entity.name.function.accessor.js }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype'
          - include: '#curly-brackets'
          - include: '#class-content'
          - include: $self
      - begin: >-
          (?<=^|;|,|@@|}|{)\s*+\b(?:(static)\s+)?(get|set)\s+(?=((\[(?:(?>[^\[\]]+)|\g<-1>)*\])|\s*+(((')((?:[^']|\\')*)('))|\s*+((")((?:[^"]|\\")*)("))))\s*+(\())
        comment: getter/setter set [expression]() or get 'text'()
        end: \s*(=(?!=|>))|(?={)|(?=;|}|,)
        beginCaptures:
          1: { name: storage.modifier.js }
          2: { name: storage.type.accessor.js }
          3: { name: entity.name.function.accessor.js }
        endCaptures:
          1: { name: keyword.operator.assignment.js }
        patterns:
          - include: '#flowtype-parse-array'
          - include: '#string'
          - include: '#flowtype'
          - include: '#square-brackets'
          - include: '#class-content'
          - include: $self
  method-call:
    patterns:
      - applyEndPatternLast: 1
        begin: >-
          \s*+(\#?)((?:[\p{Lu}])(?:[_\\p{Lu}\d])*+)\s*+(?:(\?\.)|(!\.)|(~\.)|(\.))\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?=(\[(?:(?>[^\[\]]+)|\\g<-1>)*\])?+\s*+(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+(\(\s*+\)))
        comment: e.g CONSTNAME.method() or CONST.method[p]()
        end: (?=.)
        name: meta.method-call.without-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.constant.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.assertion.js }
          6: { name: keyword.operator.accessor.js }
          7: { name: keyword.operator.private.js }
          8: { patterns: [{ include: '#method-name' }] }
        patterns:
          - include: '#square-brackets'
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          \s*+(\#?)((?:[\p{Lu}])(?:[_\\p{L}\p{M}\p{N}])*+)\s*+(?:(\?\.)|(!\.)|(~\.)|(\.))\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?=(\[(?:(?>[^\[\]]+)|\\g<-1>)*\])?+\s*+(\(\s*+\)))
        comment: e.g Abc.aaa()
        end: (?=.)
        name: meta.method-call.without-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.assertion.js }
          5: { name: keyword.operator.cascade.js }
          6: { name: keyword.operator.accessor.js }
          7: { name: keyword.operator.private.js }
          8: { patterns: [{ include: '#method-name' }] }
        patterns:
          - include: '#square-brackets'
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          \s*+(\#?)((?:[\p{Lu}])(?:[_\\p{Lu}\d])*+)\s*+(?:(\?\.)|(!\.)|(~\.)|(\.))\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?=(\[(?:(?>[^\[\]]+)|\\g<-1>)*\])?+\s*+(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+\()
        comment: e.g CONSTNAME.method()
        end: (?=.)
        name: meta.method-call.with-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.constant.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.assertion.js }
          5: { name: keyword.operator.cascade.js }
          6: { name: keyword.operator.accessor.js }
          7: { name: keyword.operator.private.js }
          8: { patterns: [{ include: '#method-name' }] }
        patterns:
          - include: '#square-brackets'
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          \s*+(\#?)((?:[\p{Lu}])(?:[_\\p{L}\p{M}\p{N}])*+)\s*+(?:(\?\.)|(!\.)|(~\.)|(\.))\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?=(\[(?:(?>[^\[\]]+)|\\g<-1>)*\])?+\s*+(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+\()
        comment: e.g Abc.aaa()
        end: (?=.)
        name: meta.method-call.with-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.assertion.js }
          5: { name: keyword.operator.cascade.js }
          6: { name: keyword.operator.accessor.js }
          7: { name: keyword.operator.private.js }
          8: { patterns: [{ include: '#method-name' }] }
        patterns:
          - include: '#round-brackets'
          - include: '#type-argument-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?=(\[(?:(?>[^\[\]]+)|\\g<-1>)*\])?+\s*+(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+(\(\s*+\)))
        comment: e.g .aaa()
        end: (?=.)
        name: meta.method-call.without-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#method-name' }] }
          3: { name: meta.group.braces.round.function.arguments.js }
        patterns:
          - include: '#square-brackets'
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?=(\[(?:(?>[^\[\]]+)|\\g<-1>)*\])?+\s*+(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+\()
        comment: e.g .aaa()
        end: (?=.)
        name: meta.method-call.with-arguments.js
        beginCaptures:
          1: { name: keyword.operator.private.js }
          2: { patterns: [{ include: '#method-name' }] }
        patterns:
          - include: '#square-brackets'
          - include: '#type-argument-brackets'
          - include: '#round-brackets'
  method-name:
    patterns:
      - include: '#support-methods'
      - match: (?<=\.)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: support.function.js
  mini-expression:
    comment:
      A mini-language supporting most language features (the other syntax comes
      from Python)
    patterns:
      - include: '#keywords'
      - include: '#support'
      - include: '#modifiers'
      - comment: 'TODO: fix brackets'
        include: '#query-expression'
      - comment: 'TODO: fix brackets'
        include: '#new-expression'
      - comment: 'TODO: fix brackets'
        include: '#function-method'
      - comment: 'TODO: fix brackets'
        include: '#method-calls'
      - comment: 'TODO: fix brackets'
        include: '#function-calls'
      - include: '#language-constant'
      - include: '#language-variable'
      - include: '#number'
      - include: '#string'
      - include: '#quasi'
      - include: '#support.properties'
      - include: '#variable'
      - include: '#operator'
      - include: '#operators'
      - include: '#punctuation'
      - include: '#round-brackets'
      - include: '#square-brackets'
      - include: '#curly-brackets'
      - include: source.coffee
      - include: source.python
      - include: source.ruby
      - include: source.fsharp
      - include: source.elixir
    repository:
      comment: just some bugfixes
      curly-brackets:
        begin: \s*+(\{)
        end: \s*(\})
        beginCaptures:
          1: { name: meta.brace.curly.js }
        endCaptures:
          1: { name: meta.brace.curly.js }
        patterns:
          - include: '#mini-expression'
      round-brackets:
        begin: \s*+(\()
        end: \s*(\))
        beginCaptures:
          1: { name: meta.brace.round.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#mini-expression'
      square-brackets:
        begin: \s*+(\[)
        end: \s*(\])
        beginCaptures:
          1: { name: meta.brace.square.js }
        endCaptures:
          1: { name: meta.brace.square.js }
        patterns:
          - include: '#mini-expression'
      ternary-expression:
        begin: \s*+(\?)(?!\.[^\d]|[?=])
        end: \s*(:)((?=::)|(?!:|=))
        beginCaptures:
          1: { name: keyword.operator.ternary.js }
        endCaptures:
          1: { name: keyword.operator.ternary.js }
        patterns:
          - begin: \s*+(?=([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*:)
            end: \s*(?=:)
            patterns:
              - include: '#language-constant'
              - include: '#variable'
          - include: '#mini-expression'
  modifiers:
    patterns:
      - comment: Modifier keywords
        match: |
          (?x)(?<!(?<!\.\.)\.|\#)\s*+\b(?:
            (pub|prot|pvt|ro|(?:in|ex)tl)| #1
            (over|abs|stat|dyn|vol|a?sync|(?:im)mut|part|seal|final|dele|[dr]ef
            trans|(?:im|ex)pl|dele|ext|(?:un)?(?:sign|safe|check|size|set))| #2
            (rec|gen|inline|(?:pre|in|suf|)fix|(?:u|bi|ter|)nary|[gs]et|
            prev|next|lock|fixed) #3
          )\b
        captures:
          1: { name: storage.modifier.saga }
          2: { name: keyword.modifier.saga }
          3: { name: storage.type.accessor.saga }
      - comment: Type alias keywords
        match: |
          (?x)(?<!(?<!\.\.)\.|\#)\s*+\b(?:
            (trait|enum|given)|(obj|rec)|(nspace)|(inter)| #1-4
            (pkg)|(extn)|(class)|(ext)|(impl)|(decl) #6-10
          )\b
        captures:
          1: { name: keyword.other.$1.saga }
          2: { name: keyword.other.object.saga }
          3: { name: keyword.other.namespace.saga }
          4: { name: keyword.other.interface.saga }
          5: { name: keyword.other.module.saga }
          6: { name: keyword.other.extension.saga }
          7: { name: storage.type.class.saga }
          8: { name: keyword.other.extends.saga }
          9: { name: keyword.other.implements.saga }
          10: { name: keyword.other.declare.saga }
  module:
    patterns:
      - include: '#module-import'
      - include: '#module-export'
  module-as:
    match: \s*+(?:(\*)|(\bdefault\b))?\s*+(\bas\b)\s*+(?:(\*)|(\bdefault\b))?
    captures:
      1: { name: keyword.operator.module.all.js }
      2: { name: keyword.control.module.js }
      3: { name: keyword.control.module.reference.js }
      4: { name: keyword.operator.module.all.js }
      5: { name: keyword.control.module.js }
  module-brackets:
    patterns:
      - begin: \s*+(?:({)|(\[))
        end: \s*(?:(\})|(\]))
        beginCaptures:
          1: { name: meta.brace.curly.js }
          2: { name: meta.brace.square.js }
        endCaptures:
          1: { name: meta.brace.curly.js }
          2: { name: meta.brace.square.js }
        patterns:
          - match: \*
            name: keyword.operator.module.all.js
          - include: '#module-typeof'
          - include: '#module-as'
          - include: '#module-brackets'
          - include: '#variable'
          - include: '#string'
          - include: '#comments'
          - include: '#comma'
  module-export:
    patterns:
      - comment: e.g. export let variable =, export type a=
        match: (?<!\.)\s*+\b(export)(?!\s*:)\b(?=\s++(const|con|let|opaque|var|type|typeof)\s++(?:[_\\p{L}\p{Nl}]))
        captures:
          1: { name: keyword.control.module.js }
      - begin: >-
          (?<!\.)\s*+\b(export)\b\s*(\btype\b)?(?=\s++({|\*|((?:[_\\p{L}\p{Nl}])(?:[_\\p{L}\p{M}\p{N}])*+)(\s++from\b|\s*,)))
        comment:
          export {  or  export * or export var or export type {} from module
        end: >-
          \s*(?:(?:(\bfrom\b)?+\s++(('|")([^"']*)(\k<-3>)))|(?=;|^\s*\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|module|namespace|struct|type|declare|interface|enum|extend|trait|object|record)\b|\)|}))
        beginCaptures:
          1: { name: keyword.control.module.js }
          2: { name: keyword.control.module.js }
        endCaptures:
          1: { name: keyword.control.module.js }
          2: { name: string.quoted.module.js }
          3: { name: punctuation.definition.string.begin.js }
          5: { name: punctuation.definition.string.end.js }
        patterns:
          - include: '#module-as'
          - match: \s*\*
            name: keyword.operator.module.all.js
          - include: '#module-brackets'
          - include: '#variable'
          - include: '#comments'
          - include: '#comma'
      - comment: trap expressions among - export function* () {}
        match: (?<!\.)\s*+\b(export|default)(?!\s*:)\b
        captures:
          1: { name: keyword.control.module.js }
  module-import:
    patterns:
      - applyEndPatternLast: 1
        begin: (?<!\.)\s*+(import)(?=\()
        end: (?=.)
        name: meta.function-call.with-arguments.js
        beginCaptures:
          1: { name: keyword.control.module.js }
        patterns:
          - include: '#round-brackets'
      - begin: (?<!\.)\s*+\b(import)(?!\s*:)\b
        end: >-
          \s*(?:(?:(\bfrom\b)?+\s++(('|")([^"']*)(\k<-3>)))|(?=;|^\s*\b(if|unless|els?if|ell?ess|else|match|when|repeat|until|switch|case|break|continue|default|try|var|let|const|con|val|static|function|func?|fn|return|class|do|for|while|debugger|export|import|yield|module|namespace|struct|type|declare|interface|enum|extend|trait|object|record)\b|\)|}))
        beginCaptures:
          1: { name: keyword.control.module.js }
        endCaptures:
          1: { name: keyword.control.module.js }
          2: { name: string.quoted.module.js }
          3: { name: punctuation.definition.string.begin.js }
          5: { name: punctuation.definition.string.end.js }
        patterns:
          - match: \s*\b(default)\b
            captures:
              1: { name: keyword.control.module.js }
          - include: '#module-typeof'
          - include: '#module-as'
          - match: \s*\*
            name: keyword.operator.module.all.js
          - include: '#module-brackets'
          - include: '#variable'
          - include: '#comments'
          - include: '#comma'
  module-typeof:
    match: \s*\b(typeof|type)\b\s++(?={|\*|(?:[_\\p{L}\p{Nl}]))(?!\b(i[sn]|as)\b|,)
    captures:
      1: { name: keyword.other.typedef.flowtype }
  multiline-arrow-function-generics:
    patterns:
      - begin: \s*+(?:(\basync)\s+)(?=(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*>)?+\s*+\(\s*$)
        comment: e.g. export default async <T>(
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.arrow.js
        beginCaptures:
          1: { name: storage.type.js }
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
      - begin: \s*+(?=(<(?:(?>(?<==)>|[^<>]+)|\g<-1>)*+>)\()
        comment: e.g. export default <T>(
        end: ((?<=})|(?:\s*(=>)(?!\s*{)))
        name: meta.function.arrow.js
        endCaptures:
          2: { name: storage.type.function.arrow.js }
        patterns:
          - include: '#flowtype'
          - include: '#fat-arrow-braced-body'
  multiline-regexp:
    comment: Updated to support Perl regex syntax
    patterns:
      - begin: ([[:alpha:]]*)(/>)\s*\n?
        end: \s*(\n?</)([[:alnum:]]*)
        name: string.regexp.multiline.js
        beginCaptures:
          1: { name: keyword.modifier.js }
          2: { name: punctuation.definition.string.begin.js }
        endCaptures:
          1: { name: punctuation.definition.string.end.js }
          2: { name: keyword.other.flag.js }
        patterns:
          - include: '#heregexp'
      - begin: (?!\\)(?<=</)(>)\s*\n?
        contentName: string.quoted.js
        end: \s*\n?(</)([\da-zA-Z]*)
        name: string.regexp.js
        beginCaptures:
          1: { name: punctuation.definition.string.begin.js }
        endCaptures:
          1: { name: punctuation.definition.string.end.js }
          2: { name: keyword.other.flag.js }
        patterns:
          - match: \\[1-9]\d*
            name: keyword.other.back-reference.regexp
          - begin: (\\<)
            end: \s*(>)
            name: keyword.other.back-reference.regexp
            beginCaptures:
              1: { name: keyword.other.back-reference.regexp }
            endCaptures:
              1: { name: keyword.other.back-reference.regexp }
            patterns:
              - include: '#regex-group-name'
          - include: '#string-content'
  new-expression:
    - comment: A new expression with no type params or arguments, like new Foo()
      match: (?<!\.)\s*+(\bnew\b)\s*+((\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(\?\.)?(\()\s*+(\)))
      name: meta.new-class.without-arguments.js
      captures:
        1: { name: keyword.operator.new.js }
        2: { name: meta.function-call.without-arguments.js }
        3: { name: keyword.operator.private.js }
        4: { name: entity.name.type.instance.js }
        5: { name: keyword.operator.existential.js }
        6: { name: meta.brace.round.js }
        7: { name: meta.brace.round.js }
    - applyEndPatternLast: 1
      begin: >-
        (?<!\.)\s*+(\bnew\b)\s*+((\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(\?\.)?\s*+(?=(<(?:(?>[^<>]+)|\g<-1>)*>)\s*+(\()\s*+(\))))
      comment:
        A new expression with type params and no arguments, like new
        Foo<string>()
      end: (?=.)
      name: meta.new-class.without-arguments.js
      beginCaptures:
        1: { name: keyword.operator.new.js }
        2: { name: meta.function-call.without-arguments.js }
        3: { name: keyword.operator.private.js }
        4: { name: entity.name.type.instance.js }
        5: { name: keyword.operator.existential.js }
      patterns:
        - include: '#type-argument-brackets'
        - include: '#round-brackets'
    - applyEndPatternLast: 1
      begin: >-
        (?<!\.)\s*+(\bnew\b)\s*+((\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(\?\.)?\s*+(?=(<(?:(?>[^<>]+)|\g<-1>)*>)?\s*+\())
      comment:
        A new expression with arguments and maybe type params, like new
        Foo<string>(123)
      end: (?=.)
      name: meta.new-class.with-arguments.js
      beginCaptures:
        1: { name: keyword.operator.new.js }
        2: { name: meta.function-call.with-arguments.js }
        3: { name: keyword.operator.private.js }
        4: { name: entity.name.type.instance.js }
        5: { name: keyword.operator.existential.js }
      patterns:
        - include: '#type-argument-brackets'
        - include: '#round-brackets'
  number:
    comments: Generated numeric literals
    patterns:
      # - match: (?<=[\htxz])\.(?!\.)
      #   name: meta.delimiter.decimal.period.saga
      # - match: (?<!\.)\.(?=\d)
      #   name: meta.delimiter.decimal.period.saga
      - match: |-
          (?xi)\s*\b
          0b
          [01] [01_]* [01]?
          (?:(\.) [01] [01_]* [01]?)?
          (?:(r) [01] [01_]* [01]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.binary.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0b
          (?:[01] [01_]* [01]?)?
          (?:(\.) [01] [01_]* [01]?)
          (?:(r) [01] [01_]* [01]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.binary.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0q
          [0-3] [0-3_]* [0-3]?
          (?:(\.) [0-3] [0-3_]* [0-3]?)?
          (?:(r) [0-3] [0-3_]* [0-3]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.quaternary.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0q
          (?:[0-3] [0-3_]* [0-3]?)?
          (?:(\.) [0-3] [0-3_]* [0-3]?)
          (?:(r) [0-3] [0-3_]* [0-3]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.quaternary.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0s
          [0-5] [0-5_]* [0-5]?
          (?:(\.) [0-5] [0-5_]* [0-5]?)?
          (?:(r) [0-5] [0-5_]* [0-5]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.senary.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0s
          (?:[0-5] [0-5_]* [0-5]?)?
          (?:(\.) [0-5] [0-5_]* [0-5]?)
          (?:(r) [0-5] [0-5_]* [0-5]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.senary.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0o
          [0-7] [0-7_]* [0-7]?
          (?:(\.) [0-7] [0-7_]* [0-7]?)?
          (?:(r) [0-7] [0-7_]* [0-7]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.octal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0o
          (?:[0-7] [0-7_]* [0-7]?)?
          (?:(\.) [0-7] [0-7_]* [0-7]?)
          (?:(r) [0-7] [0-7_]* [0-7]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.octal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0z
          [\dabetxz] [\dabetxz_]* [\dabetxz]?
          (?:(\.) [\dabetxz] [\dabetxz_]* [\dabetxz]?)?
          (?:(r) [\dabetxz] [\dabetxz_]* [\dabetxz]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.duodecimal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0z
          (?:[\dabetxz] [\dabetxz_]* [\dabetxz]?)?
          (?:(\.) [\dabetxz] [\dabetxz_]* [\dabetxz]?)
          (?:(r) [\dabetxz] [\dabetxz_]* [\dabetxz]?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.duodecimal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0x
          \h [\h_]* \h?
          (?:(\.) \h [\h_]* \h?)?
          (?:(r) \h [\h_]* \h?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.hexadecimal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          0x
          (?:\h [\h_]* \h?)?
          (?:(\.) \h [\h_]* \h?)
          (?:(r) \h [\h_]* \h?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.hexadecimal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          \d [\d_]* \d?
          (?:(\.) \d [\d_]* \d?)?
          (?:(r) \d [\d_]* \d?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.decimal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          (?:\d [\d_]* \d?)?
          (?:(\.) \d [\d_]* \d?)
          (?:(r) \d [\d_]* \d?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.decimal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          \d\w
          \w [\w_]* \w?
          (?:(\.) \w [\w_]* \w?)?
          (?:(r) \w [\w_]* \w?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.illegal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
      - match: |-
          (?xi)\s*\b
          \d\w
          (?:\w [\w_]* \w?)?
          (?:(\.) \w [\w_]* \w?)
          (?:(r) \w [\w_]* \w?)?
          (?:(p[+-]?) \d+)?
          (?:(s) \d+)?
          (?:(k) \w+)?
        captures:
          0: { name: constant.numeric.illegal.saga }
          1: { name: meta.delimiter.decimal.period.saga }
          2: { name: storage.type.numeric.bigint.saga }
          3: { name: storage.type.numeric.bigint.saga }
          4: { name: storage.type.numeric.bigint.saga }
          5: { name: storage.type.numeric.bigint.saga }
  object:
    begin: (?:(?<=\(|\[|,)|(?:\s*(?:(=)|\b(default)\b|\b(return)\b|(,))))\s*({)
    comment: obj lteral ({ or ,{ or [{ or ={ or return { or default {
    end: \s*+(})
    beginCaptures:
      1: { name: keyword.operator.assignment.js }
      2: { name: keyword.control.module.js }
      3: { name: keyword.control.flow.js }
      4: { name: meta.delimiter.comma.js }
      5: { name: meta.brace.curly.litobj.js }
    endCaptures:
      1: { name: meta.brace.curly.litobj.js }
    patterns:
      - include: '#object-body'
  object-body:
    patterns:
      - include: '#flowtype-keywords'
      - include: languagebabel.ttlextension
      - include: '#html-template'
      - include: '#object-brace-property'
      - include: '#function-labels'
      - include: '#arrow-function-labels'
      - include: '#arrow-function'
      - include: '#method'
      - include: '#arrow-expression'
      - include: '#object-prop-shorthand'
      - include: '#labels'
      - include: '#keywords'
      - include: '#modifiers'
      - include: '#core'
      - include: '#punctuation'
  object-brace:
    begin: \s*({)
    comment: nested obj literal found inside other objects like arrays
    end: \s*+(})
    beginCaptures:
      1: { name: meta.brace.curly.litobj.js }
    endCaptures:
      1: { name: meta.brace.curly.litobj.js }
    patterns:
      - include: '#object-body'
  object-brace-property:
    begin: (?<=:)\s*({)
    comment: 'nested obj literal key: {object} '
    end: \s*+(})
    beginCaptures:
      1: { name: meta.brace.curly.litobj.js }
    endCaptures:
      1: { name: meta.brace.curly.litobj.js }
    patterns:
      - include: '#object-body'
  object-prop-shorthand:
    comment: give an alternate scope name to shorthand object literals
    patterns:
      - match: (?<=^|,|{)(?<!:|\.)\s*+(((?:[_\\p{Lu}\p{Nl}])(?:[_\\p{Lu}\p{Nl}])*+))\s*+(?=$|,|})
        captures:
          1: { name: constant.other.object.key.js }
          2: { name: variable.other.constant.shorthandpropertyname.js }
      - match: (?<=^|,|{)(?<!:|\.)\s*+(([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*))\s*+(?=$|,|})
        captures:
          1: { name: variable.other.readwrite.shorthandpropertyname.js }
  of-clause:
    begin: \s*+\b(of)
    end: \s*(=(?!=|>))|\s*(?<=})
    beginCaptures:
      1: { name: meta.enum.of.flowtype }
    endCaptures:
      1: { name: keyword.operator.assignment.js }
    patterns:
      - include: '#flowtype-parse-types'
  operator:
    patterns:
      - begin: \s*((:\?[<=>]?))\s*
        comment: Type assertion/conversion/coercion/casting operator
        end: (?=[^&|^~<>!?\p{L}\p{N}\p{Sc}\[\]{}_])
        beginCaptures:
          1: { name: keyword.operator.type.js }
        endCaptures:
          1: { patterns: [{ include: '#core' }] }
        patterns:
          - include: '#flowtype-parse-types'
      - match: \s*:=\s*
        name: keyword.operator.assignment.js
      - match: \s*\\\s*($|(?=/[/*]))
        name: constant.character.escape.newline.js
      - match: \s*(?:(::+)|([<>]:+|:+[<>]|[<>]:+[<>]))\s*
        captures:
          1: { name: keyword.operator.accessor.js }
          2: { name: keyword.operator.class.js }
          3: { name: keyword.operator.accessor.js }
  operators:
    patterns:
      - include: '#unary-ops'
      - include: '#binary-ops'
      - include: '#special-operators'
    repository:
      unary-ops:
        patterns:
          - comment: Unary prefix operators
            name: keyword.operator.prefix.saga
            match: |
              (?x)
              (?:(\*+)|(\++)|(\-+)|(\&+)|(\|+)|(\^+)|(\!+)|(\#+)|(\@+)|(\~+)|(\?+)| #1-11
              [\p{S}\p{Po}\p{Pd}&&[^.,:;'"`</>\\$]]+) #12
              (?=[\p{L}\p{M}\p{N}\p{Ps}\p{Pe}])
            captures:
              1: { name: keyword.operator.module.all.saga }
              2: { name: keyword.operator.increment.saga }
              3: { name: keyword.operator.decrement.saga }
              4: { name: keyword.operator.intersection.saga }
              5: { name: keyword.operator.union.saga }
              6: { name: keyword.operator.symdiff.saga }
              7: { name: keyword.operator.logical.saga }
              8: { name: keyword.operator.private.saga }
              9: { name: keyword.operator.decorator.saga }
              10: { name: keyword.operator.bitwise.saga }
              11: { name: keyword.operator.existential.saga }
              12: { name: keyword.operator.prefix.saga }
          - comment: Unary suffix operators
            name: keyword.operator.suffix.saga
            match: |
              (?x)
              (?<=[\p{L}\p{M}\p{N}\p{Ps}\p{Pe}])
              (?:(\*+)|(\++)|(\-+)|(\&+)|(\|+)|(\^+)|(\!+\.?)|(\#+)|(\@+)|(\~+\.?)|(\?+\.?)| #1-11
              [\p{S}\p{Po}\p{Pd}&&[^.,:;'"`</>\\$]]+) #12
            captures:
              1: { name: keyword.operator.module.all.saga }
              2: { name: keyword.operator.increment.saga }
              3: { name: keyword.operator.decrement.saga }
              4: { name: keyword.operator.intersection.saga }
              5: { name: keyword.operator.union.saga }
              6: { name: keyword.operator.symdiff.saga }
              7: { name: keyword.operator.assertion.saga }
              8: { name: keyword.operator.private.saga }
              9: { name: keyword.operator.decorator.saga }
              10: { name: keyword.operator.cascade.saga }
              11: { name: keyword.operator.existential.saga }
              12: { name: keyword.operator.suffix.saga }
      binary-ops:
        patterns:
          - comment: built-in operators need to be surrounded with spaces
            name: keyword.operator.builtin.saga
            match: |
              (?x)(?<=^|\s)(?:
                ([\p{S}\p{P}&&[^_@:.;,'"`\\\p{Ps}\p{Pe}]]+(?<![!~<=>])=)| #1
                (\+\+|--)| #2
                (\+|-(?!>)|\*{1,3}|(?<!<)/(?!>)|\#|%%?|\*>|<\*)| #3
                (&&|\|\||\^\^|\\/|/\\)| #4
                ([&^]|\|(?!>)|~(?![!=<>]))| #5
                (=\.\.|\.\.=|=\.=|\.\.(?!\.))| #6
                (<[|+]|[|+]>)|(<<<?|>>>?)| #7-8
                ([<>]:|:[<>]|[<>]:[<>])| #9
                (=<|<>|[!=]~|~[!=]|[<>]~|~[<>])| #10
                (->|<-)|(<=>|[<>]=?)|(=[!:]=|[!=]==?)| #11-13
                (!\?|\?!)|(\?\??)|(\?:)|(!:)|(\.\.\.)| #14-18
                (\?\.|(?<=[_\\\p{M}\p{L}\p{N}\p{Pe}?])\?(?![.:])(?=\B))| #19
                (!\.|(?<=[_\\\p{M}\p{L}\p{N}\p{Pe}!])\!(?![.:])(?=\B))| #20
                (~\.)|((?<!\.)\.(?!=)|:::?)|((?:\.|::?)?=) #21-23
              )(?=$|\s)
            captures:
              1: { name: keyword.operator.assignment.augmented.saga }
              2: { name: keyword.operator.crement.saga }
              3: { name: keyword.operator.arithmetic.saga }
              4: { name: keyword.operator.logical.saga }
              5: { name: keyword.operator.bitwise.saga }
              6: { name: keyword.operator.range.saga }
              7: { name: keyword.operator.pipeline.saga }
              8: { name: keyword.operator.bitwise.shift.saga }
              9: { name: keyword.operator.class.saga }
              10: { name: keyword.operator.similarity.saga }
              11: { name: keyword.operator.then.saga }
              12: { name: keyword.operator.relational.saga }
              13: { name: keyword.operator.comparison.saga }
              14: { name: keyword.operator.nonnull.saga }
              15: { name: keyword.operator.nullcoalesce.saga }
              16: { name: keyword.operator.ternary.saga }
              17: { name: keyword.operator.quasiternary.saga }
              18: { name: keyword.operator.spread.saga }
              19: { name: keyword.operator.existential.saga }
              20: { name: keyword.operator.assertion.saga }
              21: { name: keyword.operator.cascade.saga }
              22: { name: keyword.operator.accessor.saga }
              23: { name: keyword.operator.assignment.saga }
          - match: '(?:(\?\.)|(~\.)|(!\.)|(\.))'
            captures:
              1: { name: keyword.operator.existential.js }
              2: { name: keyword.operator.cascade.js }
              3: { name: keyword.operator.assertion.js }
              4: { name: keyword.operator.accessor.js }
          - comment: |
              custom operators
              (#7) /(<//+>|<//+|//+>|<{2,}|(?<!</)>{2,}|/+)(?!=)/ does not work
              so we will leave it here for now (please help)
            name: keyword.operator.infix.saga
            match: |
              (?x)
              ([&|^~][\p{S}\p{Po}\p{Pd}&&[^.,:;'"`\\$]]+)| #1
              (/[\p{S}\p{Po}\p{Pd}&&[^.,:;'"`</>\\$]]+|
              [-+*%\#][\p{S}\p{Po}\p{Pd}&&[^.,:;'"`\\$]]+)| #2
              ([:.][\p{S}\p{Po}\p{Pd}&&[^.,:;'"`\\$]]+)| #3
              ([<>][\p{S}\p{Po}\p{Pd}&&[^.,:;'"`</>\\$]]+)| #4
              ([!=][\p{S}\p{Po}\p{Pd}&&[^.,:;'"`\\$]]+)| #5
              (\?[\p{S}\p{Po}\p{Pd}&&[^.,:;'"`\\$]]+)| #6
              ([\p{S}\p{Po}\p{Pd}&&[^.,:;'"`</>\\$]]+) #7
            captures:
              1: { name: keyword.operator.logical.saga }
              2: { name: keyword.operator.arithmetic.saga }
              3: { name: keyword.operator.accessor.saga }
              4: { name: keyword.operator.relational.saga }
              5: { name: keyword.operator.comparison.saga }
              6: { name: keyword.operator.existential.saga }
              7: { name: keyword.operator.infix.saga }
  preprocessor:
    begin: ^\s*(\#)\s*
    end: (?<=$)
    name: meta.preprocessor.js
    beginCaptures:
      1: { name: punctuation.separator.hash.js }
    patterns:
      - include: '#comment'
      - include: '#preprocessor-define-or-undef'
      - include: '#preprocessor-if-or-elif'
      - include: '#preprocessor-else-or-endif'
      - include: '#preprocessor-warning-or-error'
      - include: '#preprocessor-region'
      - include: '#preprocessor-endregion'
      - include: '#preprocessor-load'
      - include: '#preprocessor-r'
      - include: '#preprocessor-line'
      - include: '#preprocessor-pragma-warning'
      - include: '#preprocessor-pragma-checksum'
  preprocessor-define-or-undef:
    match: \b(?:(define)|(undef))\b\s*\b([_[:alpha:]][_[:alnum:]]*)\b
    captures:
      1: { name: keyword.preprocessor.define.js }
      2: { name: keyword.preprocessor.undef.js }
      3: { name: entity.name.variable.preprocessor.symbol.js }
  preprocessor-else-or-endif:
    match: \b(?:(else)|(endif))\b
    captures:
      1: { name: keyword.preprocessor.else.js }
      2: { name: keyword.preprocessor.endif.js }
  preprocessor-endregion:
    match: \b(endregion)\b
    captures:
      1: { name: keyword.preprocessor.endregion.js }
  preprocessor-expression:
    patterns:
      - include: '#core'
  preprocessor-if-or-elif:
    begin: \b(?:(if)|(elif))\b
    end: (?=$)
    beginCaptures:
      1: { name: keyword.preprocessor.if.js }
      2: { name: keyword.preprocessor.elif.js }
    patterns:
      - include: '#comment'
      - include: '#preprocessor-expression'
  preprocessor-line:
    begin: \b(line)\b
    end: (?=$)
    beginCaptures:
      1: { name: keyword.preprocessor.line.js }
    patterns:
      - match: \b(?:(default|hidden))
        captures:
          1: { name: keyword.preprocessor.default.js }
          2: { name: keyword.preprocessor.hidden.js }
      - match: '[0-9]+'
        captures:
          0: { name: constant.numeric.decimal.js }
      - match: \"[^"]*\"
        captures:
          0: { name: string.quoted.double.js }
  preprocessor-load:
    begin: \b(load)\b
    end: (?=$)
    beginCaptures:
      1: { name: keyword.preprocessor.load.js }
    patterns:
      - match: \"[^"]*\"
        captures:
          0: { name: string.quoted.double.js }
  preprocessor-pragma-checksum:
    match: \b(pragma)\b\s*\b(checksum)\b\s*(\"[^"]*\")\s*(\"[^"]*\")\s*(\"[^"]*\")
    captures:
      1: { name: keyword.preprocessor.pragma.js }
      2: { name: keyword.preprocessor.checksum.js }
      3: { name: string.quoted.double.js }
      4: { name: string.quoted.double.js }
      5: { name: string.quoted.double.js }
  preprocessor-pragma-warning:
    match: \b(pragma)\b\s*\b(warning)\b\s*\b(?:(disable)|(restore))\b(\s*[0-9]+(?:\s*,\s*[0-9]+)?)?
    captures:
      1: { name: keyword.preprocessor.pragma.js }
      2: { name: keyword.preprocessor.warning.js }
      3: { name: keyword.preprocessor.disable.js }
      4: { name: keyword.preprocessor.restore.js }
      5:
        {
          patterns:
            [
              {
                match: '[0-9]+',
                captures: { 0: { name: constant.numeric.decimal.js } },
              },
              { include: '#punctuation-comma' },
            ],
        }
  preprocessor-r:
    begin: \b(r)\b
    end: (?=$)
    beginCaptures:
      1: { name: keyword.preprocessor.r.js }
    patterns:
      - match: \"[^"]*\"
        captures:
          0: { name: string.quoted.double.js }
  preprocessor-region:
    match: \b(region)\b\s*(.*)(?=$)
    captures:
      1: { name: keyword.preprocessor.region.js }
      2: { name: string.unquoted.preprocessor.message.js }
  preprocessor-warning-or-error:
    match: \b(?:(warning)|(error))\b\s*(.*)(?=$)
    captures:
      1: { name: keyword.preprocessor.warning.js }
      2: { name: keyword.preprocessor.error.js }
      3: { name: string.unquoted.preprocessor.message.js }
  prototype:
    patterns:
      - comment: e.g. Sound.prototype
        match: \s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)(?:(\?\.)|(\.))(proto|prototype)\b
        name: meta.prototype.access.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: entity.name.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: variable.language.prototype.js }
      - comment: e.g. Sound.prototype = { }
        match: \s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)(?:(\?\.)|(\.))(proto|prototype)\s*+=\s*+
        name: meta.prototype.declaration.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: entity.name.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: variable.language.prototype.js }
  punctuation:
    patterns:
      - include: '#semi-colon'
      - include: '#comma'
  punctuation-semicolon:
    match: ;
    name: punctuation.terminator.statement.js
  quasi:
    patterns:
      - include: languagebabel.ttlextension
      - begin: >-
          \s*+(?:(?:\b(css|injectGlobal|keyframes|createGlobalStyle|stylesheet)\b)|(?:(\bstyled)(?:(?:(\?\.)|(\.))\s*(\w+)))|(/\*
          CSS \*/))\s*((`))
        comment: Styled CSS tags
        contentName: source.inside-js.css.styled
        end: \s*((`))
        beginCaptures:
          1: { name: entity.name.tag.styledcss.js }
          2: { name: entity.name.tag.styledcss.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: entity.name.tag.styledcss.js }
          6: { name: string.quoted.template.styled.start.js }
          7: { name: punctuation.definition.quasi.begin.js }
        endCaptures:
          1: { name: string.quoted.template.styled.end.js }
          2: { name: punctuation.definition.quasi.end.js }
        patterns:
          - include: source.css.styled
      - begin: (?<!\.)\s*+(?:([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*(?:(\?\.)|(\.))\s*(extend))\s*((`))
        comment: Styled CSS tags
        contentName: source.inside-js.css.styled
        end: \s*((`))
        beginCaptures:
          1: { name: variable.other.class.js }
          2: { name: keyword.operator.existential.js }
          3: { name: keyword.operator.accessor.js }
          4: { name: entity.name.tag.styledcss.js }
          5: { name: string.quoted.template.styled.start.js }
          6: { name: punctuation.definition.quasi.begin.js }
        endCaptures:
          1: { name: string.quoted.template.styled.end.js }
          2: { name: punctuation.definition.quasi.end.js }
        patterns:
          - include: source.css.styled
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+(?:(\bstyled)|([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*(?:(\?\.)|(\.))\s*(withComponent))(?=\s*((\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))*\s*(`|\.extend`|$)))
        comment: Styled CSS tag functions
        end: (?=.)
        beginCaptures:
          1: { patterns: [{ include: '#function-name' }] }
          2: { name: variable.other.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { patterns: [{ include: '#function-name' }] }
        patterns:
          - include: '#round-brackets'
          - begin: \s*((`))
            contentName: source.inside-js.css.styled
            end: \s*((`))
            beginCaptures:
              1: { name: string.quoted.template.styled.start.js }
              2: { name: punctuation.definition.quasi.begin.js }
            endCaptures:
              1: { name: string.quoted.template.styled.end.js }
              2: { name: punctuation.definition.quasi.end.js }
            patterns:
              - include: source.css.styled
          - comment: Styled CSS tags
            match: \s*(\.)\s*(extend)(?=\s*`)
            captures:
              1: { name: keyword.operator.accessor.js }
              2: { name: entity.name.tag.styledcss.js }
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+(?:(\bstyled))(?=\s*((\((?>[^()"']|("(\\.|[^"])*+")++|('(\\.|[^'])*+')++|\g<-5>)*+\))*\s*\??\.\s*attrs\s*\())
        comment: Styled CSS tag functions
        end: (?=.)
        beginCaptures:
          1: { patterns: [{ include: '#function-name' }] }
        patterns:
          - include: '#round-brackets'
          - match: \s*(?:(\?\.)|(\.))\s*(attrs)
            captures:
              1: { name: keyword.operator.existential.js }
              2: { name: keyword.operator.accessor.js }
              3: { patterns: [{ include: '#function-name' }] }
          - begin: \s*((`))
            contentName: source.inside-js.css.styled
            end: \s*((`))
            beginCaptures:
              1: { name: string.quoted.template.styled.start.js }
              2: { name: punctuation.definition.quasi.begin.js }
            endCaptures:
              1: { name: string.quoted.template.styled.end.js }
              2: { name: punctuation.definition.quasi.end.js }
            patterns:
              - include: source.css.styled
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+(?:(\bstyled)\s*(?:(\?\.)|(\.))\s*([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*(?:(\?\.)|(\.))\s*(attrs|withConfig))(?=\s*\()
        comment: Styled CSS tag functions
        end: (?=.|\n)
        beginCaptures:
          1: { name: entity.name.tag.styledcss.js }
          2: { name: keyword.operator.existential.js }
          3: { name: keyword.operator.accessor.js }
          4: { name: entity.name.tag.styledcss.js }
          5: { name: keyword.operator.existential.js }
          6: { name: keyword.operator.accessor.js }
          7: { patterns: [{ include: '#function-name' }] }
        patterns:
          - include: '#round-brackets'
          - begin: \s*((`))
            contentName: source.inside-js.css.styled
            end: \s*((`))
            beginCaptures:
              1: { name: string.quoted.template.styled.start.js }
              2: { name: punctuation.definition.quasi.begin.js }
            endCaptures:
              1: { name: string.quoted.template.styled.end.js }
              2: { name: punctuation.definition.quasi.end.js }
            patterns:
              - include: source.css.styled
      - begin:
          \s*+(?:((Relay)(?:(\?\.)|(\.))(QL))|(gql|graphql|graphql\.experimental)|(/\*
          GraphQL \*/))\s*((`))
        comment:
          GraphQL ( Relay.QL ) supprt. Use two forms of scopes! fixes some
          themes
        end: \s*((`))
        beginCaptures:
          2: { name: variable.other.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: entity.name.tag.graphql.js }
          6: { name: entity.name.tag.graphql.js }
          7: { name: entity.name.tag.graphql.js }
          8: { name: string.quoted.template.js }
          9: { name: punctuation.definition.quasi.begin.js }
        endCaptures:
          1: { name: string.quoted.template.graphql.js }
          2: { name: punctuation.definition.quasi.end.js }
        patterns:
          - include: '#graphql'
      - begin: \s*+(?!\b(?:return|void)\b)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)?\s*((`))
        comment: Use two forms of scopes! fixes some themes
        contentName: string.quoted.template.js
        end: \s*((`))
        name: string.quasi.js
        beginCaptures:
          1: { name: entity.name.tag.js }
          2: { name: string.quoted.template.js }
          3: { name: punctuation.definition.quasi.begin.js }
        endCaptures:
          1: { name: string.quoted.template.js }
          2: { name: punctuation.definition.quasi.end.js }
        patterns:
          - include: '#quasi-embedded'
          - include: '#string-content'
  quasi-embedded:
    begin: (?<!\\)(\$\{)\s*
    end: \s*(\})((:)[-\w/.%#<^>+*=!]+)?
    name: entity.quasi.element.js
    beginCaptures:
      1: { name: punctuation.quasi.element.begin.js }
    endCaptures:
      1: { name: punctuation.quasi.element.end.js }
      2: { name: storage.type.format.js }
      3: { name: punctuation.separator.label.regexp }
    patterns:
      - include: '#core'
  quasi-embedded-regexp:
    patterns:
      - begin: (?<!\\)(\#\()\s*
        end: \s*(\))((:)[-\w/.%#<^>+*=!]+)?
        name: entity.quasi.element.js
        beginCaptures:
          1: { name: punctuation.quasi.element.begin.js }
        endCaptures:
          1: { name: punctuation.quasi.element.end.js }
          2: { name: storage.type.format.js }
          3: { name: punctuation.separator.label.regexp }
        patterns:
          - include: '#core'
      - begin: (?<!\\)(\#\[)\s*
        end: \s*(\])((:)[-\w/.%#<^>+*=!]+)?
        name: entity.quasi.element.js
        beginCaptures:
          1: { name: punctuation.quasi.element.begin.js }
        endCaptures:
          1: { name: punctuation.quasi.element.end.js }
          2: { name: storage.type.format.js }
          3: { name: punctuation.separator.label.regexp }
        patterns:
          - include: '#core'
      - begin: (?<!\\)(\#\{)\s*
        end: \s*(\})((:)[-\w/.%#<^>+*=!]+)?
        name: entity.quasi.element.js
        beginCaptures:
          1: { name: punctuation.quasi.element.begin.js }
        endCaptures:
          1: { name: punctuation.quasi.element.end.js }
          2: { name: storage.type.format.js }
          3: { name: punctuation.separator.label.regexp }
        patterns:
          - include: '#core'
      - comment: Accepts arbitrary expressions
        match: >-
          (?<!\\)(\#)((?:[?!:]:|::+|\(.*?\)|\[.*?\]|\{.*?\}|<.*?>|".*?"|'.*?'|`.*?`|[^,:;'"`(){}\[\]\p{Z}])*)((:)[-\w/.%#<^>+*=!]+)?
        captures:
          1: { name: punctuation.quasi.element.js }
          2: { patterns: [{ include: '#core' }] }
          3: { name: storage.type.format.js }
          4: { name: punctuation.separator.label.regexp }
  query-expression:
    patterns:
      - begin: (?<!\.)\s*+\b(from)\b\s*
        comment: from ... in
        end: \s*(in|of)\b
        beginCaptures:
          1: { name: keyword.query.js }
        endCaptures:
          1: { name: keyword.query.js }
        patterns:
          - include: '#let-clause'
          - include: '#core'
      - include: '#where-clause'
      - include: '#join-clause'
      - include: '#join-keywords'
      - include: '#order-direction'
      - include: '#order-clause'
      - include: '#group-clause'
      - include: '#select-clause'
      - include: '#order-clause'
    repository:
      group-clause:
        begin: (?<!\.)\s*+\b(group)\b\s*
        comment: group ... by
        end: \s*(by)\b
        beginCaptures:
          1: { name: keyword.query.js }
        endCaptures:
          1: { name: keyword.query.js }
        patterns:
          - include: '#let-clause'
          - include: '#core'
      join-clause:
        begin: (?<!\.)\s*+\b(join)\b\s*
        comment: group ... by
        end: \s*(in|of)\b
        beginCaptures:
          1: { name: keyword.query.js }
        endCaptures:
          1: { name: keyword.query.js }
        patterns:
          - include: '#let-clause'
          - include: '#core'
      join-keywords:
        match: (?<!\.)\s*+\b(equals?|[io]nto)\b\s*
        name: keyword.query.js
      let-clause:
        comment: override let keyword
        match: (?<!\.)\s*+\b(const|con|let|var|val)\b\s*
        name: storage.type.js
      order-clause:
        match: (?<!\.)\s*+\b(order\s*(by)?)\b\s*
        name: keyword.query.js
      order-direction:
        match: (?<!\.)\s*+\b(ascending|descending)\b\s*
        name: keyword.query.js
      select-clause:
        match: (?<!\.)\s*+\b(select)\b\s*
        name: keyword.query.js
      where-clause:
        match: (?<!\.)\s*+\b(where)\b\s*
        name: keyword.query.js
  regex-group-name:
    patterns:
      - include: '#jsx-tag-attributes'
      - include: '#support'
      - include: '#keywords'
      - include: '#modifiers'
      - include: '#method-name'
      - include: '#function-name'
      - include: '#operator'
      - include: '#operators'
  regexp:
    begin: >-
      (?<=^|[^/\w\p{L}\p{N}\p{M}\p{Sc}])\s*+([[:alnum:]]*)(/)(?![*/])(?=.*/[[:alnum:]]*\s*($|[,;)}\]]|\.[\w\p{L}\p{N}\p{Sc}]))
    comment: Updated to support Perl regex syntax
    end: (/)(?:((?:\\.|.)*?)(/))?([[:alnum:]]*)
    name: string.regexp.js
    beginCaptures:
      1: { name: keyword.modifier.js }
      2: { name: punctuation.definition.string.begin.js }
    endCaptures:
      1: { name: punctuation.definition.string.end.js }
      2:
        {
          name: string.quoted.js,
          patterns:
            [
              {
                match: '\\[1-9]\d*',
                name: keyword.other.back-reference.regexp,
              },
              {
                begin: (\\<),
                end: \s*(>),
                name: keyword.other.back-reference.regexp,
                beginCaptures:
                  { 1: { name: keyword.other.back-reference.regexp } },
                endCaptures:
                  { 1: { name: keyword.other.back-reference.regexp } },
                patterns: [{ include: '#regex-group-name' }],
              },
              { include: '#string-content' },
            ],
        }
      3: { name: punctuation.definition.string.end.js }
      4: { name: keyword.other.flag.js }
    patterns:
      - include: '#regexp-patterns'
  regexp-patterns:
    patterns:
      - include: '#quasi-embedded-regexp'
      - match: \|
        name: keyword.operator.or.regexp
      - match: (?i)\\[abyz]|\^|\$
        name: keyword.control.anchor.regexp
      - comment: Suppress ? in (? sequence
        match: (\\\()(?:(\?)|(\+)|(\*))
        captures:
          1: { name: constant.character.escape.other.regexp }
          2: { name: keyword.operator.quantifier.lazy.regexp }
          3: { name: keyword.operator.quantifier.eager.regexp }
          4: { name: keyword.operator.quantifier.greedy.regexp }
      - begin: (?<=\()(\?\{)
        comment: Embedded code callouts
        end: \s*(\})([<*>])?(?:(\[)(.*)(\]))?
        name: keyword.operator.callout.regexp
        beginCaptures:
          1: { name: keyword.operator.callout.regexp }
          2: { name: keyword.operator.callout.regexp }
        endCaptures:
          1: { name: keyword.operator.callout.regexp }
          2: { name: keyword.operator.range.regexp }
          3: { name: punctuation.definition.tag.regexp }
          4: { patterns: [{ include: $self }] }
          5: { name: punctuation.definition.tag.regexp }
        patterns:
          - include: $self
      - begin: (?<=\()(\?<)
        comment: Named groups
        end: \s*(>)
        name: punctuation.definition.group.named.regexp
        beginCaptures:
          1: { name: punctuation.definition.group.named.regexp }
        endCaptures:
          1: { name: punctuation.definition.group.named.regexp }
        patterns:
          - include: '#regex-group-name'
      - match: (?<=\()(\?(?:([+-]?\d+?)|([A-Z\d]+(?:-[A-Z\d]+)?)|([a-z\d]+(?:-[a-z\d]+)?)))\s*(:)?
        name: keyword.control.back-reference.regexp
        captures:
          1: { name: keyword.other.back-reference.regexp }
          2: { name: entity.name.function.method.regexp }
          3: { name: keyword.control.recursion.regexp }
          4: { name: storage.type.regexp }
          5: { name: punctuation.separator.label.regexp }
      - match: (?<=\?\()(?:([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)|([+-]?\d*))(?=\))
        name: keyword.control.conditional.group.regexp
        captures:
          1: { name: variable.other.regexp }
          2: { name: keyword.other.back-reference.regexp }
      - match: \\[1-9]\d*
        name: keyword.other.back-reference.regexp
      - match: \{(\s*\d*\s*(?:,?\s*\d*\s*)*)\}\??
        name: keyword.operator.quantifier.regexp
      - begin: (\\Q)
        contentName: string.quoted.double.regexp
        end: (\\E)
        name: string.quoted.raw.regexp
        beginCaptures:
          1: { name: punctuation.definition.string.begin.regexp }
        endCaptures:
          1: { name: punctuation.definition.string.end.regexp }
      - begin: (\\q)
        contentName: string.quoted.single.regexp
        end: (\\e)
        name: string.quoted.regexp
        beginCaptures:
          1: { name: punctuation.definition.string.begin.regexp }
        endCaptures:
          1: { name: punctuation.definition.string.end.regexp }
        patterns:
          - include: '#string-content'
      - begin: \((\?(?:&|P(=))(?:([+-]?\d+)|([_\\p{L}\p{Nl}][_\\d\p{L}\p{M}\p{N}\p{Pc}\u200C\u200D]*)|([+-]?\d*)))(:)?
        end: \s*(\))
        name: meta.group.regexp
        beginCaptures:
          0: { name: punctuation.definition.group.regexp }
          1: { name: keyword.other.back-reference.regexp }
          2: { name: keyword.operator.assignment.regexp }
          3: { name: entity.name.function.method.regexp }
          4: { name: variable.other.regexp }
          5: { name: punctuation.separator.label.regexp }
        endCaptures:
          1: { name: punctuation.definition.group.regexp }
        patterns:
          - include: '#regexp-patterns'
      - begin: \(([*+])
        end: \s*(\))
        name: constant.other.pcre.regexp
        beginCaptures:
          0: { name: punctuation.definition.group.regexp }
          1: { name: keyword.generator.regexp }
        endCaptures:
          1: { name: punctuation.definition.group.regexp }
        patterns:
          - include: '#mini-expression'
      - begin: (\()(\?#)
        contentName: comment.line.number-sign.regexp
        end: \s*(\))
        name: comment.line.number-sign.regexp
        beginCaptures:
          1: { name: punctuation.definition.group.regexp }
          2: { name: punctuation.definition.comment.regexp }
        endCaptures:
          1: { name: punctuation.definition.group.regexp }
        patterns:
          - match: \\.
            name: comment.line.number-sign.regexp
      - begin: (\()((\?=)|(\?!)|(\?<=)|(\?<!)|(\?>)|(?:(\?))(?=[(|])|(\?~))
        end: \s*(\))
        name: meta.group.regexp
        beginCaptures:
          1: { name: punctuation.definition.group.regexp }
          2: { name: punctuation.definition.group.assertion.regexp }
          3: { name: meta.assertion.look-ahead.regexp }
          4: { name: meta.assertion.negative-look-ahead.regexp }
          5: { name: meta.assertion.look-behind.regexp }
          6: { name: meta.assertion.negative-look-behind.regexp }
          7: { name: meta.group.atomic.regexp }
          8: { name: meta.group.branch.regexp }
          9: { name: meta.group.absent.regexp }
        endCaptures:
          1: { name: punctuation.definition.group.regexp }
        patterns:
          - include: '#regexp-patterns'
      - begin: \((?:(\?:)|(?:\?<(.*?)>))?
        end: \s*(\))
        name: meta.group.regexp
        beginCaptures:
          0: { name: punctuation.definition.group.regexp }
          1: { name: punctuation.definition.group.no-capture.regexp }
          2: { patterns: [{ include: '#regex-group-name' }] }
        endCaptures:
          0: { name: punctuation.definition.group.regexp }
        patterns:
          - include: '#regexp-patterns'
      - begin: (\\k<)
        end: \s*(>)
        name: keyword.other.back-reference.regexp
        beginCaptures:
          1: { name: keyword.other.back-reference.regexp }
        endCaptures:
          1: { name: keyword.other.back-reference.regexp }
        patterns:
          - include: '#jsx-tag-attributes'
          - include: '#support'
          - include: '#keywords'
          - include: '#modifiers'
          - include: '#method-name'
          - include: '#function-name'
          - include: '#operator'
          - include: '#operators'
      - begin: (\\g<)
        end: \s*(>)
        name: keyword.other.subroutine.regexp
        beginCaptures:
          1: { name: keyword.other.subroutine.regexp }
        endCaptures:
          1: { name: keyword.other.subroutine.regexp }
        patterns:
          - include: '#jsx-tag-attributes'
          - include: '#support'
          - include: '#keywords'
          - include: '#modifiers'
          - include: '#method-name'
          - include: '#function-name'
          - include: '#operator'
          - include: '#operators'
      - begin: (\[)(\^)?
        end: \s*(\])
        name: constant.other.character-class.set.regexp
        beginCaptures:
          1: { name: punctuation.definition.character-class.regexp }
          2: { name: keyword.operator.negation.regexp }
        endCaptures:
          1: { name: punctuation.definition.character-class.regexp }
        patterns:
          - include: '#comments'
          - match: '--'
            name: keyword.operator.optional.regexp
          - include: '#regex-character-class'
          - include: '#regex-character-range'
          - include: '#regex-character-set'
      - begin: (\{)
        end: \s*(\})
        name: meta.brace.curly.litobj.regexp
        patterns:
          - include: '#regexp-patterns'
      - include: '#regex-character-class'
      - comment: Remaining backslash tokens
        match: (?i)\\(?:(M)|(K)|(G)|(X))
        captures:
          1: { name: keyword.control.anchor.regexp }
          2: { name: keyword.control.keepout.regexp }
          3: { name: keyword.control.search.regexp }
          4: { name: constant.character.unicode.regexp }
      - match: \\.
        name: constant.character.escape.other.regexp
      - match: (?<=[*+?}])(?:(\?)|(\+)|(\*))
        captures:
          1: { name: keyword.operator.modifier.lazy.regexp }
          2: { name: keyword.operator.modifier.eager.regexp }
          3: { name: keyword.operator.modifier.greedy.regexp }
      - match: (\?)|(\+)|(\*)|(;)|(,)|(:)(?!:)|(=+>|~+>)|(['"])|(`)
        captures:
          1: { name: keyword.operator.quantifier.lazy.regexp }
          2: { name: keyword.operator.quantifier.eager.regexp }
          3: { name: keyword.operator.quantifier.greedy.regexp }
          4: { name: punctuation.terminator.statement.js }
          5: { name: meta.delimiter.comma.js }
          6: { name: meta.switch.js keyword.operator.js }
          7: { name: storage.type.function.arrow.js }
          8: { name: punctuation.definition.string.begin.js }
          9: { name: punctuation.definition.quasi.begin.js }
      - include: '#operator'
      - include: '#operators'
      - include: '#support-properties'
      - include: '#number'
      - include: '#variable'
      - include: '#comments'
    repository:
      regex-character-class:
        patterns:
          - match: |
              \\
            name: constant.character.escape.newline.regexp
          - begin: (?i)(\\p{)
            end: \s*(})
            name: constant.other.character-class.unicode.regexp
            beginCaptures:
              1: { name: constant.other.character-class.unicode.regexp }
            endCaptures:
              1: { name: constant.other.character-class.unicode.regexp }
            patterns:
              - include: '#implicit-call'
              - include: '#regexp-patterns'
          - match: \\x\h{2}|\\U\h{8}
            name: constant.character.escape.hex.regexp
          - match: \\[cCmM][[:alpha:]]|\R
            name: constant.character.control.regexp
          - match: \\[pP][[:alpha:]]|\\O
            name: constant.other.character-class.unicode.regexp
          - match: (?i)\\[ci]
            name: constant.other.character-class.xml.regexp
          - match: \\[ux](({[\h\s]+\})|\h{4})
            name: constant.character.escape.unicode.regexp
          - begin: (?i)(\\f{)
            end: \s*(})
            name: constant.character.entity.named.js
            beginCaptures:
              1: { name: constant.character.entity.named.js }
            endCaptures:
              1: { name: constant.character.entity.named.js }
            patterns:
              - include: '#implicit-call'
              - include: '#regexp-patterns'
          - match: \.|\\[wsdvntluh]
            name: constant.other.character-class.regexp
          - match: \\[WSDVNTLUH]
            name: constant.other.character-class.negated.regexp
          - match: \\N{[\w\s]+}
            name: constant.character.escape.unicode.name.regexp
          - match: \\o{[0-7]+}
            name: constant.character.escape.octal.regexp
          - match: \\['"\\nrtfve0`]
            name: constant.character.escape.js
      regex-character-range:
        patterns:
          - match: >-
              (?:.|(\\(?:[0-7]{3}|x\h{2}|u\h{4}))|(\\c[a-zA-Z])|(\\.))\-(?:[^\]\\]|(\\(?:[0-7]{3}|x\h{2}|u\h{4}))|(\\c[a-zA-Z])|(\\.))
            name: constant.other.character-class.range.regexp
            captures:
              1: { name: constant.character.numeric.regexp }
              2: { name: constant.character.control.regexp }
              3: { name: constant.character.escape.backslash.regexp }
              4: { name: constant.character.numeric.regexp }
              5: { name: constant.character.control.regexp }
              6: { name: constant.character.escape.backslash.regexp }
      regex-character-set:
        patterns:
          - match: '[|]{2}'
            name: keyword.operator.union.regexp
          - match: '&{2}'
            name: keyword.operator.intersection.regexp
          - match: \^{2}
            name: keyword.operator.only.regexp
          - match: ~{2}
            name: keyword.operator.maybe.regexp
          - match: \.
            name: constant.other.character-class.set.regexp
          - begin: (\[=)
            end: \s*(=\])
            name: constant.other.character-class.posix.regexp
            beginCaptures:
              1: { name: punctuation.definition.character-class.posix.regexp }
            endCaptures:
              1: { name: punctuation.definition.character-class.posix.regexp }
            patterns:
              - include: '#comments'
              - include: '#variables'
              - include: '#operators'
          - begin: (\[\.)
            end: \s*(\.\])
            name: constant.other.character-class.posix.regexp
            beginCaptures:
              1: { name: punctuation.definition.character-class.posix.regexp }
            endCaptures:
              1: { name: punctuation.definition.character-class.posix.regexp }
            patterns:
              - include: '#comments'
              - include: '#variables'
              - include: '#operators'
          - begin: (\[:)
            end: \s*(:\])
            name: constant.other.character-class.posix.regexp
            beginCaptures:
              1: { name: punctuation.definition.character-class.posix.regexp }
            endCaptures:
              1: { name: punctuation.definition.character-class.posix.regexp }
            patterns:
              - include: '#comments'
              - include: '#variables'
              - include: '#operators'
          - begin: (\[)(\^)?
            end: \s*(\])
            name: constant.other.character-class.set.regexp
            beginCaptures:
              1: { name: punctuation.definition.character-class.regexp }
              2: { name: keyword.operator.negation.regexp }
            endCaptures:
              1: { name: punctuation.definition.character-class.regexp }
            patterns:
              - include: '#comments'
              - match: '--'
                name: keyword.operator.optional.regexp
              - include: '#regex-character-range'
              - include: '#regex-character-class'
              - include: '#regex-character-set'
              - match: \\.
                name: constant.character.escape.other.regexp
          - match: \\.
            name: constant.character.escape.other.regexp
  round-brackets:
    patterns:
      - begin: \s*+(#\()
        end: \s*(\))
        beginCaptures:
          1: { name: meta.brace.round.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#core'
      - begin: \s*+(\()
        end: \s*(\))
        beginCaptures:
          1: { name: meta.brace.round.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#core'
  semi-colon:
    patterns:
      - match: \s*+(;)
        captures:
          1: { name: punctuation.terminator.statement.js }
  special-comments-conditional-compilation:
    patterns:
      - begin: \s*+((/\*))(?=@)
        contentName: comment.block.conditional.js
        end: \s*\*/
        captures:
          1: { name: comment.block.conditional.js }
          2: { name: punctuation.definition.comment.js }
        endCaptures:
          1: { name: keyword.control.conditional.js }
          2: { name: punctuation.definition.keyword.js }
        patterns:
          - match: \s*+/\*
            name: punctuation.definition.comment.js
          - include: $self
      - match: \s*+(?!@)(@)(if|elif|else|end|ifdef|endif|cc_on|set)\b
        name: keyword.control.conditional.js
        captures:
          1: { name: punctuation.definition.keyword.js }
      - match: >-
          \s*+(?!@)(@)(_win32|_win16|_mac|_alpha|_x86|_mc680x0|_PowerPC|_jscript|_jscript_build|_jscript_version|_debug|_fast|[a-zA-Z]\w+)
        name: variable.other.conditional.js
        captures:
          1: { name: punctuation.definition.variable.js }
  special-operators:
    patterns:
      - include: '#esnext-pipeline'
      - begin: \s*((:\?[<=>]?))\s*
        comment: Type assertion/conversion/coercion/casting operator
        end: (?=[^&|^~<>!?\p{L}\p{N}\p{Sc}\[\]{}_])
        beginCaptures:
          1: { name: keyword.operator.type.js }
        endCaptures:
          1: { patterns: [{ include: '#core' }] }
        patterns:
          - include: '#flowtype-parse-types'
      - begin: \s*+(\?)(?!\.[^\d]|[?=])(?=\s)
        comment:
          'ternary operator - make sure end : is consumed to avoid mistake as
          flow type'
        end: \s*(:)((?=::)|(?!:|=))
        beginCaptures:
          1: { name: keyword.operator.ternary.js }
        endCaptures:
          1: { name: keyword.operator.ternary.js }
        patterns:
          - begin: \s*+(?=([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*:)
            end: \s*(?=:)
            patterns:
              - include: '#language-constant'
              - include: '#variable'
          - include: '#core'
      - begin: (\$)\s*
        end: \s*(\$)
        name: keyword.operator.function.js
        beginCaptures:
          1: { name: keyword.operator.js }
        endCaptures:
          1: { name: keyword.operator.js }
        patterns:
          - include: '#function-name'
          - include: '#method-name'
          - include: '#core'
  square-brackets:
    patterns:
      - begin: \s*+(#\[)
        end: \s*(\])
        beginCaptures:
          1: { name: meta.brace.square.js }
        endCaptures:
          1: { name: meta.brace.square.js }
        patterns:
          - name: punctuation.separator.slice.js
            match: ':'
          - include: '#object'
          - include: '#core'
      - begin: \s*+(\[)
        end: \s*(\])
        beginCaptures:
          1: { name: meta.brace.square.js }
        endCaptures:
          1: { name: meta.brace.square.js }
        patterns:
          - name: punctuation.separator.slice.js
            match: ':'
          - include: '#object'
          - include: '#core'
  string:
    patterns:
      - begin: \s*+(('))
        contentName: string.quoted.single.js
        end: |-
          \s*+(?:(('))|(
          ))
        beginCaptures:
          1: { name: string.quoted.single.js }
          2: { name: punctuation.definition.string.begin.js }
        endCaptures:
          1: { name: string.quoted.single.js }
          2: { name: punctuation.definition.string.end.js }
          3: { name: invalid.illegal.newline.js }
        patterns:
          - include: '#string-content'
      - begin: \s*+(("))
        contentName: string.quoted.double.js
        end: |-
          \s*+(?:(("))|(
          ))
        beginCaptures:
          1: { name: string.quoted.double.js }
          2: { name: punctuation.definition.string.begin.js }
        endCaptures:
          1: { name: string.quoted.double.js }
          2: { name: punctuation.definition.string.end.js }
          3: { name: invalid.illegal.newline.js }
        patterns:
          - include: '#string-content'
  string-content:
    patterns:
      - include: '#new-operators'
      - match: |
          \\
        name: constant.character.escape.newline.js
      - begin: \\[hHN]{
        end: '}'
        name: constant.character.entity.named.js
        beginCaptures:
          1: { name: constant.character.entity.named.js }
        endCaptures:
          1: { name: constant.character.entity.named.js }
        patterns:
          - include: '#implicit-call'
          - include: '#regexp-patterns'
      - match: \\[0-7]{1,3}|\\o{[0-7\s.,:;]*?}
        name: constant.character.escape.octal.js
      - match: \\['"\\anrtbfve0$%#`]
        name: constant.character.escape.js
      - match: \\u({[\h\s.,:;]*?}|\h{4})|\\U\h{8}
        name: constant.character.escape.unicode.js
      - match: \\x\h{2}
        name: constant.character.escape.hex.js
      - match: '''''|""|``'
        name: constant.character.escape.js
      - match: \\.
        name: constant.character.escape.newline.js
      - include: '#quasi-embedded'
  support:
    patterns:
      - match: |
          (?x) (?<!\.) \s*+ \b(
            (
              Arithmetic | Assertion | Attribute | Buffer | BlockingIO
              | BrokenPipe | ChildProcess
              | (Connection (Aborted | Refused | Reset)?)
              | EOF | Environment | FileExists | FileNotFound
              | FloatingPoint | IO | Import | Indentation | Index | Interrupted
              | IsADirectory | NotADirectory | Permission | ProcessLookup
              | Timeout
              | Key | Lookup | Memory | Name | NotImplemented | OS | Overflow
              | Reference | Runtime | Recursion | Syntax | System
              | Tab | Type | UnboundLocal | Unicode(Encode|Decode|Translate)?
              | Value | Windows | ZeroDivision | ModuleNotFound
            ) Error
          |
            ((Pending)?Deprecation | Runtime | Syntax | User | Future | Import
              | Unicode | Bytes | Resource
            )? Warning
          |
            SystemExit | Stop(Async)?Iteration
            | KeyboardInterrupt
            | GeneratorExit | (Base)?Error
          )\b
        name: support.class.error.saga
      - applyEndPatternLast: 1
        begin: >-
          \s*+\b(WeakSet|WeakMap|URIError|Uint8ClampedArray|Uint8Array|Uint32Array|Uint16Array|TypeError|TypedArray|SyntaxError|Symbol|String|SharedArrayBuffer|Set|RegExp|Reflect|ReferenceError|RangeError|Proxy|Promise|Object|Number|Math|Map|JSON|InternalError|Int8Array|Int32Array|Int16Array|GeneratorFunction|Generator|Function|Float64Array|Float32Array|EvalError|Error|Date|DataView|Boolean|Atomics|ArrayBuffer|Array)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.class.builtin.saga }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          \s*+\b((SIMD)((\.)(Uint8x16|Uint32x4|Uint16x8|Int8x16|Int32x4|Int16x8|Float64x2|Float32x4|Bool8x16|Bool64x2|Bool32x4|Bool16x8))?)\b
        end: (?=.)
        beginCaptures:
          2: { name: support.class.builtin.saga }
          4: { name: keyword.operator.accessor.saga }
          5: { name: support.class.builtin.saga }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: \s*+\b((Intl)((\.)(NumberFormat|DateTimeFormat|Collator))?)\b
        end: (?=.)
        beginCaptures:
          2: { name: support.class.builtin.saga }
          4: { name: keyword.operator.accessor.saga }
          5: { name: support.class.builtin.saga }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<!\.)\s*+\b((Eval|Range|Reference|Syntax|Type|URI)?Error)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.class.error.saga }
        patterns:
          - include: '#round-brackets'
      - match: (?<!\.)\s*+\b(debugger)\b
        captures:
          1: { name: keyword.other.js }
      - match: (?<!\.)\s*+\b(document|window)\b
        captures:
          1: { name: support.type.object.dom.js }
      - match: >-
          \s*+\b(ELEMENT_NODE|ATTRIBUTE_NODE|TEXT_NODE|CDATA_SECTION_NODE|ENTITY_REFERENCE_NODE|ENTITY_NODE|PROCESSING_INSTRUCTION_NODE|COMMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE|DOCUMENT_FRAGMENT_NODE|NOTATION_NODE|INDEX_SIZE_ERR|DOMSTRING_SIZE_ERR|HIERARCHY_REQUEST_ERR|WRONG_DOCUMENT_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR|NOT_SUPPORTED_ERR|INUSE_ATTRIBUTE_ERR)\b
        captures:
          1: { name: support.constant.dom.js }
      - applyEndPatternLast: 1
        begin: (?<!\.)\s*+\b(console)(?:(\.)(warn|info|log|error|time|timeEnd|assert))?\b
        end: (?=.)
        beginCaptures:
          1: { name: support.type.object.console.js }
          2: { name: keyword.operator.accessor.js }
          3: { name: support.function.console.js }
        patterns:
          - include: '#round-brackets'
      - match: >-
          (?<!\.)\s*+\b(process)(?:(\.)(stdout|stderr|stdin|argv|execPath|execArgv|env|exitCode|version|versions|config|pid|title|arch|platform|mainModule))?\b
        captures:
          1: { name: support.type.object.process.js }
          2: { name: keyword.operator.accessor.js }
          3: { name: support.type.object.process.js }
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+\b(process)(?:(\.)(abort|chdir|cwd|exit|getgid|setgid|getuid|setuid|setgroups|getgroups|initgroups|kill|memoryUsage|nextTick|umask|uptime|hrtime))?\b
        end: (?=.)
        beginCaptures:
          1: { name: support.type.object.process.js }
          2: { name: keyword.operator.accessor.js }
          3: { name: support.function.process.js }
        patterns:
          - include: '#round-brackets'
      - match: (((?<!\.)\s*+\bmodule\.((?<!\,)exports|id|require|parent|filename|loaded|children)|exports))\b
        captures:
          1: { name: support.type.object.module.js }
          2: { name: keyword.operator.accessor.js }
          3: { name: support.type.object.module.js }
      - match: (?<!\.)\s*+\b(global|GLOBAL|root|__dirname|__filename)\b
        captures:
          1: { name: support.type.object.node.js }
      - applyEndPatternLast: 1
        begin: >-
          \s*+\b(Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream|Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.class.node.js }
        patterns:
          - include: '#round-brackets'
      - begin: \s*+({{)
        contentName: meta.tag.mustache.js
        end: (\s*}})
        captures:
          1: { name: meta.tag.mustache.js }
      - include: '#support-objects'
  support-functions:
    patterns:
      - include: '#support-python'
      - include: '#support-php'
  support-methods:
    patterns:
      - applyEndPatternLast: 1
        begin: >-
          (?<!\.)\s*+\b(decodeURI|decodeURIComponent|encodeURI|encodeURIComponent|escape|eval|isFinite|isNaN|parseFloat|parseInt|unescape)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(add|append|at|average|chunk|clone|compact|concat|construct|copyWithin|count|create|difference|differenceBy|differenceWith|drop|dropRight|dropRightWhile|dropWhile|entries|every|exclude|fill|filter|find|findIndex|findLastIndex|first|flat|flatMap|flatten|flattenDeep|flattenDepth|fnFromIndex|forEach|from|fromPairs|groupBy|head|includes|indexOf|inGroups|inGroupsOf|initial|insert|intersect|intersection|intersectionBy|intersectionWith|isArray|isEmpty|isEqual|join|keys|last|lastIndexOf|least|map|max|median|min|most|none|nth|object|of|pop|pull|pullAll|pullAllBy|pullAllWith|pullAt|push|range|reduce|reduceRight|remove|removeAt|rest|reverse|sample|shift|shuffle|slice|some|sort|sortBy|sortedIndex|sortedIndexBy|sortedIndexOf|sortedLastIndex|sortedLastIndexBy|sortedLastIndexOf|sortedUniq|sortedUniqBy|splice|subtract|sum|tail|take|takeRight|takeRightWhile|takeWhile|to|toLocaleString|toSource|toString|union|unionBy|unionWith|uniq|uniqBy|unique|uniqWith|unshift|unzip|unzipWith|values|without|xor|xorBy|xorWith|zip|zipObject|zipObjectDeep|zipWith)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.array.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(add|and|clamp|clone|compareExchange|contains|dateUnit|every|exchange|intersect|isLockFree|isValid|load|notify|or|span|store|sub|toArray|toString|union|wait|xor)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.atomics.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(asIntN|asUintN|toLocaleString|toString|valueOf)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.bigint.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(toSource|toString|valueOf)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.boolean.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(contains|countBy|each|eachRight|every|filter|find|findLast|findWhere|flatMap|flatMapDeep|flatMapDepth|forEach|forEachRight|groupBy|includes|indexBy|invoke|invokeMap|keyBy|map|max|min|orderBy|partition|pluck|reduce|reduceRight|reject|sample|sampleSize|shuffle|size|some|sortBy|toArray|where)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.collection.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(getBigInt64|getBigUint64|getFloat32|getFloat64|getInt16|getInt32|getInt8|getUint16|getUint32|getUint8|setBigInt64|setBigUint64|setFloat32|setFloat64|setInt16|setInt32|setInt8|setUint16|setUint32|setUint8)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.dataview.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(addLocale|addUnits|advance|beginningOfISOWeek|beginningOfUnit|clone|create|daysInMonth|endOfISOWeek|endOfUnit|format|full|get|getAllLocaleCodes|getAllLocales|getDate|getDay|getFullYear|getHours|getISOWeek|getLocale|getMilliseconds|getMinutes|getMonth|getOption|getSeconds|getTime|getTimezoneOffset|getUTCDate|getUTCDay|getUTCFullYear|getUTCHours|getUTCMilliseconds|getUTCMinutes|getUTCMonth|getUTCOffset|getUTCSeconds|getUTCWeekday|getWeekday|getYear|is|isAfter|isBefore|isBetween|isDay|isFuture|isLastUnit|isLeapYear|isNextUnit|iso|isPast|isThisUnit|isUTC|isValid|long|medium|now|parse|range|relative|relativeTo|removeLocale|reset|rewind|set|setDate|setFullYear|setHours|setISOWeek|setLocale|setMilliseconds|setMinutes|setMonth|setOption|setSeconds|setTime|setUTC|setUTCDate|setUTCFullYear|setUTCHours|setUTCMilliseconds|setUTCMinutes|setUTCMonth|setUTCSeconds|setWeekday|setYear|short|toDateString|toGMTString|toISOString|toJSON|toLocaleDateString|toLocaleString|toLocaleTimeString|toSource|toString|toTimeString|toUTCString|unitsAgo|unitsFromNow|unitsSince|unitsUntil|UTC|valueOf)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.date.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(__|add|addIndex|adjust|after|all|allPass|always|and|andThen|any|anyPass|ap|aperture|append|apply|applySpec|applyTo|ary|ascend|assoc|assocPath|before|binary|bind|bindAll|bindKey|both|call|cancel|chain|clamp|clone|comparator|complement|compose|composeK|composeP|composeWith|concat|cond|construct|constructN|contains|converge|countBy|curry|curryN|curryRight|debounce|dec|defaultTo|defer|delay|descend|difference|differenceWith|dissoc|dissocPath|divide|drop|dropLast|dropLastWhile|dropRepeats|dropRepeatsWith|dropWhile|either|empty|endsWith|eqBy|eqProps|equals|every|evolve|F|filter|find|findIndex|findLast|findLastIndex|flatten|flip|forEach|forEachObjIndexed|fromPairs|groupBy|groupWith|gt|gte|has|hasIn|hasPath|head|identical|identity|ifElse|inc|includes|indexBy|indexOf|init|innerJoin|insert|insertAll|intersection|intersperse|into|invert|invertObj|invoker|is|isEmpty|isNil|join|juxt|keys|keysIn|last|lastIndexOf|lazy|length|lens|lensIndex|lensPath|lensProp|lift|liftN|lock|lt|lte|map|mapAccum|mapAccumRight|mapObjIndexed|match|mathMod|max|maxBy|mean|median|memoize|memoizeWith|merge|mergeAll|mergeDeepLeft|mergeDeepRight|mergeDeepWith|mergeDeepWithKey|mergeLeft|mergeRight|mergeWith|mergeWithKey|min|minBy|modulo|move|multiply|nAry|negate|none|not|nth|nthArg|o|objOf|of|omit|once|or|otherwise|over|overArgs|pair|partial|partialRight|partition|path|pathEq|pathOr|paths|pathSatisfies|pick|pickAll|pickBy|pipe|pipeK|pipeP|pipeWith|pluck|prepend|product|project|prop|propEq|propIs|propOr|props|propSatisfies|range|rearg|reduce|reduceBy|reduced|reduceRight|reduceWhile|reject|remove|repeat|replace|rest|restArguments|reverse|scan|sequence|set|slice|sort|sortBy|sortWith|split|splitAt|splitEvery|splitWhen|spread|startsWith|subtract|sum|symmetricDifference|symmetricDifferenceWith|T|tail|take|takeLast|takeLastWhile|takeWhile|tap|test|throttle|thunkify|times|toLower|toPairs|toPairsIn|toSource|toString|toUpper|transduce|transpose|traverse|trim|tryCatch|type|unapply|unary|uncurryN|unfold|union|unionWith|uniq|uniqBy|uniqWith|unless|unnest|until|update|useWith|values|valuesIn|view|when|where|whereEq|without|wrap|xor|xprod|zip|zipObj|zipWith)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.function.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(next|return|throw)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.generator.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(chain|parse|stringify|value)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.json.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(castArray|clone|cloneDeep|cloneDeepWith|cloneWith|conformsTo|eq|gt|gte|isArguments|isArray|isArrayBuffer|isArrayLike|isArrayLikeObject|isBoolean|isBuffer|isDate|isElement|isEmpty|isError|iSetual|iSetualWith|isFinite|isFunction|isInteger|isLength|isMap|isMatch|isMatchWith|isNaN|isNative|isNil|isNull|isNumber|isObject|isObjectLike|isPlainObject|isProxy|isRegExp|isSafeInteger|isSet|isString|isSymbol|isUndefined|isWeakMap|isWeakSet|lt|lte|toArray|toFinite|toInteger|toLength|toNumber|toPlainObject|toSafeInteger|toString)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.lang.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(clear|delete|entries|forEach|get|has|keys|set|values)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.map.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(abs|acos|acosh|acot|acoth|acsc|acsch|add|and|apply|arg|asec|asech|asin|asinh|atan|atan2|atanh|bellNumbers|bin|bitAnd|bitNot|bitOr|bitXor|catalan|cbrt|ceil|clone|clz32|column|combinations|combinationsWithRep|compare|compareNatural|compareText|compile|composition|concat|conj|cos|cosh|cot|coth|count|cross|csc|csch|ctranspose|cube|deepEqual|derivative|det|diag|diff|distance|divide|dot|dotDivide|dotMultiply|dotPow|eigs|equal|equalText|erf|evaluate|exp|expm|expm1|factorial|filter|fix|flatten|floor|forEach|format|fround|gamma|gcd|getMatrixDataType|hasNumericValue|help|hex|hypot|identity|im|imul|intersect|inv|isInteger|isNaN|isNegative|isNumeric|isPositive|isPrime|isZero|kldivergence|kron|larger|largerEq|lcm|leftShift|log|log10|log1p|log2|lsolve|lup|lusolve|mad|map|max|maxBy|mean|meanBy|median|min|minBy|mod|mode|multinomial|multiply|norm|not|nthRoot|nthRoots|numeric|oct|ones|or|parser|partitionSelect|permutations|pickRandom|pow|print|prod|qr|quantileSeq|random|randomInt|range|rationalize|re|reshape|resize|rightArithShift|rightLogShift|rotate|rotationMatrix|round|row|sec|sech|setCartesian|setDifference|setDistinct|setIntersect|setIsSubset|setMultiplicity|setPowerset|setSize|setSymDifference|setUnion|sign|simplify|sin|sinh|size|slu|smaller|smallerEq|sort|sqrt|sqrtm|square|squeeze|std|stirlingS2|subset|subtract|sum|sumBy|tan|tanh|to|trace|transpose|trunc|typeOf|unaryMinus|unaryPlus|unequal|usolve|variance|xgcd|xor|zeros)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.math.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(abbr|bytes|cap|ceil|chr|clamp|dateUnit|dateUnitAfter|dateUnitAgo|dateUnitBefore|dateUnitFromNow|downto|duration|floor|format|hex|inRange|isEven|isFinite|isInteger|isMultipleOf|isNaN|isOdd|isSafeInteger|log|math|metric|ordinalize|pad|parseFloat|parseInt|random|range|round|times|toExponential|toFixed|toLocaleString|toNumber|toPrecision|toSource|toString|upto|valueOf)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.number.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(__defineGetter__|__defineSetter__|__lookupGetter__|__lookupSetter__|add|addAll|allKeys|assign|assignIn|assignInWith|assignWith|at|average|clone|count|create|defaults|defaultsDeep|defineProperties|defineProperty|entries|entriesIn|every|exclude|extend|extendOwn|extendWith|filter|find|findKey|findLastKey|forEach|forIn|forInRight|forOwn|forOwnRight|freeze|fromEntries|fromQueryString|functions|functionsIn|get|getOwnPropertyDescriptor|getOwnPropertyDescriptors|getOwnPropertyNames|getOwnPropertySymbols|getPrototypeOf|has|hasIn|hasOwnProperty|intersect|invert|invertBy|invoke|is|isArguments|isArray|isArrayBuffer|isBoolean|isDataView|isDate|isElement|isEmpty|isEqual|isError|isExtensible|isFinite|isFrozen|isFunction|isMap|isMatch|isNaN|isNull|isNumber|isObject|isPrototypeOf|isRegExp|isSealed|isSet|isString|isSymbol|isType|isTypedArray|isUndefined|isWeakMap|isWeakSet|keys|keysIn|least|map|mapKeys|mapObject|mapValues|matcher|max|median|merge|mergeAll|mergeWith|min|most|none|omit|omitBy|pairs|pick|pickBy|preventExtensions|property|propertyIsEnumerable|propertyOf|reduce|reject|remove|result|seal|select|set|setPrototypeOf|setWith|size|some|subtract|sum|tap|toLocaleString|toPairs|toPairsIn|toPath|toQueryString|toSource|toString|transform|unset|update|updateWith|valueOf|values|valuesIn)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.object.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(all|allSettled|any|catch|finally|race|reject|resolve|then)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.promise.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(apply|construct|defineProperty|deleteProperty|get|getOwnPropertyDescriptor|getPrototypeOf|has|isExtensible|ownKeys|preventExtensions|register|set|setPrototypeOf|unregister)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.proxy.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(address|age|altitude|ampm|android_id|animal|apple_token|areacode|avatar|bb_pin|birthday|bool|capitalize|cc|cc_type|cf|character|city|coin|color|company|coordinates|country|cpf|currency|currency_pair|date|depth|dice|dollar|domain|email|euro|exp|exp_month|exp_year|falsy|fbid|first|floating|gender|geohash|google_analytics|guid|hammertime|hash|hashtag|hidden|hour|integer|ip|ipv6|klout|last|latitude|letter|locale|longitude|millisecond|minute|mixin|month|n|name|natural|normal|pad|paragraph|phone|pick|pickone|pickset|postal|postcode|prefix|prime|profession|province|radio|rpg|second|sentence|set|shuffle|ssn|state|street|string|suffix|syllable|timestamp|timezone|tld|tv|twitter|unique|url|weekday|weighted|word|wp7_anid|wp8_anid2|year|zip)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.random.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(addFlags|compile|escape|exec|getFlags|removeFlags|setFlags|test|toSource|toString)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.regexp.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(at|chain|commit|next|plant|prototype|reverse|tap|thru|toJSON|value|valueOf)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.seq.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(add|clear|delete|entries|forEach|has|values)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.set.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(addAcronym|addHuman|addPlural|anchor|at|big|blink|bold|camelCase|camelize|capitalize|chain|charAt|charCodeAt|chars|codePointAt|codePoints|codes|compact|concat|count|countGraphemes|countSubstrings|countWhere|countWords|dasherize|deburr|decapitalize|decodeBase64|encodeBase64|endsWith|escape|escapeHtml|escapeHTML|escapeRegExp|escapeURL|first|fixed|fontcolor|fontsize|forEach|format|from|fromCharCode|fromCodePoint|graphemeAt|graphemes|hankaku|hasScript|hiragana|humanize|includes|indexOf|insert|isAlpha|isAlphaDigit|isBlank|isDigit|isEmpty|isLowerCase|isNumeric|isScript|isString|isUpperCase|italics|katakana|kebabCase|last|lastIndexOf|latinise|lines|link|localeCompare|lowerCase|lowerFirst|match|matchAll|matches|normalize|pad|padEnd|padLeft|padRight|padStart|parameterize|parseInt|pluralize|prune|range|raw|remove|removeAll|removeTags|repeat|replace|replaceAll|reverse|reverseGrapheme|search|shift|singularize|slice|slugify|small|snakeCase|spacify|splice|split|sprintf|startCase|startsWith|strike|stripBom|stripTags|sub|substr|substring|sup|swapCase|template|thru|titleCase|titleize|to|toLocaleLowerCase|toLocaleUpperCase|toLower|toLowerCase|toNumber|toSource|toString|toUpper|toUpperCase|tr|trim|trimEnd|trimLeft|trimRight|trimStart|truncate|truncateOnWord|underscore|unescape|unescapeHtml|unescapeHTML|unescapeURL|upperCase|upperFirst|value|valueOf|vprintf|words|wordWrap|zenkaku)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.string.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(for|keyFor|toSource|toString|valueOf)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.symbol.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(at|copyWithin|entries|every|fill|filter|find|findIndex|forEach|from|includes|indexOf|join|keys|lastIndexOf|map|of|reduce|reduceRight|reverse|set|slice|some|sort|subarray|toLocaleString|toString|values)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.typedarray.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(attempt|bindAll|cond|conforms|constant|defaultTo|escape|flow|flowRight|identity|iteratee|matches|matchesProperty|method|methodOf|mixin|noConflict|noop|now|nthArg|over|overEvery|overSome|property|propertyOf|random|range|rangeRight|result|runInContext|stubArray|stubFalse|stubObject|stubString|stubTrue|template|times|toPath|unescape|uniqueId)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.util.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: (?<=\.)\s*+(compile|compileStreaming|instantiate|instantiateStreaming|validate)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.webassembly.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(on(?:Rowsinserted|Rowsdelete|Rowenter|Rowexit|Resize|Resizestart|Resizeend|Reset|Readystatechange|Mouseout|Mouseover|Mousedown|Mouseup|Mousemove|Before(?:cut|deactivate|unload|update|paste|print|editfocus|activate)|Blur|Scrolltop|Submit|Select|Selectstart|Selectionchange|Hover|Help|Change|Contextmenu|Controlselect|Cut|Cellchange|Clock|Close|Deactivate|Datasetchanged|Datasetcomplete|Dataavailable|Drop|Drag|Dragstart|Dragover|Dragdrop|Dragenter|Dragend|Dragleave|Dblclick|Unload|Paste|Propertychange|Error|Errorupdate|Keydown|Keyup|Keypress|Focus|Load|Activate|Afterupdate|Afterprint|Abort))\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.event-handler.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(shift|showModelessDialog|showModalDialog|showHelp|scroll|scrollX|scrollByPages|scrollByLines|scrollY|scrollTo|stop|strike|sizeToContent|sidebar|signText|sort|sup|sub|substr|substring|splice|split|send|set(Milliseconds|Seconds|Minutes|Hours|Month|Year|FullYear|Date|UTC(Milliseconds|Seconds|Minutes|Hours|Month|FullYear|Date)|Time|Hotkeys|Cursor|ZOptions|Active|Resizable|RequestHeader)|search|slice|savePreferences|small|home|handleEvent|navigate|char|charCodeAt|charAt|concat|contextual|confirm|compile|clear|captureEvents|call|createStyleSheet|createPopup|createEventObject|to(GMTString|UTCString|String|Source|UpperCase|LowerCase|LocaleString)|test|taint|taintEnabled|indexOf|italics|disableExternalCapture|dump|detachEvent|unshift|untaint|unwatch|updateCommands|join|javaEnabled|pop|push|plugins.refresh|paddings|parse|print|prompt|preference|enableExternalCapture|exec|execScript|valueOf|UTC|find|file|fileModifiedDate|fileSize|fileCreatedDate|fileUpdatedDate|fixed|fontsize|fontcolor|forward|fromCharCode|watch|link|load|lastIndexOf|anchor|attachEvent|atob|apply|alert|abort|routeEvents|resize|resizeBy|resizeTo|recalc|returnValue|replace|reverse|reload|releaseCapture|releaseEvents|go|get(Milliseconds|Seconds|Minutes|Hours|Month|Day|Year|FullYear|Time|Date|TimezoneOffset|UTC(Milliseconds|Seconds|Minutes|Hours|Day|Month|FullYear|Date)|Attention|Selection|ResponseHeader|AllResponseHeaders)|moveBy|moveBelow|moveTo|moveToAbsolute|moveAbove|mergeAttributes|match|margins|btoa|big|bold|borderWidths|blink|back)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.method.js }
        patterns:
          - include: '#round-brackets'
      - applyEndPatternLast: 1
        begin: >-
          (?<=\.)\s*+(acceptNode|add|addEventListener|addTextTrack|adoptNode|after|animate|append|appendChild|appendData|before|blur|canPlayType|captureStream|caretPositionFromPoint|caretRangeFromPoint|checkValidity|clear|click|cloneContents|cloneNode|cloneRange|close|closest|collapse|compareBoundaryPoints|compareDocumentPosition|comparePoint|contains|convertPointFromNode|convertQuadFromNode|convertRectFromNode|createAttribute|createAttributeNS|createCaption|createCDATASection|createComment|createContextualFragment|createDocument|createDocumentFragment|createDocumentType|createElement|createElementNS|createEntityReference|createEvent|createExpression|createHTMLDocument|createNodeIterator|createNSResolver|createProcessingInstruction|createRange|createShadowRoot|createTBody|createTextNode|createTFoot|createTHead|createTreeWalker|delete|deleteCaption|deleteCell|deleteContents|deleteData|deleteRow|deleteTFoot|deleteTHead|detach|disconnect|dispatchEvent|elementFromPoint|elementsFromPoint|enableStyleSheetsForSet|entries|evaluate|execCommand|exitFullscreen|exitPointerLock|expand|extractContents|fastSeek|firstChild|focus|forEach|get|getAll|getAnimations|getAttribute|getAttributeNames|getAttributeNode|getAttributeNodeNS|getAttributeNS|getBoundingClientRect|getBoxQuads|getClientRects|getContext|getDestinationInsertionPoints|getElementById|getElementsByClassName|getElementsByName|getElementsByTagName|getElementsByTagNameNS|getItem|getNamedItem|getSelection|getStartDate|getVideoPlaybackQuality|has|hasAttribute|hasAttributeNS|hasAttributes|hasChildNodes|hasFeature|hasFocus|importNode|initEvent|insertAdjacentElement|insertAdjacentHTML|insertAdjacentText|insertBefore|insertCell|insertData|insertNode|insertRow|intersectsNode|isDefaultNamespace|isEqualNode|isPointInRange|isSameNode|item|key|keys|lastChild|load|lookupNamespaceURI|lookupPrefix|matches|move|moveAttribute|moveAttributeNode|moveChild|moveNamedItem|namedItem|nextNode|nextSibling|normalize|observe|open|parentNode|pause|play|postMessage|prepend|preventDefault|previousNode|previousSibling|probablySupportsContext|queryCommandEnabled|queryCommandIndeterm|queryCommandState|queryCommandSupported|queryCommandValue|querySelector|querySelectorAll|registerContentHandler|registerElement|registerProtocolHandler|releaseCapture|releaseEvents|remove|removeAttribute|removeAttributeNode|removeAttributeNS|removeChild|removeEventListener|removeItem|replace|replaceChild|replaceData|replaceWith|reportValidity|requestFullscreen|requestPointerLock|reset|scroll|scrollBy|scrollIntoView|scrollTo|seekToNextFrame|select|selectNode|selectNodeContents|set|setAttribute|setAttributeNode|setAttributeNodeNS|setAttributeNS|setCapture|setCustomValidity|setEnd|setEndAfter|setEndBefore|setItem|setNamedItem|setRangeText|setSelectionRange|setSinkId|setStart|setStartAfter|setStartBefore|slice|splitText|stepDown|stepUp|stopImmediatePropagation|stopPropagation|submit|substringData|supports|surroundContents|takeRecords|terminate|toBlob|toDataURL|toggle|toString|values|write|writeln)\b
        end: (?=.)
        beginCaptures:
          1: { name: support.function.dom.js }
        patterns:
          - include: '#round-brackets'
  support-objects:
    patterns:
      - match: (?<!\.)\s*\b(global|GLOBAL|root|__dirname|__filename)\b\s*
        name: support.variable.object.node.js
      - match: (?<!\.)\s*\b(exports|process)\s*\b
        name: support.variable.$1.js
      - match: (?<!\.)\s*\b(JSON)\s*\b
        name: support.constant.json.js
      - match: (?<!\.)\s*\b(Math)\s*\b
        name: support.constant.math.js
      - match: (?<!\.)\s*\b(console)\s*\b
        name: support.constant.console.js
      - match: (?<!\.)\s*+\b(document|event|navigator|performance|screen|window)\s*+\b
        name: support.variable.dom.js
      - match: |-
          (?x) (?<!\.) \s*+ \b
            (Buffer|EventEmitter|Server|Pipe|Socket|REPLServer|ReadStream|WriteStream|Stream 
          |Inflate|Deflate|InflateRaw|DeflateRaw|GZip|GUnzip|Unzip|Zip) \b
        name: support.class.node.js
      - applyEndPatternLast: 1
        begin: |-
          (?x) (?<!\.) \s*+ \b
            (AnalyserNode|ArrayBufferView|Attr|AudioBuffer|AudioBufferSourceNode|AudioContext|AudioDestinationNode|AudioListener
            |AudioNode|AudioParam|BatteryManager|BeforeUnloadEvent|BiquadFilterNode|Blob|BufferSource|ByteString|CSS|CSSConditionRule
            |CSSCounterStyleRule|CSSGroupingRule|CSSMatrix|CSSMediaRule|CSSPageRule|CSSPrimitiveValue|CSSRule|CSSRuleList|CSSStyleDeclaration
            |CSSStyleRule|CSSStyleSheet|CSSSupportsRule|CSSValue|CSSValueList|CanvasGradient|CanvasImageSource|CanvasPattern
            |CanvasRenderingContext2D|ChannelMergerNode|ChannelSplitterNode|CharacterData|ChromeWorker|CloseEvent|Comment|CompositionEvent
            |Console|ConvolverNode|Coordinates|Credential|CredentialsContainer|Crypto|CryptoKey|CustomEvent|DOMError|DOMException
            |DOMHighResTimeStamp|DOMImplementation|DOMString|DOMStringList|DOMStringMap|DOMTimeStamp|DOMTokenList|DataTransfer
            |DataTransferItem|DataTransferItemList|DedicatedWorkerGlobalScope|DelayNode|DeviceProximityEvent|DirectoryEntry
            |DirectoryEntrySync|DirectoryReader|DirectoryReaderSync|Document|DocumentFragment|DocumentTouch|DocumentType|DragEvent
            |DynamicsCompressorNode|Element|Entry|EntrySync|ErrorEvent|Event|EventListener|EventSource|EventTarget|FederatedCredential
            |FetchEvent|File|FileEntry|FileEntrySync|FileException|FileList|FileReader|FileReaderSync|FileSystem|FileSystemSync
            |FontFace|FormData|GainNode|Gamepad|GamepadButton|GamepadEvent|Geolocation|GlobalEventHandlers|HTMLAnchorElement
            |HTMLAreaElement|HTMLAudioElement|HTMLBRElement|HTMLBaseElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement
            |HTMLCollection|HTMLContentElement|HTMLDListElement|HTMLDataElement|HTMLDataListElement|HTMLDialogElement|HTMLDivElement
            |HTMLDocument|HTMLElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormControlsCollection|HTMLFormElement
            |HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement
            |HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMediaElement
            |HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement
            |HTMLOptionsCollection|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement
            |HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement
            |HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableElement|HTMLTableHeaderCellElement
            |HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTimeElement|HTMLTitleElement|HTMLTrackElement
            |HTMLUListElement|HTMLUnknownElement|HTMLVideoElement|HashChangeEvent|History|IDBCursor|IDBCursorWithValue|IDBDatabase
            |IDBEnvironment|IDBFactory|IDBIndex|IDBKeyRange|IDBMutableFile|IDBObjectStore|IDBOpenDBRequest|IDBRequest|IDBTransaction
            |IDBVersionChangeEvent|IIRFilterNode|IdentityManager|ImageBitmap|ImageBitmapFactories|ImageData|Index|InputDeviceCapabilities
            |InputEvent|InstallEvent|InstallTrigger|KeyboardEvent|LinkStyle|LocalFileSystem|LocalFileSystemSync|Location|MIDIAccess
            |MIDIConnectionEvent|MIDIInput|MIDIInputMap|MIDIOutputMap|MediaElementAudioSourceNode|MediaError|MediaKeyMessageEvent
            |MediaKeySession|MediaKeyStatusMap|MediaKeySystemAccess|MediaKeySystemConfiguration|MediaKeys|MediaRecorder|MediaStream
            |MediaStreamAudioDestinationNode|MediaStreamAudioSourceNode|MessageChannel|MessageEvent|MessagePort|MouseEvent
            |MutationObserver|MutationRecord|NamedNodeMap|Navigator|NavigatorConcurrentHardware|NavigatorGeolocation|NavigatorID
            |NavigatorLanguage|NavigatorOnLine|Node|NodeFilter|NodeIterator|NodeList|NonDocumentTypeChildNode|Notification
            |OfflineAudioCompletionEvent|OfflineAudioContext|OscillatorNode|PageTransitionEvent|PannerNode|ParentNode|PasswordCredential
            |Path2D|PaymentAddress|PaymentRequest|PaymentResponse|Performance|PerformanceEntry|PerformanceFrameTiming|PerformanceMark
            |PerformanceMeasure|PerformanceNavigation|PerformanceNavigationTiming|PerformanceObserver|PerformanceObserverEntryList
            |PerformanceResourceTiming|PerformanceTiming|PeriodicSyncEvent|PeriodicWave|Plugin|Point|PointerEvent|PopStateEvent
            |PortCollection|Position|PositionError|PositionOptions|PresentationConnectionClosedEvent|PresentationConnectionList
            |PresentationReceiver|ProcessingInstruction|ProgressEvent|PromiseRejectionEvent|PushEvent|PushRegistrationManager
            |RTCCertificate|RTCConfiguration|RTCPeerConnection|RTCSessionDescriptionCallback|RTCStatsReport|RadioNodeList|RandomSource
            |Range|ReadableByteStream|RenderingContext|SVGAElement|SVGAngle|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement
            |SVGAnimateTransformElement|SVGAnimatedAngle|SVGAnimatedBoolean|SVGAnimatedEnumeration|SVGAnimatedInteger|SVGAnimatedLength
            |SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedPoints|SVGAnimatedPreserveAspectRatio
            |SVGAnimatedRect|SVGAnimatedString|SVGAnimatedTransformList|SVGAnimationElement|SVGCircleElement|SVGClipPathElement
            |SVGCursorElement|SVGDefsElement|SVGDescElement|SVGElement|SVGEllipseElement|SVGEvent|SVGFilterElement|SVGFontElement
            |SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement
            |SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGradientElement|SVGHKernElement|SVGImageElement|SVGLength
            |SVGLengthList|SVGLineElement|SVGLinearGradientElement|SVGMPathElement|SVGMaskElement|SVGMatrix|SVGMissingGlyphElement
            |SVGNumber|SVGNumberList|SVGPathElement|SVGPatternElement|SVGPoint|SVGPolygonElement|SVGPolylineElement|SVGPreserveAspectRatio
            |SVGRadialGradientElement|SVGRect|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGSetElement|SVGStopElement|SVGStringList
            |SVGStylable|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTRefElement|SVGTSpanElement|SVGTests|SVGTextElement
            |SVGTextPositioningElement|SVGTitleElement|SVGTransform|SVGTransformList|SVGTransformable|SVGUseElement|SVGVKernElement
            |SVGViewElement|ServiceWorker|ServiceWorkerContainer|ServiceWorkerGlobalScope|ServiceWorkerRegistration|ServiceWorkerState
            |ShadowRoot|SharedWorker|SharedWorkerGlobalScope|SourceBufferList|StereoPannerNode|Storage|StorageEvent|StyleSheet
            |StyleSheetList|SubtleCrypto|SyncEvent|Text|TextMetrics|TimeEvent|TimeRanges|Touch|TouchEvent|TouchList|Transferable
            |TreeWalker|UIEvent|USVString|VRDisplayCapabilities|ValidityState|WaveShaperNode|WebGL|WebGLActiveInfo|WebGLBuffer
            |WebGLContextEvent|WebGLFramebuffer|WebGLProgram|WebGLRenderbuffer|WebGLRenderingContext|WebGLShader|WebGLShaderPrecisionFormat
            |WebGLTexture|WebGLTimerQueryEXT|WebGLTransformFeedback|WebGLUniformLocation|WebGLVertexArrayObject|WebGLVertexArrayObjectOES
            |WebSocket|WebSockets|WebVTT|WheelEvent|Window|WindowBase64|WindowEventHandlers|WindowTimers|Worker|WorkerGlobalScope
            |WorkerLocation|WorkerNavigator|XMLHttpRequest|XMLHttpRequestEventTarget|XMLSerializer|XPathExpression|XPathResult
            |XSLTProcessor)
          \b
        end: (?=.)
        name: support.class.dom.js
        beginCaptures:
          1: { name: support.class.dom.js }
  support-php:
    comment: PHP built-in functions and classes
    patterns:
      - match: |-
          (?xi)
          \s*+(?<!\.)\b
          apc_(
            store|sma_info|compile_file|clear_cache|cas|cache_info|inc|dec|define_constants|delete(_file)?|
            exists|fetch|load_constants|add|bin_(dump|load)(file)?
          )\b
        name: support.function.apc.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            shuffle|sizeof|sort|next|nat(case)?sort|count|compact|current|in_array|usort|uksort|uasort|
            pos|prev|end|each|extract|ksort|key(_exists)?|krsort|list|asort|arsort|rsort|reset|range|
            array(_(shift|sum|splice|search|slice|chunk|change_key_case|count_values|column|combine|
                    (diff|intersect)(_(u)?(key|assoc))?|u(diff|intersect)(_(u)?assoc)?|unshift|unique|
                    pop|push|pad|product|values|keys|key_exists|filter|fill(_keys)?|flip|walk(_recursive)?|
                    reduce|replace(_recursive)?|reverse|rand|multisort|merge(_recursive)?|map)?)
          )\b
        name: support.function.array.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            show_source|sys_getloadavg|sleep|highlight_(file|string)|constant|connection_(aborted|status)|
            time_(nanosleep|sleep_until)|ignore_user_abort|die|define(d)?|usleep|uniqid|unpack|__halt_compiler|
            php_(check_syntax|strip_whitespace)|pack|eval|exit|get_browser
          )\b
        name: support.function.basic_functions.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          bc(scale|sub|sqrt|comp|div|pow(mod)?|add|mod|mul)\b
        name: support.function.bcmath.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          blenc_encrypt\b
        name: support.function.blenc.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          bz(compress|close|open|decompress|errstr|errno|error|flush|write|read)\b
        name: support.function.bz2.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            (French|Gregorian|Jewish|Julian)ToJD|cal_(to_jd|info|days_in_month|from_jd)|unixtojd|
            jdto(unix|jewish)|easter_(date|days)|JD(MonthName|To(Gregorian|Julian|French)|DayOfWeek)
          )\b
        name: support.function.calendar.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            class_alias|all_user_method(_array)?|is_(a|subclass_of)|__autoload|(class|interface|method|property|trait)_exists|
            get_(class(_(vars|methods))?|(called|parent)_class|object_vars|declared_(classes|interfaces|traits))
          )\b
        name: support.function.classobj.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            com_(create_guid|print_typeinfo|event_sink|load_typelib|get_active_object|message_pump)|
            variant_(sub|set(_type)?|not|neg|cast|cat|cmp|int|idiv|imp|or|div|date_(from|to)_timestamp|
                     pow|eqv|fix|and|add|abs|round|get_type|xor|mod|mul)
          )\b
        name: support.function.com.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (isset|unset|eval|empty|list)\b
        name: support.function.construct.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (print|echo)\b
        name: support.function.construct.output.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          ctype_(space|cntrl|digit|upper|punct|print|lower|alnum|alpha|graph|xdigit)\b
        name: support.function.ctype.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          curl_(
            share_(close|init|setopt)|strerror|setopt(_array)?|copy_handle|close|init|unescape|pause|escape|
            errno|error|exec|version|file_create|reset|getinfo|
            multi_(strerror|setopt|select|close|init|info_read|(add|remove)_handle|getcontent|exec)
          )\b
        name: support.function.curl.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            strtotime|str[fp]time|checkdate|time|timezone_name_(from_abbr|get)|idate|
            timezone_((location|offset|transitions|version)_get|(abbreviations|identifiers)_list|open)|
            date(_(sun(rise|set)|sun_info|sub|create(_(immutable_)?from_format)?|timestamp_(get|set)|timezone_(get|set)|time_set|
                   isodate_set|interval_(create_from_date_string|format)|offset_get|diff|default_timezone_(get|set)|date_set|
                   parse(_from_format)?|format|add|get_last_errors|modify))?|
            localtime|get(date|timeofday)|gm(strftime|date|mktime)|microtime|mktime
          )\b
        name: support.function.datetime.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          dba_(sync|handlers|nextkey|close|insert|optimize|open|delete|popen|exists|key_split|firstkey|fetch|list|replace)\b
        name: support.function.dba.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          dbx_(sort|connect|compare|close|escape_string|error|query|fetch_row)\b
        name: support.function.dbx.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (scandir|chdir|chroot|closedir|opendir|dir|rewinddir|readdir|getcwd)\b
        name: support.function.dir.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          eio_(
            sync(fs)?|sync_file_range|symlink|stat(vfs)?|sendfile|set_min_parallel|set_max_(idle|poll_(reqs|time)|parallel)|
            seek|n(threads|op|pending|reqs|ready)|chown|chmod|custom|close|cancel|truncate|init|open|dup2|unlink|utime|poll|
            event_loop|f(sync|stat(vfs)?|chown|chmod|truncate|datasync|utime|allocate)|write|lstat|link|rename|realpath|
            read(ahead|dir|link)?|rmdir|get_(event_stream|last_error)|grp(_(add|cancel|limit))?|mknod|mkdir|busy
          )\b
        name: support.function.eio.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          enchant_(
            dict_(store_replacement|suggest|check|is_in_session|describe|quick_check|add_to_(personal|session)|get_error)|
            broker_(set_ordering|init|dict_exists|describe|free(_dict)?|list_dicts|request_(pwl_)?dict|get_error)
          )\b
        name: support.function.enchant.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (split(i)?|sql_regcase|ereg(i)?(_replace)?)\b
        name: support.function.ereg.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          ((restore|set)_(error_handler|exception_handler)|trigger_error|debug_(print_)?backtrace|user_error|error_(log|reporting|get_last))\b
        name: support.function.errorfunc.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (shell_exec|system|passthru|proc_(nice|close|terminate|open|get_status)|escapeshell(arg|cmd)|exec)\b
        name: support.function.exec.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (exif_(thumbnail|tagname|imagetype|read_data)|read_exif_data)\b
        name: support.function.exif.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          fann_(
            (duplicate|length|merge|shuffle|subset)_train_data|scale_(train(_data)?|(input|output)(_train_data)?)|
            set_(scaling_params|sarprop_(step_error_(shift|threshold_factor)|temperature|weight_decay_shift)|
                 cascade_(num_candidate_groups|candidate_(change_fraction|limit|stagnation_epochs)|
                          output_(change_fraction|stagnation_epochs)|weight_multiplier|activation_(functions|steepnesses)|
                          (max|min)_(cand|out)_epochs)|
                 callback|training_algorithm|train_(error|stop)_function|(input|output)_scaling_params|error_log|
                 quickprop_(decay|mu)|weight(_array)?|learning_(momentum|rate)|bit_fail_limit|
                 activation_(function|steepness)(_(hidden|layer|output))?|
                 rprop_((decrease|increase)_factor|delta_(max|min|zero)))|
            save(_train)?|num_(input|output)_train_data|copy|clear_scaling_params|cascadetrain_on_(file|data)|
            create_((sparse|shortcut|standard)(_array)?|train(_from_callback)?|from_file)|
            test(_data)?|train(_(on_(file|data)|epoch))?|init_weights|descale_(input|output|train)|destroy(_train)?|
            print_error|run|reset_(MSE|err(no|str))|read_train_from_file|randomize_weights|
            get_(sarprop_(step_error_(shift|threshold_factor)|temperature|weight_decay_shift)|num_(input|output|layers)|
                 network_type|MSE|connection_(array|rate)|bias_array|bit_fail(_limit)?|
                 cascade_(num_(candidates|candidate_groups)|(candidate|output)_(change_fraction|limit|stagnation_epochs)|
                          weight_multiplier|activation_(functions|steepnesses)(_count)?|(max|min)_(cand|out)_epochs)|
                 total_(connections|neurons)|training_algorithm|train_(error|stop)_function|err(no|str)|
                 quickprop_(decay|mu)|learning_(momentum|rate)|layer_array|activation_(function|steepness)|
                 rprop_((decrease|increase)_factor|delta_(max|min|zero)))
          )\b
        name: support.function.fann.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            symlink|stat|set_file_buffer|chown|chgrp|chmod|copy|clearstatcache|touch|tempnam|tmpfile|
            is_(dir|(uploaded_)?file|executable|link|readable|writ(e)?able)|disk_(free|total)_space|diskfreespace|
            dirname|unlink|umask|pclose|popen|pathinfo|parse_ini_(file|string)|fscanf|fstat|fseek|fnmatch|
            fclose|ftell|ftruncate|file(size|[acm]time|type|inode|owner|perms|group)?|file_(exists|(get|put)_contents)|
            f(open|puts|putcsv|passthru|eof|flush|write|lock|read|gets(s)?|getc(sv)?)|lstat|lchown|lchgrp|link(info)?|
            rename|rewind|read(file|link)|realpath(_cache_(get|size))?|rmdir|glob|move_uploaded_file|mkdir|basename
          )\b
        name: support.function.file.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (finfo_(set_flags|close|open|file|buffer)|mime_content_type)\b
        name: support.function.fileinfo.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          filter_(has_var|input(_array)?|id|var(_array)?|list)\b
        name: support.function.filter.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          fastcgi_finish_request\b
        name: support.function.fpm.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          (call_user_(func|method)(_array)?|create_function|unregister_tick_function|forward_static_call(_array)?|function_exists|func_(num_args|get_arg(s)?)|register_(shutdown|tick)_function|get_defined_functions)\b
        name: support.function.funchand.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          ((n)?gettext|textdomain|d((n)?gettext|c(n)?gettext)|bind(textdomain|_textdomain_codeset))\b
        name: support.function.gettext.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          gmp_(
            scan[01]|strval|sign|sub|setbit|sqrt(rem)?|hamdist|neg|nextprime|com|clrbit|cmp|testbit|
            intval|init|invert|import|or|div(exact)?|div_(q|qr|r)|jacobi|popcount|pow(m)?|perfect_square|
            prob_prime|export|fact|legendre|and|add|abs|root(rem)?|random(_(bits|range))?|gcd(ext)?|xor|mod|mul
          )\b
        name: support.function.gmp.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          hash(_(hmac(_file)?|copy|init|update(_(file|stream))?|pbkdf2|equals|file|final|algos))?\b
        name: support.function.hash.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            http_(support|send_(status|stream|content_(disposition|type)|data|file|last_modified)|head|
                  negotiate_(charset|content_type|language)|chunked_decode|cache_(etag|last_modified)|throttle|
                  inflate|deflate|date|post_(data|fields)|put_(data|file|stream)|persistent_handles_(count|clean|ident)|
                  parse_(cookie|headers|message|params)|redirect|request(_(method_(exists|name|(un)?register)|body_encode))?|
                  get(_request_(headers|body(_stream)?))?|match_(etag|modified|request_header)|build_(cookie|str|url))|
            ob_(etag|deflate|inflate)handler
          )\b
        name: support.function.http.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (iconv(_(str(pos|len|rpos)|substr|(get|set)_encoding|mime_(decode(_headers)?|encode)))?|ob_iconv_handler)\b
        name: support.function.iconv.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          iis_((start|stop)_(service|server)|set_(script_map|server_rights|dir_security|app_settings)|(add|remove)_server|get_(script_map|service_state|server_(rights|by_(comment|path))|dir_security))\b
        name: support.function.iisfunc.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            iptc(embed|parse)|(jpeg|png)2wbmp|gd_info|getimagesize(fromstring)?|
            image(s[xy]|scale|(char|string)(up)?|set(style|thickness|tile|interpolation|pixel|brush)|savealpha|
                  convolution|copy(resampled|resized|merge(gray)?)?|colors(forindex|total)|
                  color(set|closest(alpha|hwb)?|transparent|deallocate|(allocate|exact|resolve)(alpha)?|at|match)|
                  crop(auto)?|create(truecolor|from(string|jpeg|png|wbmp|webp|gif|gd(2(part)?)?|xpm|xbm))?|
                  types|ttf(bbox|text)|truecolortopalette|istruecolor|interlace|2wbmp|destroy|dashedline|jpeg|
                  _type_to_(extension|mime_type)|ps(slantfont|text|(encode|extend|free|load)font|bbox)|png|polygon|
                  palette(copy|totruecolor)|ellipse|ft(text|bbox)|filter|fill|filltoborder|
                  filled(arc|ellipse|polygon|rectangle)|font(height|width)|flip|webp|wbmp|line|loadfont|layereffect|
                  antialias|affine(matrix(concat|get))?|alphablending|arc|rotate|rectangle|gif|gd(2)?|gammacorrect|
                  grab(screen|window)|xbm)
          )\b
        name: support.function.image.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            sys_get_temp_dir|set_(time_limit|include_path|magic_quotes_runtime)|cli_(get|set)_process_title|
            ini_(alter|get(_all)?|restore|set)|zend_(thread_id|version|logo_guid)|dl|php(credits|info|version)|
            php_(sapi_name|ini_(scanned_files|loaded_file)|uname|logo_guid)|putenv|extension_loaded|version_compare|
            assert(_options)?|restore_include_path|gc_(collect_cycles|disable|enable(d)?)|getopt|
            get_(cfg_var|current_user|defined_constants|extension_funcs|include_path|included_files|loaded_extensions|
                 magic_quotes_(gpc|runtime)|required_files|resources)|
            get(env|lastmod|rusage|my(inode|[gup]id))|
            memory_get_(peak_)?usage|main|magic_quotes_runtime
          )\b
        name: support.function.info.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          ibase_(
            set_event_handler|service_(attach|detach)|server_info|num_(fields|params)|name_result|connect|
            commit(_ret)?|close|trans|delete_user|drop_db|db_info|pconnect|param_info|prepare|err(code|msg)|
            execute|query|field_info|fetch_(assoc|object|row)|free_(event_handler|query|result)|wait_event|
            add_user|affected_rows|rollback(_ret)?|restore|gen_id|modify_user|maintain_db|backup|
            blob_(cancel|close|create|import|info|open|echo|add|get)
          )\b
        name: support.function.interbase.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            normalizer_(normalize|is_normalized)|idn_to_(unicode|utf8|ascii)|
            numfmt_(set_(symbol|(text_)?attribute|pattern)|create|(parse|format)(_currency)?|
                    get_(symbol|(text_)?attribute|pattern|error_(code|message)|locale))|
            collator_(sort(_with_sort_keys)?|set_(attribute|strength)|compare|create|asort|
                      get_(strength|sort_key|error_(code|message)|locale|attribute))|
            transliterator_(create(_(inverse|from_rules))?|transliterate|list_ids|get_error_(code|message))|
            intl(cal|tz)_get_error_(code|message)|intl_(is_failure|error_name|get_error_(code|message))|
            datefmt_(set_(calendar|lenient|pattern|timezone(_id)?)|create|is_lenient|parse|format(_object)?|localtime|
                     get_(calendar(_object)?|time(type|zone(_id)?)|datetype|pattern|error_(code|message)|locale))|
            locale_(set_default|compose|canonicalize|parse|filter_matches|lookup|accept_from_http|
                    get_(script|display_(script|name|variant|language|region)|default|primary_language|keywords|all_variants|region))|
            resourcebundle_(create|count|locales|get(_(error_(code|message)))?)|
            grapheme_(str(i?str|r?i?pos|len)|substr|extract)|
            msgfmt_(set_pattern|create|(format|parse)(_message)?|get_(pattern|error_(code|message)|locale))
          )\b
        name: support.function.intl.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          json_(decode|encode|last_error(_msg)?)\b
        name: support.function.json.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          ldap_(
            start|tls|sort|search|sasl_bind|set_(option|rebind_proc)|(first|next)_(attribute|entry|reference)|
            connect|control_paged_result(_response)?|count_entries|compare|close|t61_to_8859|8859_to_t61|
            dn2ufn|delete|unbind|parse_(reference|result)|escape|errno|err2str|error|explode_dn|bind|
            free_result|list|add|rename|read|get_(option|dn|entries|values(_len)?|attributes)|modify(_batch)?|
            mod_(add|del|replace)
          )\b
        name: support.function.ldap.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          libxml_(set_(streams_context|external_entity_loader)|clear_errors|disable_entity_loader|use_internal_errors|get_(errors|last_error))\b
        name: support.function.libxml.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (ezmlm_hash|mail)\b
        name: support.function.mail.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            (a)?(cos|sin|tan)(h)?|sqrt|srand|hypot|hexdec|ceil|is_(nan|(in)?finite)|octdec|dec(hex|oct|bin)|deg2rad|
            pi|pow|exp(m1)?|floor|fmod|lcg_value|log(1(p|0))?|atan2|abs|round|rand|rad2deg|getrandmax|
            mt_(srand|rand|getrandmax)|max|min|bindec|base_convert
          )\b
        name: support.function.math.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          mb_(
            str(cut|str|to(lower|upper)|istr|ipos|imwidth|pos|width|len|rchr|richr|ripos|rpos)|
            substitute_character|substr(_count)?|split|send_mail|http_(input|output)|check_encoding|
            convert_(case|encoding|kana|variables)|internal_encoding|output_handler|decode_(numericentity|mimeheader)|
            detect_(encoding|order)|parse_str|preferred_mime_name|encoding_aliases|encode_(numericentity|mimeheader)|
            ereg(i(_replace)?)?|ereg_(search(_(get(pos|regs)|init|regs|(set)?pos))?|replace(_callback)?|match)|
            list_encodings|language|regex_(set_options|encoding)|get_info
          )\b
        name: support.function.mbstring.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            mcrypt_(
              cfb|create_iv|cbc|ofb|decrypt|encrypt|ecb|list_(algorithms|modes)|generic(_((de)?init|end))?|
              enc_(self_test|is_block_(algorithm|algorithm_mode|mode)|
              get_(supported_key_sizes|(block|iv|key)_size|(algorithms|modes)_name))|
              get_(cipher_name|(block|iv|key)_size)|
              module_(close|self_test|is_block_(algorithm|algorithm_mode|mode)|open|
                      get_(supported_key_sizes|algo_(block|key)_size)))|
            mdecrypt_generic
          )\b
        name: support.function.mcrypt.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          memcache_debug\b
        name: support.function.memcache.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          mhash(_(count|keygen_s2k|get_(hash_name|block_size)))?\b
        name: support.function.mhash.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (log_(cmd_(insert|delete|update)|killcursor|write_batch|reply|getmore)|bson_(decode|encode))\b
        name: support.function.mongo.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          mysql_(
            stat|set_charset|select_db|num_(fields|rows)|connect|client_encoding|close|create_db|escape_string|
            thread_id|tablename|insert_id|info|data_seek|drop_db|db_(name|query)|unbuffered_query|pconnect|ping|
            errno|error|query|field_(seek|name|type|table|flags|len)|fetch_(object|field|lengths|assoc|array|row)|
            free_result|list_(tables|dbs|processes|fields)|affected_rows|result|real_escape_string|
            get_(client|host|proto|server)_info
          )\b
        name: support.function.mysql.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          mysqli_(
            ssl_set|store_result|stat|send_(query|long_data)|set_(charset|opt|local_infile_(default|handler))|
            stmt_(store_result|send_long_data|next_result|close|init|data_seek|prepare|execute|fetch|free_result|
                  attr_(get|set)|result_metadata|reset|get_(result|warnings)|more_results|bind_(param|result))|
            select_db|slave_query|savepoint|next_result|change_user|character_set_name|connect|commit|
            client_encoding|close|thread_safe|init|options|(enable|disable)_(reads_from_master|rpl_parse)|
            dump_debug_info|debug|data_seek|use_result|ping|poll|param_count|prepare|escape_string|execute|
            embedded_server_(start|end)|kill|query|field_seek|free_result|autocommit|rollback|report|refresh|
            fetch(_(object|fields|field(_direct)?|assoc|all|array|row))?|rpl_(parse_enabled|probe|query_type)|
            release_savepoint|reap_async_query|real_(connect|escape_string|query)|more_results|multi_query|
            get_(charset|connection_stats|client_(stats|info|version)|cache_stats|warnings|links_stats|metadata)|
            master_query|bind_(param|result)|begin_transaction
          )\b
        name: support.function.mysqli.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          mysqlnd_memcache_(set|get_config)\b
        name: support.function.mysqlnd-memcache.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          mysqlnd_ms_(set_(user_pick_server|qos)|dump_servers|query_is_select|fabric_select_(shard|global)|get_(stats|last_(used_connection|gtid))|xa_(commit|rollback|gc|begin)|match_wild)\b
        name: support.function.mysqlnd-ms.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          mysqlnd_qc_(set_(storage_handler|cache_condition|is_select|user_handlers)|clear_cache|get_(normalized_query_trace_log|core_stats|cache_info|query_trace_log|available_handlers))\b
        name: support.function.mysqlnd-qc.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          mysqlnd_uh_(set_(statement|connection)_proxy|convert_to_mysqlnd)\b
        name: support.function.mysqlnd-uh.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            syslog|socket_(set_(blocking|timeout)|get_status)|set(raw)?cookie|http_response_code|openlog|
            headers_(list|sent)|header(_(register_callback|remove))?|checkdnsrr|closelog|inet_(ntop|pton)|ip2long|
            openlog|dns_(check_record|get_(record|mx))|define_syslog_variables|(p)?fsockopen|long2ip|
            get(servby(name|port)|host(name|by(name(l)?|addr))|protoby(name|number)|mxrr)
          )\b
        name: support.function.network.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          nsapi_(virtual|response_headers|request_headers)\b
        name: support.function.nsapi.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            oci(statementtype|setprefetch|serverversion|savelob(file)?|numcols|new(collection|cursor|descriptor)|nlogon|
                column(scale|size|name|type(raw)?|isnull|precision)|coll(size|trim|assign(elem)?|append|getelem|max)|commit|
                closelob|cancel|internaldebug|definebyname|plogon|parse|error|execute|fetch(statement|into)?|
                free(statement|collection|cursor|desc)|write(temporarylob|lobtofile)|loadlob|log(on|off)|rowcount|rollback|
                result|bindbyname)|
            oci_(statement_type|set_(client_(info|identifier)|prefetch|edition|action|module_name)|server_version|
                 num_(fields|rows)|new_(connect|collection|cursor|descriptor)|connect|commit|client_version|close|cancel|
                 internal_debug|define_by_name|pconnect|password_change|parse|error|execute|bind_(array_)?by_name|
                 field_(scale|size|name|type(_raw)?|is_null|precision)|fetch(_(object|assoc|all|array|row))?|
                 free_(statement|descriptor)|lob_(copy|is_equal)|rollback|result|get_implicit_resultset)
          )\b
        name: support.function.oci8.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          opcache_(compile_file|invalidate|reset|get_(status|configuration))\b
        name: support.function.opcache.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          openssl_(
            sign|spki_(new|export(_challenge)?|verify)|seal|csr_(sign|new|export(_to_file)?|get_(subject|public_key))|
            cipher_iv_length|open|dh_compute_key|digest|decrypt|public_(decrypt|encrypt)|encrypt|error_string|
            pkcs12_(export(_to_file)?|read)|pkcs7_(sign|decrypt|encrypt|verify)|verify|free_key|random_pseudo_bytes|
            pkey_(new|export(_to_file)?|free|get_(details|public|private))|private_(decrypt|encrypt)|pbkdf2|
            get_((cipher|md)_methods|cert_locations|(public|private)key)|
            x509_(check_private_key|checkpurpose|parse|export(_to_file)?|fingerprint|free|read)
          )\b
        name: support.function.openssl.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            output_(add_rewrite_var|reset_rewrite_vars)|flush|
            ob_(start|clean|implicit_flush|end_(clean|flush)|flush|list_handlers|gzhandler|
                get_(status|contents|clean|flush|length|level))
          )\b
        name: support.function.output.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          password_(hash|needs_rehash|verify|get_info)\b
        name: support.function.password.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          pcntl_(
            strerror|signal(_dispatch)?|sig(timedwait|procmask|waitinfo)|setpriority|errno|exec|fork|
            w(stopsig|termsig|if(stopped|signaled|exited))|wait(pid)?|alarm|getpriority|get_last_error
          )\b
        name: support.function.pcntl.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          pg_(
            socket|send_(prepare|execute|query(_params)?)|set_(client_encoding|error_verbosity)|select|host|
            num_(fields|rows)|consume_input|connection_(status|reset|busy)|connect(_poll)?|convert|copy_(from|to)|
            client_encoding|close|cancel_query|tty|transaction_status|trace|insert|options|delete|dbname|untrace|
            unescape_bytea|update|pconnect|ping|port|put_line|parameter_status|prepare|version|query(_params)?|
            escape_(string|identifier|literal|bytea)|end_copy|execute|flush|free_result|last_(notice|error|oid)|
            field_(size|num|name|type(_oid)?|table|is_null|prtlen)|affected_rows|result_(status|seek|error(_field)?)|
            fetch_(object|assoc|all(_columns)?|array|row|result)|get_(notify|pid|result)|meta_data|
            lo_(seek|close|create|tell|truncate|import|open|unlink|export|write|read(_all)?)|
          )\b
        name: support.function.pgsql.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          (virtual|getallheaders|apache_((get|set)env|note|child_terminate|lookup_uri|response_headers|reset_timeout|request_headers|get_(version|modules)))\b
        name: support.function.php_apache.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          dom_import_simplexml\b
        name: support.function.php_dom.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          ftp_(
            ssl_connect|systype|site|size|set_option|nlist|nb_(continue|f?(put|get))|ch(dir|mod)|connect|cdup|close|
            delete|put|pwd|pasv|exec|quit|f(put|get)|login|alloc|rename|raw(list)?|rmdir|get(_option)?|mdtm|mkdir
          )\b
        name: support.function.php_ftp.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          imap_(
            (create|delete|list|rename|scan)(mailbox)?|status|sort|subscribe|set_quota|set(flag_full|acl)|search|savebody|
            num_(recent|msg)|check|close|clearflag_full|thread|timeout|open|header(info)?|headers|append|alerts|reopen|
            8bit|unsubscribe|undelete|utf7_(decode|encode)|utf8|uid|ping|errors|expunge|qprint|gc|
            fetch(structure|header|text|mime|body)|fetch_overview|lsub|list(scan|subscribed)|last_error|
            rfc822_(parse_(headers|adrlist)|write_address)|get(subscribed|acl|mailboxes)|get_quota(root)?|
            msgno|mime_header_decode|mail_(copy|compose|move)|mail|mailboxmsginfo|binary|body(struct)?|base64
          )\b
        name: support.function.php_imap.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          mssql_(
            select_db|num_(fields|rows)|next_result|connect|close|init|data_seek|pconnect|execute|query|
            field_(seek|name|type|length)|fetch_(object|field|assoc|array|row|batch)|free_(statement|result)|
            rows_affected|result|guid_string|get_last_message|min_(error|message)_severity|bind
          )\b
        name: support.function.php_mssql.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          odbc_(
            statistics|specialcolumns|setoption|num_(fields|rows)|next_result|connect|columns|columnprivileges|commit|
            cursor|close(_all)?|tables|tableprivileges|do|data_source|pconnect|primarykeys|procedures|procedurecolumns|
            prepare|error(msg)?|exec(ute)?|field_(scale|num|name|type|precision|len)|foreignkeys|free_result|
            fetch_(into|object|array|row)|longreadlen|autocommit|rollback|result(_all)?|gettypeinfo|binmode
          )\b
        name: support.function.php_odbc.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          preg_(split|quote|filter|last_error|replace(_callback)?|grep|match(_all)?)\b
        name: support.function.php_pcre.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          (spl_(classes|object_hash|autoload(_(call|unregister|extensions|functions|register))?)|class_(implements|uses|parents)|iterator_(count|to_array|apply))\b
        name: support.function.php_spl.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          zip_(close|open|entry_(name|compressionmethod|compressedsize|close|open|filesize|read)|read)\b
        name: support.function.php_zip.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          posix_(
            strerror|set(s|e?u|[ep]?g)id|ctermid|ttyname|times|isatty|initgroups|uname|errno|kill|access|
            get(sid|cwd|uid|pid|ppid|pwnam|pwuid|pgid|pgrp|euid|egid|login|rlimit|gid|grnam|groups|grgid)|
            get_last_error|mknod|mkfifo
          )\b
        name: support.function.posix.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          set(thread|proc)title\b
        name: support.function.proctitle.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          pspell_(
            store_replacement|suggest|save_wordlist|new(_(config|personal))?|check|clear_session|
            config_(save_repl|create|ignore|(data|dict)_dir|personal|runtogether|repl|mode)|add_to_(session|personal)
          )\b
        name: support.function.pspell.js
      - match: >-
          (?i)\s*+(?<!\.)\b
          readline(_(completion_function|clear_history|callback_(handler_(install|remove)|read_char)|info|on_new_line|write_history|list_history|add_history|redisplay|read_history))?\b
        name: support.function.readline.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          recode(_(string|file))?\b
        name: support.function.recode.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          rrd(c_disconnect|_(create|tune|info|update|error|version|first|fetch|last(update)?|restore|graph|xport))\b
        name: support.function.rrd.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            shm_((get|has|remove|put)_var|detach|attach|remove)|sem_(acquire|release|remove|get)|ftok|
            msg_((get|remove|set|stat)_queue|send|queue_exists|receive)
          )\b
        name: support.function.sem.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          session_(
            status|start|set_(save_handler|cookie_params)|save_path|name|commit|cache_(expire|limiter)|
            is_registered|id|destroy|decode|unset|unregister|encode|write_close|abort|reset|register(_shutdown)?|
            regenerate_id|get_cookie_params|module_name
          )\b
        name: support.function.session.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          shmop_(size|close|open|delete|write|read)\b
        name: support.function.shmop.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          simplexml_(import_dom|load_(string|file))\b
        name: support.function.simplexml.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            snmp(walk(oid)?|realwalk|get(next)?|set)|
            snmp_(set_(valueretrieval|quick_print|enum_print|oid_(numeric_print|output_format))|read_mib|
                  get_(valueretrieval|quick_print))|
            snmp[23]_(set|walk|real_walk|get(next)?)
          )\b
        name: support.function.snmp.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (is_soap_fault|use_soap_error_handler)\b
        name: support.function.soap.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          socket_(
            shutdown|strerror|send(to|msg)?|set_((non)?block|option)|select|connect|close|clear_error|bind|
            create(_(pair|listen))?|cmsg_space|import_stream|write|listen|last_error|accept|recv(from|msg)?|
            read|get(peer|sock)name|get_option
          )\b
        name: support.function.sockets.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          sqlite_(
            single_query|seek|has_(more|prev)|num_(fields|rows)|next|changes|column|current|close|
            create_(aggregate|function)|open|unbuffered_query|udf_(decode|encode)_binary|popen|prev|
            escape_string|error_string|exec|valid|key|query|field_name|factory|
            fetch_(string|single|column_types|object|all|array)|lib(encoding|version)|
            last_(insert_rowid|error)|array_query|rewind|busy_timeout
          )\b
        name: support.function.sqlite.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          sqlsrv_(
            send_stream_data|server_info|has_rows|num_(fields|rows)|next_result|connect|configure|commit|
            client_info|close|cancel|prepare|errors|execute|query|field_metadata|fetch(_(array|object))?|
            free_stmt|rows_affected|rollback|get_(config|field)|begin_transaction
          )\b
        name: support.function.sqlsrv.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          stats_(
            harmonic_mean|covariance|standard_deviation|skew|
            cdf_(noncentral_(chisquare|f)|negative_binomial|chisquare|cauchy|t|uniform|poisson|exponential|f|weibull|
                 logistic|laplace|gamma|binomial|beta)|
            stat_(noncentral_t|correlation|innerproduct|independent_t|powersum|percentile|paired_t|gennch|binomial_coef)|
            dens_(normal|negative_binomial|chisquare|cauchy|t|pmf_(hypergeometric|poisson|binomial)|exponential|f|
                  weibull|logistic|laplace|gamma|beta)|
            den_uniform|variance|kurtosis|absolute_deviation|
            rand_(setall|phrase_to_seeds|ranf|get_seeds|
                  gen_(noncentral_[ft]|noncenral_chisquare|normal|chisquare|t|int|
                       i(uniform|poisson|binomial(_negative)?)|exponential|f(uniform)?|gamma|beta))
          )\b
        name: support.function.stats.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            set_socket_blocking|
            stream_(socket_(shutdown|sendto|server|client|pair|enable_crypto|accept|recvfrom|get_name)|
              set_(chunk_size|timeout|(read|write)_buffer|blocking)|select|notification_callback|supports_lock|
              context_(set_(option|default|params)|create|get_(options|default|params))|copy_to_stream|is_local|
              encoding|filter_(append|prepend|register|remove)|wrapper_((un)?register|restore)|
              resolve_include_path|register_wrapper|get_(contents|transports|filters|wrappers|line|meta_data)|
              bucket_(new|prepend|append|make_writeable)
            )
          )\b
        name: support.function.streamsfuncs.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            money_format|md5(_file)?|metaphone|bin2hex|sscanf|sha1(_file)?|
            str(str|c?spn|n(at)?(case)?cmp|chr|coll|(case)?cmp|to(upper|lower)|tok|tr|istr|pos|pbrk|len|rchr|ri?pos|rev)|
            str_(getcsv|ireplace|pad|repeat|replace|rot13|shuffle|split|word_count)|
            strip(c?slashes|os)|strip_tags|similar_text|soundex|substr(_(count|compare|replace))?|setlocale|
            html(specialchars(_decode)?|entities)|html_entity_decode|hex2bin|hebrev(c)?|number_format|nl2br|nl_langinfo|
            chop|chunk_split|chr|convert_(cyr_string|uu(decode|encode))|count_chars|crypt|crc32|trim|implode|ord|
            uc(first|words)|join|parse_str|print(f)?|echo|explode|v?[fs]?printf|quoted_printable_(decode|encode)|
            quotemeta|wordwrap|lcfirst|[lr]trim|localeconv|levenshtein|addc?slashes|get_html_translation_table
          )\b
        name: support.function.string.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          sybase_(
            set_message_handler|select_db|num_(fields|rows)|connect|close|deadlock_retry_count|data_seek|
            unbuffered_query|pconnect|query|field_seek|fetch_(object|field|assoc|array|row)|free_result|
            affected_rows|result|get_last_message|min_(client|error|message|server)_severity
          )\b
        name: support.function.sybase.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (taint|is_tainted|untaint)\b
        name: support.function.taint.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            tidy_((get|set)opt|set_encoding|save_config|config_count|clean_repair|is_(xhtml|xml)|diagnose|
                  (access|error|warning)_count|load_config|reset_config|(parse|repair)_(string|file)|
                  get_(status|html(_ver)?|head|config|output|opt_doc|root|release|body))|
            ob_tidyhandler
          )\b
        name: support.function.tidy.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          token_(name|get_all)\b
        name: support.function.tokenizer.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          trader_(
            stoch(f|r|rsi)?|stddev|sin(h)?|sum|sub|set_(compat|unstable_period)|sqrt|sar(ext)?|sma|
            ht_(sine|trend(line|mode)|dc(period|phase)|phasor)|natr|cci|cos(h)?|correl|
            cdl(shootingstar|shortline|sticksandwich|stalledpattern|spinningtop|separatinglines|
                hikkake(mod)?|highwave|homingpigeon|hangingman|harami(cross)?|hammer|concealbabyswall|
                counterattack|closingmarubozu|thrusting|tasukigap|takuri|tristar|inneck|invertedhammer|
                identical3crows|2crows|onneck|doji(star)?|darkcloudcover|dragonflydoji|unique3river|
                upsidegap2crows|3(starsinsouth|inside|outside|whitesoldiers|linestrike|blackcrows)|
                piercing|engulfing|evening(doji)?star|kicking(bylength)?|longline|longleggeddoji|
                ladderbottom|advanceblock|abandonedbaby|risefall3methods|rickshawman|gapsidesidewhite|
                gravestonedoji|xsidegap3methods|morning(doji)?star|mathold|matchinglow|marubozu|
                belthold|breakaway)|
            ceil|cmo|tsf|typprice|t3|tema|tan(h)?|trix|trima|trange|obv|div|dema|dx|ultosc|ppo|
            plus_d[im]|errno|exp|ema|var|kama|floor|wclprice|willr|wma|ln|log10|bop|beta|bbands|
            linearreg(_(slope|intercept|angle))?|asin|acos|atan|atr|adosc|ad|add|adx(r)?|apo|avgprice|
            aroon(osc)?|rsi|roc|rocp|rocr(100)?|get_(compat|unstable_period)|min(index)?|minus_d[im]|
            minmax(index)?|mid(point|price)|mom|mult|medprice|mfi|macd(ext|fix)?|mavp|max(index)?|ma(ma)?
          )\b
        name: support.function.trader.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          uopz_(copy|compose|implement|overload|delete|undefine|extend|function|flags|restore|rename|redefine|backup)\b
        name: support.function.uopz.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          (http_build_query|(raw)?url(decode|encode)|parse_url|get_(headers|meta_tags)|base64_(decode|encode))\b
        name: support.function.url.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            strval|settype|serialize|(bool|double|float)val|debug_zval_dump|intval|import_request_variables|isset|
            is_(scalar|string|null|numeric|callable|int(eger)?|object|double|float|long|array|resource|real|bool)|
            unset|unserialize|print_r|empty|var_(dump|export)|gettype|get_(defined_vars|resource_type)
          )\b
        name: support.function.var.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          wddx_(serialize_(value|vars)|deserialize|packet_(start|end)|add_vars)\b
        name: support.function.wddx.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          xhprof_(sample_)?(disable|enable)\b
        name: support.function.xhprof.js
      - match: |-
          (?xi)
          \s*+(?<!\.)\b
          (
            utf8_(decode|encode)|
            xml_(set_((notation|(end|start)_namespace|unparsed_entity)_decl_handler|
                      (character_data|default|element|external_entity_ref|processing_instruction)_handler|object)|
                 parse(_into_struct)?|parser_((get|set)_option|create(_ns)?|free)|error_string|
                 get_(current_((column|line)_number|byte_index)|error_code))
          )\b
        name: support.function.xml.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          xmlrpc_(
            server_(call_method|create|destroy|add_introspection_data|register_(introspection_callback|method))|
            is_fault|decode(_request)?|parse_method_descriptions|encode(_request)?|(get|set)_type
          )\b
        name: support.function.xmlrpc.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          xmlwriter_(
            (end|start|write)_(comment|cdata|dtd(_(attlist|entity|element))?|document|pi|attribute|element)|
            (start|write)_(attribute|element)_ns|write_raw|set_indent(_string)?|text|output_memory|open_(memory|uri)|
            full_end_element|flush|
          )\b
        name: support.function.xmlwriter.js
      - match: |-
          (?xi)\s*+(?<!\.)\b
          (
            zlib_(decode|encode|get_coding_type)|readgzfile|
            gz(seek|compress|close|tell|inflate|open|decode|deflate|uncompress|puts|passthru|encode|eof|file|
               write|rewind|read|getc|getss?)
          )\b
        name: support.function.zlib.js
      - match: |-
          (?i)\s*+(?<!\.)\b
          is_int(eger)?\b
        name: support.function.alias.js
  support-properties:
    patterns:
      - match: |-
          (?<=\.)\s*\b
          (ATTRIBUTE_NODE|CDATA_SECTION_NODE|COMMENT_NODE|DOCUMENT_FRAGMENT_NODE|DOCUMENT_NODE|DOCUMENT_TYPE_NODE
          |DOMSTRING_SIZE_ERR|ELEMENT_NODE|ENTITY_NODE|ENTITY_REFERENCE_NODE|HIERARCHY_REQUEST_ERR|INDEX_SIZE_ERR
          |INUSE_ATTRIBUTE_ERR|INVALID_CHARACTER_ERR|NO_DATA_ALLOWED_ERR|NO_MODIFICATION_ALLOWED_ERR|NOT_FOUND_ERR
          |NOT_SUPPORTED_ERR|NOTATION_NODE|PROCESSING_INSTRUCTION_NODE|TEXT_NODE|WRONG_DOCUMENT_ERR)
          \b\s*
        name: support.variable.property.dom.js
      - match: >-
          (?x)(?<=\.)\s*\b
          (_content|[xyz]|abbr|above|accept|acceptCharset|accessKey|action|align|[av]Link(?:color)?|all|alt|anchors|appCodeName   
          |appCore|applets|appMinorVersion|appName|appVersion|archive|areas|arguments|attributes|availHeight|availLeft|availTop   
          |availWidth|axis|background|backgroundColor|backgroundImage|below|bgColor|body|border|borderBottomWidth|borderColor   
          |borderLeftWidth|borderRightWidth|borderStyle|borderTopWidth|borderWidth|bottom|bufferDepth|callee|caller|caption   
          |cellPadding|cells|cellSpacing|ch|characterSet|charset|checked|childNodes|chOff|cite|classes|className|clear   
          |clientInformation|clip|clipBoardData|closed|code|codeBase|codeType|color|colorDepth|cols|colSpan|compact|complete   
          |components|content|controllers|cookie|cookieEnabled|cords|cpuClass|crypto|current|data|dateTime|declare|defaultCharset   
          |defaultChecked|defaultSelected|defaultStatus|defaultValue|defaultView|defer|description|dialogArguments|dialogHeight
              |dialogLeft|dialogTop|dialogWidth|dir|directories|disabled|display|docmain|doctype|documentElement|elements|embeds
              |enabledPlugin|encoding|enctype|entities|event|expando|external|face|fgColor|filename|firstChild|fontFamily|fontSize
              |fontWeight|form|formName|forms|frame|frameBorder|frameElement|frames|hasFocus|hash|headers|height|history|host
              |hostname|href|hreflang|hspace|htmlFor|httpEquiv|id|ids|ignoreCase|images|implementation|index|innerHeight|innerWidth
              |input|isMap|label|lang|language|lastChild|lastIndex|lastMatch|lastModified|lastParen|layer[sXY]|left|leftContext
              |lineHeight|link|linkColor|links|listStyleType|localName|location|locationbar|longDesc|lowsrc|lowSrc|marginBottom
              |marginHeight|marginLeft|marginRight|marginTop|marginWidth|maxLength|media|menubar|method|mimeTypes|multiline|multiple
              |name|nameProp|namespaces|namespaceURI|next|nextSibling|nodeName|nodeType|nodeValue|noHref|noResize|noShade|notationName
              |notations|noWrap|object|offscreenBuffering|onLine|onreadystatechange|opener|opsProfile|options|oscpu|outerHeight
              |outerWidth|ownerDocument|paddingBottom|paddingLeft|paddingRight|paddingTop|page[XY]|page[XY]Offset|parent|parentLayer
              |parentNode|parentWindow|pathname|personalbar|pixelDepth|pkcs11|platform|plugins|port|prefix|previous|previousDibling
              |product|productSub|profile|profileend|prompt|prompter|protocol|publicId|readOnly|readyState|referrer|rel|responseText
              |responseXML|rev|right|rightContext|rowIndex|rows|rowSpan|rules|scheme|scope|screen[XY]|screenLeft|screenTop|scripts
              |scrollbars|scrolling|sectionRowIndex|security|securityPolicy|selected|selectedIndex|selection|self|shape|siblingAbove
              |siblingBelow|size|source|specified|standby|start|status|statusbar|statusText|style|styleSheets|suffixes|summary
              |systemId|systemLanguage|tagName|tags|target|tBodies|text|textAlign|textDecoration|textIndent|textTransform|tFoot|tHead
              |title|toolbar|top|type|undefined|uniqueID|updateInterval|URL|URLUnencoded|useMap|userAgent|userLanguage|userProfile
              |vAlign|value|valueType|vendor|vendorSub|version|visibility|vspace|whiteSpace|width|X[MS]LDocument|zIndex)
          \b\s*
        name: support.variable.property.dom.js
      - match:
          (?x)(?<=\.)\s*\b (module|exports|id|filename|loaded|parent|children)
          \b\s*
        name: support.type.object.module.js
  support-python:
    patterns:
      - match: |
          (?x)
            (?<!\.) \s*+ \b(
              __import__ | abs | all | any | ascii | bin | breakpoint | callable
              | chr | compile | copyright | credits | delattr | dir | divmod
              | enumerate | eval | exec | exit | filter | format | getattr
              | globals | hasattr | hash | help | hex | id | input
              | isinstance | issubclass | iter | len | license | locals | map
              | max | memoryview | min | next | oct | open | ord | pow | print
              | quit | range | reload | repr | reversed | round
              | setattr | sorted | sum | vars | zip
            )\b
        name: support.function.builtin.js
      - match: |
          (?x)
            (?<!\.) \s*+ \b(
              file | reduce | intern | raw_input | unicode | cmp | basestring
              | execfile | long | xrange
            )\b
        name: variable.legacy.builtin.js
      - match: |
          (?x)
            (?<!\.) \s*+ \b(
              bool | bytearray | bytes | classmethod | complex | dict
              | float | frozenset | int | list | object | property
             | slice | staticmethod | str | tuple | type
              (?# Although 'super' is not a type, it's related to types,
                  and is special enough to be highlighted differently from
                  other built-ins)
              | super
            )\b
        name: support.type.primitive.js
      - comment: |
          these methods have magic interpretation by python and are generally called
          indirectly through syntactic constructs
        match: |
          (?x)
           \s*+ \b(
              __(?:
                abs | add | aenter | aexit | aiter | and | anext | await
                | bool | call | ceil | cmp | coerce | complex | contains
                | copy | deepcopy | del | delattr | delete | delitem
                | delslice | dir | div | divmod | enter | eq | exit | float
                | floor | floordiv | format | ge | get | getattr
                | getattribute | getinitargs | getitem | getnewargs
                | getslice | getstate | gt | hash | hex | iadd | iand | idiv
                | ifloordiv | ilshift | imod | imul | index | init
                | instancecheck | int | invert | ior | ipow | irshift | isub
                | iter | itruediv | ixor | le | len | long | lshift | lt
                | missing | mod | mul | ne | neg | new | next | nonzero | oct | or
                | pos | pow | radd | rand | rdiv | rdivmod | reduce
                | reduce_ex | repr | reversed | rfloordiv | rlshift | rmod
                | rmul | ror | round | rpow | rrshift | rshift | rsub
                | rtruediv | rxor | setattr | setitem | setslice
                | setstate | sizeof | str | sub | subclasscheck | truediv
                | trunc | unicode | xor | matmul | rmatmul | imatmul
                | init_subclass | set_name | fspath | bytes | prepare
              )__
            )\b
        captures:
          1: { name: support.function.magic.js }
      - comment: magic variables which a class/module may have.
        match: |
          (?x)
           \s*+ \b(
              __(?:
                all | bases | builtins | class | class_getitem | code | debug
                | defaults | dict | doc | file | func | kwdefaults | members
                | metaclass | methods | module | mro | mro_entries | name
                | qualname | post_init | self | signature | slots | subclasses
                | version | weakref | wrapped | annotations | classcell
                | spec | path | package | future | traceback
              )__
            )\b
        captures:
          1: { name: support.variable.magic.js }
  swift-comments:
    patterns:
      - begin: /\*\*(?!/)
        end: \*/
        name: comment.block.documentation.js
        beginCaptures:
          0: { name: punctuation.definition.comment.begin.js }
        endCaptures:
          0: { name: punctuation.definition.comment.end.js }
        patterns:
          - include: '#jsdoc'
          - include: '#nested'
      - begin: '/\*:'
        end: \*/
        name: comment.line.shebang.js
        beginCaptures:
          0: { name: punctuation.definition.comment.begin.js }
        endCaptures:
          0: { name: punctuation.definition.comment.end.js }
        patterns:
          - include: '#nested'
      - begin: /\*
        end: \*/
        name: comment.block.js
        beginCaptures:
          0: { name: punctuation.definition.comment.begin.js }
        endCaptures:
          0: { name: punctuation.definition.comment.end.js }
        patterns:
          - include: '#nested'
      - match: \*/
        name: invalid.illegal.unexpected-end-of-block-comment.js
      - begin: (^[ \t]+)?(?=//)
        end: (?!\G)
        beginCaptures:
          1: { name: punctuation.whitespace.comment.leading.js }
        patterns:
          - begin: ///
            end: ^
            name: comment.line.triple-slash.documentation.js
            beginCaptures:
              0: { name: punctuation.definition.comment.js }
          - begin: '//:'
            end: ^
            name: comment.line.double-slash.documentation.js
            beginCaptures:
              0: { name: punctuation.definition.comment.js }
          - begin: //
            end: ^
            name: comment.line.double-slash.js
            beginCaptures:
              0: { name: punctuation.definition.comment.js }
    repository:
      nested:
        begin: /\*
        end: \*/
        patterns:
          - include: '#nested'
  switch:
    patterns:
      - begin: (?<!\.)\s*+\b(switch)\b
        end: \s*(\})
        name: meta.switch.js
        beginCaptures:
          1: { name: keyword.control.switch.js }
        endCaptures:
          1: { name: meta.brace.curly.switchEnd.js }
        patterns:
          - include: '#round-brackets'
          - begin: \s*+({)
            end: \s*(?=})
            beginCaptures:
              1: { name: meta.brace.curly.switchStart.js }
            patterns:
              - begin: (?<!\.)\s*+\b(case|default)\b
                end: \s*(:)((?=::)|(?!:))
                beginCaptures:
                  1: { name: keyword.control.switch.js }
                endCaptures:
                  1: { name: keyword.operator.js }
                patterns:
                  - include: '#core'
              - include: $self
          - include: $self
  ternary-expression:
    begin: (?!\?\.\s*[^[:digit:]])(\?)(?!\?)
    end: \s*(:)
    beginCaptures:
      1: { name: keyword.operator.ternary.js }
    endCaptures:
      1: { name: keyword.operator.ternary.js }
    patterns:
      - include: '#core'
  type-argument-brackets:
    patterns:
      - begin: \s*+(<)(?=((?:(?>[^<>]+)|<\g<-1>>)*)>)
        comment:
          Type arguments. This is complicated since we don't want to match
          things like foo < 123 || bar > baz
        end: \s*(>)
        name: meta.type-arguments.flowtype
        beginCaptures:
          1: { name: punctuation.flowtype }
        endCaptures:
          1: { name: punctuation.flowtype }
        patterns:
          - include: '#flowtype-parse-types'
          - include: '#comma'
  typecast-expression:
    patterns:
      - begin: \s*+(\()
        end: \s*(\))(?=\s*[_\p{Sc}\p{L}\p{M}\p{N}])
        beginCaptures:
          1: { name: meta.brace.round.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#flowtype-parse-types'
  variable:
    patterns:
      - comment: e.g. CONSTANT
        match: \s*+(\#?)([_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}\p{N}\p{M}]*)(?!\p{Ll})
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.constant.js }
      - comment: e.g. dollar vars
        match: \s*+(\#?)(\\[_\\\p{L}\p{N}\p{M}]*)
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.dollar.js }
      - comment: e.g. Class.property
        match: >-
          \s*+(\#?)\b([_\\\p{Lu}\p{Lt}\p{Lo}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?:(\?\.)|(\.))\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: meta.property.class.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.class.js }
          3: { name: keyword.operator.existential.js }
          4: { name: keyword.operator.accessor.js }
          5: { name: keyword.operator.private.js }
          6: { name: variable.other.property.static.js }
      - comment: e.g. obj.property
        match: (?<!\.)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*+(?=[\[\.]|[!?~]\.)
        name: variable.other.object.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.object.js }
      - comment: e.g. obj.property
        match: (?<=\.)\s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        name: meta.property.object.js
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.property.js }
      - match: \s*+(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)
        captures:
          1: { name: keyword.operator.private.js }
          2: { name: variable.other.readwrite.js }
  variable-flowtype:
    patterns:
      - begin: (?<=^|,|\()\s*+(?=(\#?)([_\\\p{L}\p{Nl}][_\\\p{L}\p{N}\p{M}]*)\s*\??\s*:((?=::)|(?!:)))
        comment: Assume this is a flow typed var
        end: \s*(?=,|\))
        patterns:
          - include: '#flowtype-variable'
      - begin: (?<=^|,|\()\s*+(?="[^"]"\s*:)
        comment: Assume this is a flow typed var
        end: \s*(?>=|\))
        patterns:
          - include: '#flowtype-variable'
      - begin: (?<=^|,|\()\s*+(?='[^']'\s*:)
        comment: Assume this is a flow typed var
        end: \s*(?>=|\))
        patterns:
          - include: '#flowtype-variable'
  with:
    patterns:
      - begin: (?<!\.)\s*+\b(with)\b\s*(await)?\b
        end: \s*(?<=[})])
        name: meta.with.js
        beginCaptures:
          1: { name: keyword.control.with.js }
          2: { name: keyword.control.flow.js }
        endCaptures:
          1: { name: meta.brace.round.js }
        patterns:
          - include: '#curly-brackets'
          - begin: \s*
            end: \s*(?=[{,])
            patterns:
              - match: (?<!\.)\s*+\b(as)\b
                name: keyword.control.with.js
              - include: '#core'
          - begin: \s*+(\()
            end: \s*(?=\))
            beginCaptures:
              1: { name: meta.brace.round.js }
            patterns:
              - match: (?<!\.)\s*+\b(as)\b
                name: keyword.control.with.js
              - include: '#core'
          - include: $self
limitLineLength: false
